ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "FreeRTOS/Source/tasks.c"
  20              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskIsTaskSuspended:
  27              	.LVL0:
  28              	.LFB16:
   1:FreeRTOS/Source/tasks.c **** /*
   2:FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS/Source/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/tasks.c ****  *
   5:FreeRTOS/Source/tasks.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/Source/tasks.c ****  *
   7:FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  13:FreeRTOS/Source/tasks.c ****  *
  14:FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/Source/tasks.c ****  *
  17:FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/Source/tasks.c ****  *
  24:FreeRTOS/Source/tasks.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/Source/tasks.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/Source/tasks.c ****  *
  27:FreeRTOS/Source/tasks.c ****  */
  28:FreeRTOS/Source/tasks.c **** 
  29:FreeRTOS/Source/tasks.c **** /* Standard includes. */
  30:FreeRTOS/Source/tasks.c **** #include <stdlib.h>
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 2


  31:FreeRTOS/Source/tasks.c **** #include <string.h>
  32:FreeRTOS/Source/tasks.c **** 
  33:FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:FreeRTOS/Source/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:FreeRTOS/Source/tasks.c ****  * task.h is included from an application file. */
  36:FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:FreeRTOS/Source/tasks.c **** 
  38:FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  39:FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  40:FreeRTOS/Source/tasks.c **** #include "task.h"
  41:FreeRTOS/Source/tasks.c **** #include "timers.h"
  42:FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  43:FreeRTOS/Source/tasks.c **** 
  44:FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:FreeRTOS/Source/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS/Source/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:FreeRTOS/Source/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:FreeRTOS/Source/tasks.c **** 
  50:FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:FreeRTOS/Source/tasks.c ****  * functions but without including stdio.h here. */
  52:FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:FreeRTOS/Source/tasks.c **** 
  54:FreeRTOS/Source/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:FreeRTOS/Source/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:FreeRTOS/Source/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:FreeRTOS/Source/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:FreeRTOS/Source/tasks.c ****     #include <stdio.h>
  59:FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:FreeRTOS/Source/tasks.c **** 
  61:FreeRTOS/Source/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:FreeRTOS/Source/tasks.c **** 
  63:FreeRTOS/Source/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:FreeRTOS/Source/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:FreeRTOS/Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:FreeRTOS/Source/tasks.c **** #else
  67:FreeRTOS/Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:FreeRTOS/Source/tasks.c **** #endif
  69:FreeRTOS/Source/tasks.c **** 
  70:FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:FreeRTOS/Source/tasks.c **** 
  75:FreeRTOS/Source/tasks.c **** /*
  76:FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:FreeRTOS/Source/tasks.c ****  */
  79:FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:FreeRTOS/Source/tasks.c **** 
  81:FreeRTOS/Source/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:FreeRTOS/Source/tasks.c **** 
  86:FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:FreeRTOS/Source/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 3


  88:FreeRTOS/Source/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:FreeRTOS/Source/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:FreeRTOS/Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:FreeRTOS/Source/tasks.c **** #else
  92:FreeRTOS/Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:FreeRTOS/Source/tasks.c **** #endif
  94:FreeRTOS/Source/tasks.c **** 
  95:FreeRTOS/Source/tasks.c **** /*
  96:FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:FreeRTOS/Source/tasks.c ****  */
  98:FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:FreeRTOS/Source/tasks.c **** 
 104:FreeRTOS/Source/tasks.c **** /*
 105:FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:FreeRTOS/Source/tasks.c ****  * be global, rather than file scope.
 107:FreeRTOS/Source/tasks.c ****  */
 108:FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:FreeRTOS/Source/tasks.c ****     #define static
 110:FreeRTOS/Source/tasks.c **** #endif
 111:FreeRTOS/Source/tasks.c **** 
 112:FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:FreeRTOS/Source/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:FreeRTOS/Source/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:FreeRTOS/Source/tasks.c **** #endif
 117:FreeRTOS/Source/tasks.c **** 
 118:FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:FreeRTOS/Source/tasks.c **** 
 120:FreeRTOS/Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:FreeRTOS/Source/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:FreeRTOS/Source/tasks.c ****  * microcontroller architecture. */
 123:FreeRTOS/Source/tasks.c **** 
 124:FreeRTOS/Source/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:FreeRTOS/Source/tasks.c ****  * state task. */
 126:FreeRTOS/Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:FreeRTOS/Source/tasks.c ****     {                                               \
 128:FreeRTOS/Source/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:FreeRTOS/Source/tasks.c ****         {                                           \
 130:FreeRTOS/Source/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:FreeRTOS/Source/tasks.c ****         }                                           \
 132:FreeRTOS/Source/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:FreeRTOS/Source/tasks.c **** 
 134:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 135:FreeRTOS/Source/tasks.c **** 
 136:FreeRTOS/Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:FreeRTOS/Source/tasks.c ****     {                                                                         \
 138:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:FreeRTOS/Source/tasks.c ****                                                                               \
 140:FreeRTOS/Source/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:FreeRTOS/Source/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:FreeRTOS/Source/tasks.c ****         {                                                                     \
 143:FreeRTOS/Source/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:FreeRTOS/Source/tasks.c ****             --uxTopPriority;                                                  \
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 4


 145:FreeRTOS/Source/tasks.c ****         }                                                                     \
 146:FreeRTOS/Source/tasks.c ****                                                                               \
 147:FreeRTOS/Source/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:FreeRTOS/Source/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:FreeRTOS/Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:FreeRTOS/Source/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:FreeRTOS/Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:FreeRTOS/Source/tasks.c **** 
 153:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 154:FreeRTOS/Source/tasks.c **** 
 155:FreeRTOS/Source/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:FreeRTOS/Source/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:FreeRTOS/Source/tasks.c ****  * being used. */
 158:FreeRTOS/Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:FreeRTOS/Source/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:FreeRTOS/Source/tasks.c **** 
 161:FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:FreeRTOS/Source/tasks.c **** 
 163:FreeRTOS/Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:FreeRTOS/Source/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:FreeRTOS/Source/tasks.c ****  * architecture being used. */
 166:FreeRTOS/Source/tasks.c **** 
 167:FreeRTOS/Source/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:FreeRTOS/Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:FreeRTOS/Source/tasks.c **** 
 170:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 171:FreeRTOS/Source/tasks.c **** 
 172:FreeRTOS/Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:FreeRTOS/Source/tasks.c ****     {                                                                                           \
 174:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:FreeRTOS/Source/tasks.c ****                                                                                                 \
 176:FreeRTOS/Source/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:FreeRTOS/Source/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:FreeRTOS/Source/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:FreeRTOS/Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:FreeRTOS/Source/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:FreeRTOS/Source/tasks.c **** 
 182:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 183:FreeRTOS/Source/tasks.c **** 
 184:FreeRTOS/Source/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:FreeRTOS/Source/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:FreeRTOS/Source/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:FreeRTOS/Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:FreeRTOS/Source/tasks.c ****     {                                                                                              
 189:FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:FreeRTOS/Source/tasks.c ****         {                                                                                          
 191:FreeRTOS/Source/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:FreeRTOS/Source/tasks.c ****         }                                                                                          
 193:FreeRTOS/Source/tasks.c ****     }
 194:FreeRTOS/Source/tasks.c **** 
 195:FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:FreeRTOS/Source/tasks.c **** 
 197:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 198:FreeRTOS/Source/tasks.c **** 
 199:FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:FreeRTOS/Source/tasks.c ****  * count overflows. */
 201:FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 5


 202:FreeRTOS/Source/tasks.c ****     {                                                                             \
 203:FreeRTOS/Source/tasks.c ****         List_t * pxTemp;                                                          \
 204:FreeRTOS/Source/tasks.c ****                                                                                   \
 205:FreeRTOS/Source/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:FreeRTOS/Source/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:FreeRTOS/Source/tasks.c ****                                                                                   \
 208:FreeRTOS/Source/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:FreeRTOS/Source/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:FreeRTOS/Source/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:FreeRTOS/Source/tasks.c ****         xNumOfOverflows++;                                                        \
 212:FreeRTOS/Source/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:FreeRTOS/Source/tasks.c ****     }
 214:FreeRTOS/Source/tasks.c **** 
 215:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/Source/tasks.c **** 
 217:FreeRTOS/Source/tasks.c **** /*
 218:FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:FreeRTOS/Source/tasks.c ****  */
 221:FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:FreeRTOS/Source/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:FreeRTOS/Source/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:FreeRTOS/Source/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:FreeRTOS/Source/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 227:FreeRTOS/Source/tasks.c **** 
 228:FreeRTOS/Source/tasks.c **** /*
 229:FreeRTOS/Source/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:FreeRTOS/Source/tasks.c ****  */
 234:FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:FreeRTOS/Source/tasks.c **** 
 236:FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:FreeRTOS/Source/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:FreeRTOS/Source/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:FreeRTOS/Source/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:FreeRTOS/Source/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:FreeRTOS/Source/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:FreeRTOS/Source/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:FreeRTOS/Source/tasks.c ****  * to its original value when it is released. */
 244:FreeRTOS/Source/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:FreeRTOS/Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:FreeRTOS/Source/tasks.c **** #else
 247:FreeRTOS/Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:FreeRTOS/Source/tasks.c **** #endif
 249:FreeRTOS/Source/tasks.c **** 
 250:FreeRTOS/Source/tasks.c **** /*
 251:FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 254:FreeRTOS/Source/tasks.c ****  */
 255:FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:FreeRTOS/Source/tasks.c **** {
 257:FreeRTOS/Source/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 6


 259:FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:FreeRTOS/Source/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 261:FreeRTOS/Source/tasks.c ****     #endif
 262:FreeRTOS/Source/tasks.c **** 
 263:FreeRTOS/Source/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:FreeRTOS/Source/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:FreeRTOS/Source/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:FreeRTOS/Source/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:FreeRTOS/Source/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:FreeRTOS/Source/tasks.c **** 
 269:FreeRTOS/Source/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:FreeRTOS/Source/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:FreeRTOS/Source/tasks.c ****     #endif
 272:FreeRTOS/Source/tasks.c **** 
 273:FreeRTOS/Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:FreeRTOS/Source/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:FreeRTOS/Source/tasks.c ****     #endif
 276:FreeRTOS/Source/tasks.c **** 
 277:FreeRTOS/Source/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:FreeRTOS/Source/tasks.c ****     #endif
 281:FreeRTOS/Source/tasks.c **** 
 282:FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:FreeRTOS/Source/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:FreeRTOS/Source/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:FreeRTOS/Source/tasks.c ****     #endif
 286:FreeRTOS/Source/tasks.c **** 
 287:FreeRTOS/Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:FreeRTOS/Source/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:FreeRTOS/Source/tasks.c ****     #endif
 290:FreeRTOS/Source/tasks.c **** 
 291:FreeRTOS/Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:FreeRTOS/Source/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:FreeRTOS/Source/tasks.c ****     #endif
 294:FreeRTOS/Source/tasks.c **** 
 295:FreeRTOS/Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:FreeRTOS/Source/tasks.c ****     #endif
 298:FreeRTOS/Source/tasks.c **** 
 299:FreeRTOS/Source/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 300:FreeRTOS/Source/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /*< Memory block used as Thread Local Storage (TLS) Block f
 301:FreeRTOS/Source/tasks.c ****     #endif
 302:FreeRTOS/Source/tasks.c **** 
 303:FreeRTOS/Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 304:FreeRTOS/Source/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 305:FreeRTOS/Source/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 306:FreeRTOS/Source/tasks.c ****     #endif
 307:FreeRTOS/Source/tasks.c **** 
 308:FreeRTOS/Source/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 309:FreeRTOS/Source/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 310:FreeRTOS/Source/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 311:FreeRTOS/Source/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 312:FreeRTOS/Source/tasks.c ****     #endif
 313:FreeRTOS/Source/tasks.c **** 
 314:FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 315:FreeRTOS/Source/tasks.c ****         uint8_t ucDelayAborted;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 7


 316:FreeRTOS/Source/tasks.c ****     #endif
 317:FreeRTOS/Source/tasks.c **** 
 318:FreeRTOS/Source/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 319:FreeRTOS/Source/tasks.c ****         int iTaskErrno;
 320:FreeRTOS/Source/tasks.c ****     #endif
 321:FreeRTOS/Source/tasks.c **** } tskTCB;
 322:FreeRTOS/Source/tasks.c **** 
 323:FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 324:FreeRTOS/Source/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 325:FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 326:FreeRTOS/Source/tasks.c **** 
 327:FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 328:FreeRTOS/Source/tasks.c ****  * which static variables must be declared volatile. */
 329:FreeRTOS/Source/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 330:FreeRTOS/Source/tasks.c **** 
 331:FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 332:FreeRTOS/Source/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 333:FreeRTOS/Source/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 334:FreeRTOS/Source/tasks.c ****  * the static qualifier. */
 335:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 336:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 337:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 338:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 339:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 340:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 341:FreeRTOS/Source/tasks.c **** 
 342:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 343:FreeRTOS/Source/tasks.c **** 
 344:FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 345:FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 346:FreeRTOS/Source/tasks.c **** 
 347:FreeRTOS/Source/tasks.c **** #endif
 348:FreeRTOS/Source/tasks.c **** 
 349:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 350:FreeRTOS/Source/tasks.c **** 
 351:FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 352:FreeRTOS/Source/tasks.c **** 
 353:FreeRTOS/Source/tasks.c **** #endif
 354:FreeRTOS/Source/tasks.c **** 
 355:FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 356:FreeRTOS/Source/tasks.c ****  * the errno of the currently running task. */
 357:FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 358:FreeRTOS/Source/tasks.c ****     int FreeRTOS_errno = 0;
 359:FreeRTOS/Source/tasks.c **** #endif
 360:FreeRTOS/Source/tasks.c **** 
 361:FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 362:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 363:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 364:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 365:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 366:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 367:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 368:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 369:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 370:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 371:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 372:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 8


 373:FreeRTOS/Source/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 374:FreeRTOS/Source/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 375:FreeRTOS/Source/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 376:FreeRTOS/Source/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 377:FreeRTOS/Source/tasks.c **** 
 378:FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:FreeRTOS/Source/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:FreeRTOS/Source/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:FreeRTOS/Source/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:FreeRTOS/Source/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 383:FreeRTOS/Source/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 384:FreeRTOS/Source/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 385:FreeRTOS/Source/tasks.c ****  * accessed from a critical section. */
 386:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 387:FreeRTOS/Source/tasks.c **** 
 388:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:FreeRTOS/Source/tasks.c **** 
 390:FreeRTOS/Source/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 391:FreeRTOS/Source/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 392:FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 393:FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 394:FreeRTOS/Source/tasks.c **** 
 395:FreeRTOS/Source/tasks.c **** #endif
 396:FreeRTOS/Source/tasks.c **** 
 397:FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:FreeRTOS/Source/tasks.c **** 
 399:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:FreeRTOS/Source/tasks.c **** 
 401:FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 402:FreeRTOS/Source/tasks.c **** 
 403:FreeRTOS/Source/tasks.c **** /**
 404:FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 405:FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 406:FreeRTOS/Source/tasks.c ****  * is in any other state.
 407:FreeRTOS/Source/tasks.c ****  */
 408:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 409:FreeRTOS/Source/tasks.c **** 
 410:FreeRTOS/Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 411:FreeRTOS/Source/tasks.c **** 
 412:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 413:FreeRTOS/Source/tasks.c **** 
 414:FreeRTOS/Source/tasks.c **** /*
 415:FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 416:FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 417:FreeRTOS/Source/tasks.c ****  */
 418:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 419:FreeRTOS/Source/tasks.c **** 
 420:FreeRTOS/Source/tasks.c **** /*
 421:FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 422:FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 423:FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 424:FreeRTOS/Source/tasks.c ****  *
 425:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 426:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 427:FreeRTOS/Source/tasks.c ****  *
 428:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 429:FreeRTOS/Source/tasks.c ****  *
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 9


 430:FreeRTOS/Source/tasks.c ****  */
 431:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 432:FreeRTOS/Source/tasks.c **** 
 433:FreeRTOS/Source/tasks.c **** /*
 434:FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 435:FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 436:FreeRTOS/Source/tasks.c ****  *
 437:FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 438:FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 439:FreeRTOS/Source/tasks.c ****  */
 440:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 441:FreeRTOS/Source/tasks.c **** 
 442:FreeRTOS/Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 443:FreeRTOS/Source/tasks.c **** 
 444:FreeRTOS/Source/tasks.c **** #endif
 445:FreeRTOS/Source/tasks.c **** 
 446:FreeRTOS/Source/tasks.c **** /*
 447:FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 448:FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 449:FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 450:FreeRTOS/Source/tasks.c ****  */
 451:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 452:FreeRTOS/Source/tasks.c **** 
 453:FreeRTOS/Source/tasks.c **** /*
 454:FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 455:FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 456:FreeRTOS/Source/tasks.c ****  */
 457:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 458:FreeRTOS/Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 459:FreeRTOS/Source/tasks.c **** 
 460:FreeRTOS/Source/tasks.c **** /*
 461:FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 462:FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 463:FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 464:FreeRTOS/Source/tasks.c ****  *
 465:FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 466:FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 467:FreeRTOS/Source/tasks.c ****  */
 468:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 469:FreeRTOS/Source/tasks.c **** 
 470:FreeRTOS/Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 471:FreeRTOS/Source/tasks.c ****                                                      List_t * pxList,
 472:FreeRTOS/Source/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 473:FreeRTOS/Source/tasks.c **** 
 474:FreeRTOS/Source/tasks.c **** #endif
 475:FreeRTOS/Source/tasks.c **** 
 476:FreeRTOS/Source/tasks.c **** /*
 477:FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 478:FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 479:FreeRTOS/Source/tasks.c ****  */
 480:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 481:FreeRTOS/Source/tasks.c **** 
 482:FreeRTOS/Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 483:FreeRTOS/Source/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 484:FreeRTOS/Source/tasks.c **** 
 485:FreeRTOS/Source/tasks.c **** #endif
 486:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 10


 487:FreeRTOS/Source/tasks.c **** /*
 488:FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 489:FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 490:FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 491:FreeRTOS/Source/tasks.c ****  */
 492:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 493:FreeRTOS/Source/tasks.c **** 
 494:FreeRTOS/Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 495:FreeRTOS/Source/tasks.c **** 
 496:FreeRTOS/Source/tasks.c **** #endif
 497:FreeRTOS/Source/tasks.c **** 
 498:FreeRTOS/Source/tasks.c **** /*
 499:FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 500:FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 501:FreeRTOS/Source/tasks.c ****  *
 502:FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 503:FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 504:FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 505:FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 506:FreeRTOS/Source/tasks.c ****  */
 507:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 508:FreeRTOS/Source/tasks.c **** 
 509:FreeRTOS/Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 510:FreeRTOS/Source/tasks.c **** 
 511:FreeRTOS/Source/tasks.c **** #endif
 512:FreeRTOS/Source/tasks.c **** 
 513:FreeRTOS/Source/tasks.c **** /*
 514:FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 515:FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 516:FreeRTOS/Source/tasks.c ****  */
 517:FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 518:FreeRTOS/Source/tasks.c **** 
 519:FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 520:FreeRTOS/Source/tasks.c **** 
 521:FreeRTOS/Source/tasks.c **** /*
 522:FreeRTOS/Source/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 523:FreeRTOS/Source/tasks.c ****  * human readable tables of task information.
 524:FreeRTOS/Source/tasks.c ****  */
 525:FreeRTOS/Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 526:FreeRTOS/Source/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 527:FreeRTOS/Source/tasks.c **** 
 528:FreeRTOS/Source/tasks.c **** #endif
 529:FreeRTOS/Source/tasks.c **** 
 530:FreeRTOS/Source/tasks.c **** /*
 531:FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 532:FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 533:FreeRTOS/Source/tasks.c ****  */
 534:FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 535:FreeRTOS/Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 536:FreeRTOS/Source/tasks.c ****                                   const uint32_t ulStackDepth,
 537:FreeRTOS/Source/tasks.c ****                                   void * const pvParameters,
 538:FreeRTOS/Source/tasks.c ****                                   UBaseType_t uxPriority,
 539:FreeRTOS/Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 540:FreeRTOS/Source/tasks.c ****                                   TCB_t * pxNewTCB,
 541:FreeRTOS/Source/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 542:FreeRTOS/Source/tasks.c **** 
 543:FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 11


 544:FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 545:FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 546:FreeRTOS/Source/tasks.c ****  */
 547:FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 548:FreeRTOS/Source/tasks.c **** 
 549:FreeRTOS/Source/tasks.c **** /*
 550:FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 551:FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 552:FreeRTOS/Source/tasks.c ****  * called by the function.
 553:FreeRTOS/Source/tasks.c ****  */
 554:FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 555:FreeRTOS/Source/tasks.c **** 
 556:FreeRTOS/Source/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 557:FreeRTOS/Source/tasks.c **** 
 558:FreeRTOS/Source/tasks.c **** #endif
 559:FreeRTOS/Source/tasks.c **** 
 560:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 561:FreeRTOS/Source/tasks.c **** 
 562:FreeRTOS/Source/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 563:FreeRTOS/Source/tasks.c **** 
 564:FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 565:FreeRTOS/Source/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 566:FreeRTOS/Source/tasks.c ****                                     const uint32_t ulStackDepth,
 567:FreeRTOS/Source/tasks.c ****                                     void * const pvParameters,
 568:FreeRTOS/Source/tasks.c ****                                     UBaseType_t uxPriority,
 569:FreeRTOS/Source/tasks.c ****                                     StackType_t * const puxStackBuffer,
 570:FreeRTOS/Source/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 571:FreeRTOS/Source/tasks.c ****     {
 572:FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 573:FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
 574:FreeRTOS/Source/tasks.c **** 
 575:FreeRTOS/Source/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 576:FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 577:FreeRTOS/Source/tasks.c **** 
 578:FreeRTOS/Source/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 579:FreeRTOS/Source/tasks.c ****         {
 580:FreeRTOS/Source/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 581:FreeRTOS/Source/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 582:FreeRTOS/Source/tasks.c ****              * structure. */
 583:FreeRTOS/Source/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 584:FreeRTOS/Source/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 585:FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 586:FreeRTOS/Source/tasks.c ****         }
 587:FreeRTOS/Source/tasks.c ****         #endif /* configASSERT_DEFINED */
 588:FreeRTOS/Source/tasks.c **** 
 589:FreeRTOS/Source/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 590:FreeRTOS/Source/tasks.c ****         {
 591:FreeRTOS/Source/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 592:FreeRTOS/Source/tasks.c ****              * function - use them. */
 593:FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 594:FreeRTOS/Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 595:FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 596:FreeRTOS/Source/tasks.c **** 
 597:FreeRTOS/Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 598:FreeRTOS/Source/tasks.c ****             {
 599:FreeRTOS/Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 600:FreeRTOS/Source/tasks.c ****                  * task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 12


 601:FreeRTOS/Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 602:FreeRTOS/Source/tasks.c ****             }
 603:FreeRTOS/Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 604:FreeRTOS/Source/tasks.c **** 
 605:FreeRTOS/Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 606:FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 607:FreeRTOS/Source/tasks.c ****         }
 608:FreeRTOS/Source/tasks.c ****         else
 609:FreeRTOS/Source/tasks.c ****         {
 610:FreeRTOS/Source/tasks.c ****             xReturn = NULL;
 611:FreeRTOS/Source/tasks.c ****         }
 612:FreeRTOS/Source/tasks.c **** 
 613:FreeRTOS/Source/tasks.c ****         return xReturn;
 614:FreeRTOS/Source/tasks.c ****     }
 615:FreeRTOS/Source/tasks.c **** 
 616:FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 617:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 618:FreeRTOS/Source/tasks.c **** 
 619:FreeRTOS/Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 620:FreeRTOS/Source/tasks.c **** 
 621:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 622:FreeRTOS/Source/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 623:FreeRTOS/Source/tasks.c ****     {
 624:FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 625:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 626:FreeRTOS/Source/tasks.c **** 
 627:FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 628:FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 629:FreeRTOS/Source/tasks.c **** 
 630:FreeRTOS/Source/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 631:FreeRTOS/Source/tasks.c ****         {
 632:FreeRTOS/Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 633:FreeRTOS/Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 634:FreeRTOS/Source/tasks.c ****              * not static allocation is being used. */
 635:FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 636:FreeRTOS/Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 637:FreeRTOS/Source/tasks.c **** 
 638:FreeRTOS/Source/tasks.c ****             /* Store the stack location in the TCB. */
 639:FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 640:FreeRTOS/Source/tasks.c **** 
 641:FreeRTOS/Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 642:FreeRTOS/Source/tasks.c ****             {
 643:FreeRTOS/Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 644:FreeRTOS/Source/tasks.c ****                  * task was created statically in case the task is later deleted. */
 645:FreeRTOS/Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 646:FreeRTOS/Source/tasks.c ****             }
 647:FreeRTOS/Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 648:FreeRTOS/Source/tasks.c **** 
 649:FreeRTOS/Source/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 650:FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->pcName,
 651:FreeRTOS/Source/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 652:FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->pvParameters,
 653:FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->uxPriority,
 654:FreeRTOS/Source/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 655:FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->xRegions );
 656:FreeRTOS/Source/tasks.c **** 
 657:FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 13


 658:FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
 659:FreeRTOS/Source/tasks.c ****         }
 660:FreeRTOS/Source/tasks.c **** 
 661:FreeRTOS/Source/tasks.c ****         return xReturn;
 662:FreeRTOS/Source/tasks.c ****     }
 663:FreeRTOS/Source/tasks.c **** 
 664:FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 665:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 666:FreeRTOS/Source/tasks.c **** 
 667:FreeRTOS/Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 668:FreeRTOS/Source/tasks.c **** 
 669:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 670:FreeRTOS/Source/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 671:FreeRTOS/Source/tasks.c ****     {
 672:FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 673:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 674:FreeRTOS/Source/tasks.c **** 
 675:FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 676:FreeRTOS/Source/tasks.c **** 
 677:FreeRTOS/Source/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 678:FreeRTOS/Source/tasks.c ****         {
 679:FreeRTOS/Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 680:FreeRTOS/Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 681:FreeRTOS/Source/tasks.c ****              * not static allocation is being used. */
 682:FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 683:FreeRTOS/Source/tasks.c **** 
 684:FreeRTOS/Source/tasks.c ****             if( pxNewTCB != NULL )
 685:FreeRTOS/Source/tasks.c ****             {
 686:FreeRTOS/Source/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 687:FreeRTOS/Source/tasks.c **** 
 688:FreeRTOS/Source/tasks.c ****                 /* Store the stack location in the TCB. */
 689:FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 690:FreeRTOS/Source/tasks.c **** 
 691:FreeRTOS/Source/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 692:FreeRTOS/Source/tasks.c ****                 {
 693:FreeRTOS/Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 694:FreeRTOS/Source/tasks.c ****                      * this task had a statically allocated stack in case it is
 695:FreeRTOS/Source/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 696:FreeRTOS/Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 697:FreeRTOS/Source/tasks.c ****                 }
 698:FreeRTOS/Source/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 699:FreeRTOS/Source/tasks.c **** 
 700:FreeRTOS/Source/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 701:FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->pcName,
 702:FreeRTOS/Source/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 703:FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->pvParameters,
 704:FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->uxPriority,
 705:FreeRTOS/Source/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 706:FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->xRegions );
 707:FreeRTOS/Source/tasks.c **** 
 708:FreeRTOS/Source/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 709:FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 710:FreeRTOS/Source/tasks.c ****             }
 711:FreeRTOS/Source/tasks.c ****         }
 712:FreeRTOS/Source/tasks.c **** 
 713:FreeRTOS/Source/tasks.c ****         return xReturn;
 714:FreeRTOS/Source/tasks.c ****     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 14


 715:FreeRTOS/Source/tasks.c **** 
 716:FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 717:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 718:FreeRTOS/Source/tasks.c **** 
 719:FreeRTOS/Source/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 720:FreeRTOS/Source/tasks.c **** 
 721:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 722:FreeRTOS/Source/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 723:FreeRTOS/Source/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 724:FreeRTOS/Source/tasks.c ****                             void * const pvParameters,
 725:FreeRTOS/Source/tasks.c ****                             UBaseType_t uxPriority,
 726:FreeRTOS/Source/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 727:FreeRTOS/Source/tasks.c ****     {
 728:FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 729:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 730:FreeRTOS/Source/tasks.c **** 
 731:FreeRTOS/Source/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 732:FreeRTOS/Source/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 733:FreeRTOS/Source/tasks.c ****          * the TCB then the stack. */
 734:FreeRTOS/Source/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 735:FreeRTOS/Source/tasks.c ****         {
 736:FreeRTOS/Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 737:FreeRTOS/Source/tasks.c ****              * the implementation of the port malloc function and whether or not static
 738:FreeRTOS/Source/tasks.c ****              * allocation is being used. */
 739:FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 740:FreeRTOS/Source/tasks.c **** 
 741:FreeRTOS/Source/tasks.c ****             if( pxNewTCB != NULL )
 742:FreeRTOS/Source/tasks.c ****             {
 743:FreeRTOS/Source/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 744:FreeRTOS/Source/tasks.c **** 
 745:FreeRTOS/Source/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 746:FreeRTOS/Source/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 747:FreeRTOS/Source/tasks.c ****                  * be deleted later if required. */
 748:FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 749:FreeRTOS/Source/tasks.c **** 
 750:FreeRTOS/Source/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
 751:FreeRTOS/Source/tasks.c ****                 {
 752:FreeRTOS/Source/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 753:FreeRTOS/Source/tasks.c ****                     vPortFree( pxNewTCB );
 754:FreeRTOS/Source/tasks.c ****                     pxNewTCB = NULL;
 755:FreeRTOS/Source/tasks.c ****                 }
 756:FreeRTOS/Source/tasks.c ****             }
 757:FreeRTOS/Source/tasks.c ****         }
 758:FreeRTOS/Source/tasks.c ****         #else /* portSTACK_GROWTH */
 759:FreeRTOS/Source/tasks.c ****         {
 760:FreeRTOS/Source/tasks.c ****             StackType_t * pxStack;
 761:FreeRTOS/Source/tasks.c **** 
 762:FreeRTOS/Source/tasks.c ****             /* Allocate space for the stack used by the task being created. */
 763:FreeRTOS/Source/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 764:FreeRTOS/Source/tasks.c **** 
 765:FreeRTOS/Source/tasks.c ****             if( pxStack != NULL )
 766:FreeRTOS/Source/tasks.c ****             {
 767:FreeRTOS/Source/tasks.c ****                 /* Allocate space for the TCB. */
 768:FreeRTOS/Source/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
 769:FreeRTOS/Source/tasks.c **** 
 770:FreeRTOS/Source/tasks.c ****                 if( pxNewTCB != NULL )
 771:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 15


 772:FreeRTOS/Source/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 773:FreeRTOS/Source/tasks.c **** 
 774:FreeRTOS/Source/tasks.c ****                     /* Store the stack location in the TCB. */
 775:FreeRTOS/Source/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 776:FreeRTOS/Source/tasks.c ****                 }
 777:FreeRTOS/Source/tasks.c ****                 else
 778:FreeRTOS/Source/tasks.c ****                 {
 779:FreeRTOS/Source/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 780:FreeRTOS/Source/tasks.c ****                      * it again. */
 781:FreeRTOS/Source/tasks.c ****                     vPortFreeStack( pxStack );
 782:FreeRTOS/Source/tasks.c ****                 }
 783:FreeRTOS/Source/tasks.c ****             }
 784:FreeRTOS/Source/tasks.c ****             else
 785:FreeRTOS/Source/tasks.c ****             {
 786:FreeRTOS/Source/tasks.c ****                 pxNewTCB = NULL;
 787:FreeRTOS/Source/tasks.c ****             }
 788:FreeRTOS/Source/tasks.c ****         }
 789:FreeRTOS/Source/tasks.c ****         #endif /* portSTACK_GROWTH */
 790:FreeRTOS/Source/tasks.c **** 
 791:FreeRTOS/Source/tasks.c ****         if( pxNewTCB != NULL )
 792:FreeRTOS/Source/tasks.c ****         {
 793:FreeRTOS/Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 794:FreeRTOS/Source/tasks.c ****             {
 795:FreeRTOS/Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 796:FreeRTOS/Source/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 797:FreeRTOS/Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 798:FreeRTOS/Source/tasks.c ****             }
 799:FreeRTOS/Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 800:FreeRTOS/Source/tasks.c **** 
 801:FreeRTOS/Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 802:FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 803:FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
 804:FreeRTOS/Source/tasks.c ****         }
 805:FreeRTOS/Source/tasks.c ****         else
 806:FreeRTOS/Source/tasks.c ****         {
 807:FreeRTOS/Source/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 808:FreeRTOS/Source/tasks.c ****         }
 809:FreeRTOS/Source/tasks.c **** 
 810:FreeRTOS/Source/tasks.c ****         return xReturn;
 811:FreeRTOS/Source/tasks.c ****     }
 812:FreeRTOS/Source/tasks.c **** 
 813:FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 814:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 815:FreeRTOS/Source/tasks.c **** 
 816:FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 817:FreeRTOS/Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 818:FreeRTOS/Source/tasks.c ****                                   const uint32_t ulStackDepth,
 819:FreeRTOS/Source/tasks.c ****                                   void * const pvParameters,
 820:FreeRTOS/Source/tasks.c ****                                   UBaseType_t uxPriority,
 821:FreeRTOS/Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 822:FreeRTOS/Source/tasks.c ****                                   TCB_t * pxNewTCB,
 823:FreeRTOS/Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 824:FreeRTOS/Source/tasks.c **** {
 825:FreeRTOS/Source/tasks.c ****     StackType_t * pxTopOfStack;
 826:FreeRTOS/Source/tasks.c ****     UBaseType_t x;
 827:FreeRTOS/Source/tasks.c **** 
 828:FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 16


 829:FreeRTOS/Source/tasks.c ****         /* Should the task be created in privileged mode? */
 830:FreeRTOS/Source/tasks.c ****         BaseType_t xRunPrivileged;
 831:FreeRTOS/Source/tasks.c **** 
 832:FreeRTOS/Source/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:FreeRTOS/Source/tasks.c ****         {
 834:FreeRTOS/Source/tasks.c ****             xRunPrivileged = pdTRUE;
 835:FreeRTOS/Source/tasks.c ****         }
 836:FreeRTOS/Source/tasks.c ****         else
 837:FreeRTOS/Source/tasks.c ****         {
 838:FreeRTOS/Source/tasks.c ****             xRunPrivileged = pdFALSE;
 839:FreeRTOS/Source/tasks.c ****         }
 840:FreeRTOS/Source/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 841:FreeRTOS/Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 842:FreeRTOS/Source/tasks.c **** 
 843:FreeRTOS/Source/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 844:FreeRTOS/Source/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:FreeRTOS/Source/tasks.c ****     {
 846:FreeRTOS/Source/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 847:FreeRTOS/Source/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 848:FreeRTOS/Source/tasks.c ****     }
 849:FreeRTOS/Source/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:FreeRTOS/Source/tasks.c **** 
 851:FreeRTOS/Source/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 852:FreeRTOS/Source/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 853:FreeRTOS/Source/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 854:FreeRTOS/Source/tasks.c ****      * by the port. */
 855:FreeRTOS/Source/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 856:FreeRTOS/Source/tasks.c ****     {
 857:FreeRTOS/Source/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 858:FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 859:FreeRTOS/Source/tasks.c **** 
 860:FreeRTOS/Source/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 861:FreeRTOS/Source/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 862:FreeRTOS/Source/tasks.c **** 
 863:FreeRTOS/Source/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:FreeRTOS/Source/tasks.c ****         {
 865:FreeRTOS/Source/tasks.c ****             /* Also record the stack's high address, which may assist
 866:FreeRTOS/Source/tasks.c ****              * debugging. */
 867:FreeRTOS/Source/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:FreeRTOS/Source/tasks.c ****         }
 869:FreeRTOS/Source/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:FreeRTOS/Source/tasks.c ****     }
 871:FreeRTOS/Source/tasks.c ****     #else /* portSTACK_GROWTH */
 872:FreeRTOS/Source/tasks.c ****     {
 873:FreeRTOS/Source/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 874:FreeRTOS/Source/tasks.c **** 
 875:FreeRTOS/Source/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 876:FreeRTOS/Source/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
 877:FreeRTOS/Source/tasks.c **** 
 878:FreeRTOS/Source/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 879:FreeRTOS/Source/tasks.c ****          * performed. */
 880:FreeRTOS/Source/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:FreeRTOS/Source/tasks.c ****     }
 882:FreeRTOS/Source/tasks.c ****     #endif /* portSTACK_GROWTH */
 883:FreeRTOS/Source/tasks.c **** 
 884:FreeRTOS/Source/tasks.c ****     /* Store the task name in the TCB. */
 885:FreeRTOS/Source/tasks.c ****     if( pcName != NULL )
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 17


 886:FreeRTOS/Source/tasks.c ****     {
 887:FreeRTOS/Source/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 888:FreeRTOS/Source/tasks.c ****         {
 889:FreeRTOS/Source/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 890:FreeRTOS/Source/tasks.c **** 
 891:FreeRTOS/Source/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 892:FreeRTOS/Source/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 893:FreeRTOS/Source/tasks.c ****              * string is not accessible (extremely unlikely). */
 894:FreeRTOS/Source/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 895:FreeRTOS/Source/tasks.c ****             {
 896:FreeRTOS/Source/tasks.c ****                 break;
 897:FreeRTOS/Source/tasks.c ****             }
 898:FreeRTOS/Source/tasks.c ****             else
 899:FreeRTOS/Source/tasks.c ****             {
 900:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 901:FreeRTOS/Source/tasks.c ****             }
 902:FreeRTOS/Source/tasks.c ****         }
 903:FreeRTOS/Source/tasks.c **** 
 904:FreeRTOS/Source/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 905:FreeRTOS/Source/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 906:FreeRTOS/Source/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 907:FreeRTOS/Source/tasks.c ****     }
 908:FreeRTOS/Source/tasks.c ****     else
 909:FreeRTOS/Source/tasks.c ****     {
 910:FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 911:FreeRTOS/Source/tasks.c ****     }
 912:FreeRTOS/Source/tasks.c **** 
 913:FreeRTOS/Source/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 914:FreeRTOS/Source/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 915:FreeRTOS/Source/tasks.c **** 
 916:FreeRTOS/Source/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 917:FreeRTOS/Source/tasks.c ****     {
 918:FreeRTOS/Source/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 919:FreeRTOS/Source/tasks.c ****     }
 920:FreeRTOS/Source/tasks.c ****     else
 921:FreeRTOS/Source/tasks.c ****     {
 922:FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 923:FreeRTOS/Source/tasks.c ****     }
 924:FreeRTOS/Source/tasks.c **** 
 925:FreeRTOS/Source/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 926:FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 927:FreeRTOS/Source/tasks.c ****     {
 928:FreeRTOS/Source/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 929:FreeRTOS/Source/tasks.c ****     }
 930:FreeRTOS/Source/tasks.c ****     #endif /* configUSE_MUTEXES */
 931:FreeRTOS/Source/tasks.c **** 
 932:FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 933:FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 934:FreeRTOS/Source/tasks.c **** 
 935:FreeRTOS/Source/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 936:FreeRTOS/Source/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 937:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 938:FreeRTOS/Source/tasks.c **** 
 939:FreeRTOS/Source/tasks.c ****     /* Event lists are always in priority order. */
 940:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 941:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 942:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 18


 943:FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 944:FreeRTOS/Source/tasks.c ****     {
 945:FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 946:FreeRTOS/Source/tasks.c ****     }
 947:FreeRTOS/Source/tasks.c ****     #else
 948:FreeRTOS/Source/tasks.c ****     {
 949:FreeRTOS/Source/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 950:FreeRTOS/Source/tasks.c ****         ( void ) xRegions;
 951:FreeRTOS/Source/tasks.c ****     }
 952:FreeRTOS/Source/tasks.c ****     #endif
 953:FreeRTOS/Source/tasks.c **** 
 954:FreeRTOS/Source/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 955:FreeRTOS/Source/tasks.c ****     {
 956:FreeRTOS/Source/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 957:FreeRTOS/Source/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 958:FreeRTOS/Source/tasks.c ****     }
 959:FreeRTOS/Source/tasks.c ****     #endif
 960:FreeRTOS/Source/tasks.c **** 
 961:FreeRTOS/Source/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 962:FreeRTOS/Source/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 963:FreeRTOS/Source/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 964:FreeRTOS/Source/tasks.c ****      * the top of stack variable is updated. */
 965:FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 966:FreeRTOS/Source/tasks.c ****     {
 967:FreeRTOS/Source/tasks.c ****         /* If the port has capability to detect stack overflow,
 968:FreeRTOS/Source/tasks.c ****          * pass the stack end address to the stack initialization
 969:FreeRTOS/Source/tasks.c ****          * function as well. */
 970:FreeRTOS/Source/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 971:FreeRTOS/Source/tasks.c ****         {
 972:FreeRTOS/Source/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 973:FreeRTOS/Source/tasks.c ****             {
 974:FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 975:FreeRTOS/Source/tasks.c ****             }
 976:FreeRTOS/Source/tasks.c ****             #else /* portSTACK_GROWTH */
 977:FreeRTOS/Source/tasks.c ****             {
 978:FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 979:FreeRTOS/Source/tasks.c ****             }
 980:FreeRTOS/Source/tasks.c ****             #endif /* portSTACK_GROWTH */
 981:FreeRTOS/Source/tasks.c ****         }
 982:FreeRTOS/Source/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 983:FreeRTOS/Source/tasks.c ****         {
 984:FreeRTOS/Source/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 985:FreeRTOS/Source/tasks.c ****         }
 986:FreeRTOS/Source/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 987:FreeRTOS/Source/tasks.c ****     }
 988:FreeRTOS/Source/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 989:FreeRTOS/Source/tasks.c ****     {
 990:FreeRTOS/Source/tasks.c ****         /* If the port has capability to detect stack overflow,
 991:FreeRTOS/Source/tasks.c ****          * pass the stack end address to the stack initialization
 992:FreeRTOS/Source/tasks.c ****          * function as well. */
 993:FreeRTOS/Source/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 994:FreeRTOS/Source/tasks.c ****         {
 995:FreeRTOS/Source/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 996:FreeRTOS/Source/tasks.c ****             {
 997:FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 998:FreeRTOS/Source/tasks.c ****             }
 999:FreeRTOS/Source/tasks.c ****             #else /* portSTACK_GROWTH */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 19


1000:FreeRTOS/Source/tasks.c ****             {
1001:FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1002:FreeRTOS/Source/tasks.c ****             }
1003:FreeRTOS/Source/tasks.c ****             #endif /* portSTACK_GROWTH */
1004:FreeRTOS/Source/tasks.c ****         }
1005:FreeRTOS/Source/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1006:FreeRTOS/Source/tasks.c ****         {
1007:FreeRTOS/Source/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1008:FreeRTOS/Source/tasks.c ****         }
1009:FreeRTOS/Source/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1010:FreeRTOS/Source/tasks.c ****     }
1011:FreeRTOS/Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1012:FreeRTOS/Source/tasks.c **** 
1013:FreeRTOS/Source/tasks.c ****     if( pxCreatedTask != NULL )
1014:FreeRTOS/Source/tasks.c ****     {
1015:FreeRTOS/Source/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1016:FreeRTOS/Source/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1017:FreeRTOS/Source/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1018:FreeRTOS/Source/tasks.c ****     }
1019:FreeRTOS/Source/tasks.c ****     else
1020:FreeRTOS/Source/tasks.c ****     {
1021:FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1022:FreeRTOS/Source/tasks.c ****     }
1023:FreeRTOS/Source/tasks.c **** }
1024:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1025:FreeRTOS/Source/tasks.c **** 
1026:FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1027:FreeRTOS/Source/tasks.c **** {
1028:FreeRTOS/Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1029:FreeRTOS/Source/tasks.c ****      * updated. */
1030:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
1031:FreeRTOS/Source/tasks.c ****     {
1032:FreeRTOS/Source/tasks.c ****         uxCurrentNumberOfTasks++;
1033:FreeRTOS/Source/tasks.c **** 
1034:FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB == NULL )
1035:FreeRTOS/Source/tasks.c ****         {
1036:FreeRTOS/Source/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1037:FreeRTOS/Source/tasks.c ****              * the suspended state - make this the current task. */
1038:FreeRTOS/Source/tasks.c ****             pxCurrentTCB = pxNewTCB;
1039:FreeRTOS/Source/tasks.c **** 
1040:FreeRTOS/Source/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:FreeRTOS/Source/tasks.c ****             {
1042:FreeRTOS/Source/tasks.c ****                 /* This is the first task to be created so do the preliminary
1043:FreeRTOS/Source/tasks.c ****                  * initialisation required.  We will not recover if this call
1044:FreeRTOS/Source/tasks.c ****                  * fails, but we will report the failure. */
1045:FreeRTOS/Source/tasks.c ****                 prvInitialiseTaskLists();
1046:FreeRTOS/Source/tasks.c ****             }
1047:FreeRTOS/Source/tasks.c ****             else
1048:FreeRTOS/Source/tasks.c ****             {
1049:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1050:FreeRTOS/Source/tasks.c ****             }
1051:FreeRTOS/Source/tasks.c ****         }
1052:FreeRTOS/Source/tasks.c ****         else
1053:FreeRTOS/Source/tasks.c ****         {
1054:FreeRTOS/Source/tasks.c ****             /* If the scheduler is not already running, make this task the
1055:FreeRTOS/Source/tasks.c ****              * current task if it is the highest priority task to be created
1056:FreeRTOS/Source/tasks.c ****              * so far. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 20


1057:FreeRTOS/Source/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1058:FreeRTOS/Source/tasks.c ****             {
1059:FreeRTOS/Source/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:FreeRTOS/Source/tasks.c ****                 {
1061:FreeRTOS/Source/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1062:FreeRTOS/Source/tasks.c ****                 }
1063:FreeRTOS/Source/tasks.c ****                 else
1064:FreeRTOS/Source/tasks.c ****                 {
1065:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1066:FreeRTOS/Source/tasks.c ****                 }
1067:FreeRTOS/Source/tasks.c ****             }
1068:FreeRTOS/Source/tasks.c ****             else
1069:FreeRTOS/Source/tasks.c ****             {
1070:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1071:FreeRTOS/Source/tasks.c ****             }
1072:FreeRTOS/Source/tasks.c ****         }
1073:FreeRTOS/Source/tasks.c **** 
1074:FreeRTOS/Source/tasks.c ****         uxTaskNumber++;
1075:FreeRTOS/Source/tasks.c **** 
1076:FreeRTOS/Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1077:FreeRTOS/Source/tasks.c ****         {
1078:FreeRTOS/Source/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1079:FreeRTOS/Source/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:FreeRTOS/Source/tasks.c ****         }
1081:FreeRTOS/Source/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1082:FreeRTOS/Source/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1083:FreeRTOS/Source/tasks.c **** 
1084:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1085:FreeRTOS/Source/tasks.c **** 
1086:FreeRTOS/Source/tasks.c ****         portSETUP_TCB( pxNewTCB );
1087:FreeRTOS/Source/tasks.c ****     }
1088:FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
1089:FreeRTOS/Source/tasks.c **** 
1090:FreeRTOS/Source/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1091:FreeRTOS/Source/tasks.c ****     {
1092:FreeRTOS/Source/tasks.c ****         /* If the created task is of a higher priority than the current task
1093:FreeRTOS/Source/tasks.c ****          * then it should run now. */
1094:FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:FreeRTOS/Source/tasks.c ****         {
1096:FreeRTOS/Source/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1097:FreeRTOS/Source/tasks.c ****         }
1098:FreeRTOS/Source/tasks.c ****         else
1099:FreeRTOS/Source/tasks.c ****         {
1100:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1101:FreeRTOS/Source/tasks.c ****         }
1102:FreeRTOS/Source/tasks.c ****     }
1103:FreeRTOS/Source/tasks.c ****     else
1104:FreeRTOS/Source/tasks.c ****     {
1105:FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1106:FreeRTOS/Source/tasks.c ****     }
1107:FreeRTOS/Source/tasks.c **** }
1108:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1109:FreeRTOS/Source/tasks.c **** 
1110:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:FreeRTOS/Source/tasks.c **** 
1112:FreeRTOS/Source/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:FreeRTOS/Source/tasks.c ****     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 21


1114:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
1115:FreeRTOS/Source/tasks.c **** 
1116:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1117:FreeRTOS/Source/tasks.c ****         {
1118:FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the calling task that is
1119:FreeRTOS/Source/tasks.c ****              * being deleted. */
1120:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:FreeRTOS/Source/tasks.c **** 
1122:FreeRTOS/Source/tasks.c ****             /* Remove task from the ready/delayed list. */
1123:FreeRTOS/Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:FreeRTOS/Source/tasks.c ****             {
1125:FreeRTOS/Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:FreeRTOS/Source/tasks.c ****             }
1127:FreeRTOS/Source/tasks.c ****             else
1128:FreeRTOS/Source/tasks.c ****             {
1129:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1130:FreeRTOS/Source/tasks.c ****             }
1131:FreeRTOS/Source/tasks.c **** 
1132:FreeRTOS/Source/tasks.c ****             /* Is the task waiting on an event also? */
1133:FreeRTOS/Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:FreeRTOS/Source/tasks.c ****             {
1135:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:FreeRTOS/Source/tasks.c ****             }
1137:FreeRTOS/Source/tasks.c ****             else
1138:FreeRTOS/Source/tasks.c ****             {
1139:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1140:FreeRTOS/Source/tasks.c ****             }
1141:FreeRTOS/Source/tasks.c **** 
1142:FreeRTOS/Source/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1143:FreeRTOS/Source/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1144:FreeRTOS/Source/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:FreeRTOS/Source/tasks.c ****              * not return. */
1146:FreeRTOS/Source/tasks.c ****             uxTaskNumber++;
1147:FreeRTOS/Source/tasks.c **** 
1148:FreeRTOS/Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1149:FreeRTOS/Source/tasks.c ****             {
1150:FreeRTOS/Source/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1151:FreeRTOS/Source/tasks.c ****                  * task itself, as a context switch to another task is required.
1152:FreeRTOS/Source/tasks.c ****                  * Place the task in the termination list.  The idle task will
1153:FreeRTOS/Source/tasks.c ****                  * check the termination list and free up any memory allocated by
1154:FreeRTOS/Source/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1155:FreeRTOS/Source/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:FreeRTOS/Source/tasks.c **** 
1157:FreeRTOS/Source/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1158:FreeRTOS/Source/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1159:FreeRTOS/Source/tasks.c ****                  * check the xTasksWaitingTermination list. */
1160:FreeRTOS/Source/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1161:FreeRTOS/Source/tasks.c **** 
1162:FreeRTOS/Source/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1163:FreeRTOS/Source/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1164:FreeRTOS/Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1165:FreeRTOS/Source/tasks.c **** 
1166:FreeRTOS/Source/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1167:FreeRTOS/Source/tasks.c ****                  * in which Windows specific clean up operations are performed,
1168:FreeRTOS/Source/tasks.c ****                  * after which it is not possible to yield away from this task -
1169:FreeRTOS/Source/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1170:FreeRTOS/Source/tasks.c ****                  * required. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 22


1171:FreeRTOS/Source/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1172:FreeRTOS/Source/tasks.c ****             }
1173:FreeRTOS/Source/tasks.c ****             else
1174:FreeRTOS/Source/tasks.c ****             {
1175:FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
1176:FreeRTOS/Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1177:FreeRTOS/Source/tasks.c **** 
1178:FreeRTOS/Source/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1179:FreeRTOS/Source/tasks.c ****                  * the task that has just been deleted. */
1180:FreeRTOS/Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1181:FreeRTOS/Source/tasks.c ****             }
1182:FreeRTOS/Source/tasks.c ****         }
1183:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1184:FreeRTOS/Source/tasks.c **** 
1185:FreeRTOS/Source/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1186:FreeRTOS/Source/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1187:FreeRTOS/Source/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1188:FreeRTOS/Source/tasks.c ****         if( pxTCB != pxCurrentTCB )
1189:FreeRTOS/Source/tasks.c ****         {
1190:FreeRTOS/Source/tasks.c ****             prvDeleteTCB( pxTCB );
1191:FreeRTOS/Source/tasks.c ****         }
1192:FreeRTOS/Source/tasks.c **** 
1193:FreeRTOS/Source/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1194:FreeRTOS/Source/tasks.c ****          * been deleted. */
1195:FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1196:FreeRTOS/Source/tasks.c ****         {
1197:FreeRTOS/Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1198:FreeRTOS/Source/tasks.c ****             {
1199:FreeRTOS/Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1200:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
1201:FreeRTOS/Source/tasks.c ****             }
1202:FreeRTOS/Source/tasks.c ****             else
1203:FreeRTOS/Source/tasks.c ****             {
1204:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1205:FreeRTOS/Source/tasks.c ****             }
1206:FreeRTOS/Source/tasks.c ****         }
1207:FreeRTOS/Source/tasks.c ****     }
1208:FreeRTOS/Source/tasks.c **** 
1209:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1210:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1211:FreeRTOS/Source/tasks.c **** 
1212:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1213:FreeRTOS/Source/tasks.c **** 
1214:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1215:FreeRTOS/Source/tasks.c ****                                 const TickType_t xTimeIncrement )
1216:FreeRTOS/Source/tasks.c ****     {
1217:FreeRTOS/Source/tasks.c ****         TickType_t xTimeToWake;
1218:FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1219:FreeRTOS/Source/tasks.c **** 
1220:FreeRTOS/Source/tasks.c ****         configASSERT( pxPreviousWakeTime );
1221:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1222:FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1223:FreeRTOS/Source/tasks.c **** 
1224:FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
1225:FreeRTOS/Source/tasks.c ****         {
1226:FreeRTOS/Source/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1227:FreeRTOS/Source/tasks.c ****              * block. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 23


1228:FreeRTOS/Source/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1229:FreeRTOS/Source/tasks.c **** 
1230:FreeRTOS/Source/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1231:FreeRTOS/Source/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1232:FreeRTOS/Source/tasks.c **** 
1233:FreeRTOS/Source/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1234:FreeRTOS/Source/tasks.c ****             {
1235:FreeRTOS/Source/tasks.c ****                 /* The tick count has overflowed since this function was
1236:FreeRTOS/Source/tasks.c ****                  * lasted called.  In this case the only time we should ever
1237:FreeRTOS/Source/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1238:FreeRTOS/Source/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1239:FreeRTOS/Source/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1240:FreeRTOS/Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1241:FreeRTOS/Source/tasks.c ****                 {
1242:FreeRTOS/Source/tasks.c ****                     xShouldDelay = pdTRUE;
1243:FreeRTOS/Source/tasks.c ****                 }
1244:FreeRTOS/Source/tasks.c ****                 else
1245:FreeRTOS/Source/tasks.c ****                 {
1246:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1247:FreeRTOS/Source/tasks.c ****                 }
1248:FreeRTOS/Source/tasks.c ****             }
1249:FreeRTOS/Source/tasks.c ****             else
1250:FreeRTOS/Source/tasks.c ****             {
1251:FreeRTOS/Source/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1252:FreeRTOS/Source/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1253:FreeRTOS/Source/tasks.c ****                  * tick time is less than the wake time. */
1254:FreeRTOS/Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1255:FreeRTOS/Source/tasks.c ****                 {
1256:FreeRTOS/Source/tasks.c ****                     xShouldDelay = pdTRUE;
1257:FreeRTOS/Source/tasks.c ****                 }
1258:FreeRTOS/Source/tasks.c ****                 else
1259:FreeRTOS/Source/tasks.c ****                 {
1260:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1261:FreeRTOS/Source/tasks.c ****                 }
1262:FreeRTOS/Source/tasks.c ****             }
1263:FreeRTOS/Source/tasks.c **** 
1264:FreeRTOS/Source/tasks.c ****             /* Update the wake time ready for the next call. */
1265:FreeRTOS/Source/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1266:FreeRTOS/Source/tasks.c **** 
1267:FreeRTOS/Source/tasks.c ****             if( xShouldDelay != pdFALSE )
1268:FreeRTOS/Source/tasks.c ****             {
1269:FreeRTOS/Source/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1270:FreeRTOS/Source/tasks.c **** 
1271:FreeRTOS/Source/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1272:FreeRTOS/Source/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1273:FreeRTOS/Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1274:FreeRTOS/Source/tasks.c ****             }
1275:FreeRTOS/Source/tasks.c ****             else
1276:FreeRTOS/Source/tasks.c ****             {
1277:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1278:FreeRTOS/Source/tasks.c ****             }
1279:FreeRTOS/Source/tasks.c ****         }
1280:FreeRTOS/Source/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1281:FreeRTOS/Source/tasks.c **** 
1282:FreeRTOS/Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1283:FreeRTOS/Source/tasks.c ****          * have put ourselves to sleep. */
1284:FreeRTOS/Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 24


1285:FreeRTOS/Source/tasks.c ****         {
1286:FreeRTOS/Source/tasks.c ****             portYIELD_WITHIN_API();
1287:FreeRTOS/Source/tasks.c ****         }
1288:FreeRTOS/Source/tasks.c ****         else
1289:FreeRTOS/Source/tasks.c ****         {
1290:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1291:FreeRTOS/Source/tasks.c ****         }
1292:FreeRTOS/Source/tasks.c **** 
1293:FreeRTOS/Source/tasks.c ****         return xShouldDelay;
1294:FreeRTOS/Source/tasks.c ****     }
1295:FreeRTOS/Source/tasks.c **** 
1296:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1297:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1298:FreeRTOS/Source/tasks.c **** 
1299:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1300:FreeRTOS/Source/tasks.c **** 
1301:FreeRTOS/Source/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1302:FreeRTOS/Source/tasks.c ****     {
1303:FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1304:FreeRTOS/Source/tasks.c **** 
1305:FreeRTOS/Source/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1306:FreeRTOS/Source/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1307:FreeRTOS/Source/tasks.c ****         {
1308:FreeRTOS/Source/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1309:FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
1310:FreeRTOS/Source/tasks.c ****             {
1311:FreeRTOS/Source/tasks.c ****                 traceTASK_DELAY();
1312:FreeRTOS/Source/tasks.c **** 
1313:FreeRTOS/Source/tasks.c ****                 /* A task that is removed from the event list while the
1314:FreeRTOS/Source/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1315:FreeRTOS/Source/tasks.c ****                  * list or removed from the blocked list until the scheduler
1316:FreeRTOS/Source/tasks.c ****                  * is resumed.
1317:FreeRTOS/Source/tasks.c ****                  *
1318:FreeRTOS/Source/tasks.c ****                  * This task cannot be in an event list as it is the currently
1319:FreeRTOS/Source/tasks.c ****                  * executing task. */
1320:FreeRTOS/Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1321:FreeRTOS/Source/tasks.c ****             }
1322:FreeRTOS/Source/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1323:FreeRTOS/Source/tasks.c ****         }
1324:FreeRTOS/Source/tasks.c ****         else
1325:FreeRTOS/Source/tasks.c ****         {
1326:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1327:FreeRTOS/Source/tasks.c ****         }
1328:FreeRTOS/Source/tasks.c **** 
1329:FreeRTOS/Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1330:FreeRTOS/Source/tasks.c ****          * have put ourselves to sleep. */
1331:FreeRTOS/Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1332:FreeRTOS/Source/tasks.c ****         {
1333:FreeRTOS/Source/tasks.c ****             portYIELD_WITHIN_API();
1334:FreeRTOS/Source/tasks.c ****         }
1335:FreeRTOS/Source/tasks.c ****         else
1336:FreeRTOS/Source/tasks.c ****         {
1337:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:FreeRTOS/Source/tasks.c ****         }
1339:FreeRTOS/Source/tasks.c ****     }
1340:FreeRTOS/Source/tasks.c **** 
1341:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 25


1342:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1343:FreeRTOS/Source/tasks.c **** 
1344:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1345:FreeRTOS/Source/tasks.c **** 
1346:FreeRTOS/Source/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1347:FreeRTOS/Source/tasks.c ****     {
1348:FreeRTOS/Source/tasks.c ****         eTaskState eReturn;
1349:FreeRTOS/Source/tasks.c ****         List_t const * pxStateList;
1350:FreeRTOS/Source/tasks.c ****         List_t const * pxDelayedList;
1351:FreeRTOS/Source/tasks.c ****         List_t const * pxOverflowedDelayedList;
1352:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1353:FreeRTOS/Source/tasks.c **** 
1354:FreeRTOS/Source/tasks.c ****         configASSERT( pxTCB );
1355:FreeRTOS/Source/tasks.c **** 
1356:FreeRTOS/Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1357:FreeRTOS/Source/tasks.c ****         {
1358:FreeRTOS/Source/tasks.c ****             /* The task calling this function is querying its own state. */
1359:FreeRTOS/Source/tasks.c ****             eReturn = eRunning;
1360:FreeRTOS/Source/tasks.c ****         }
1361:FreeRTOS/Source/tasks.c ****         else
1362:FreeRTOS/Source/tasks.c ****         {
1363:FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
1364:FreeRTOS/Source/tasks.c ****             {
1365:FreeRTOS/Source/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1366:FreeRTOS/Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1367:FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1368:FreeRTOS/Source/tasks.c ****             }
1369:FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
1370:FreeRTOS/Source/tasks.c **** 
1371:FreeRTOS/Source/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1372:FreeRTOS/Source/tasks.c ****             {
1373:FreeRTOS/Source/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1374:FreeRTOS/Source/tasks.c ****                  * lists. */
1375:FreeRTOS/Source/tasks.c ****                 eReturn = eBlocked;
1376:FreeRTOS/Source/tasks.c ****             }
1377:FreeRTOS/Source/tasks.c **** 
1378:FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1379:FreeRTOS/Source/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1380:FreeRTOS/Source/tasks.c ****                 {
1381:FreeRTOS/Source/tasks.c ****                     /* The task being queried is referenced from the suspended
1382:FreeRTOS/Source/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1383:FreeRTOS/Source/tasks.c ****                      * indefinitely? */
1384:FreeRTOS/Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1385:FreeRTOS/Source/tasks.c ****                     {
1386:FreeRTOS/Source/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1387:FreeRTOS/Source/tasks.c ****                         {
1388:FreeRTOS/Source/tasks.c ****                             BaseType_t x;
1389:FreeRTOS/Source/tasks.c **** 
1390:FreeRTOS/Source/tasks.c ****                             /* The task does not appear on the event list item of
1391:FreeRTOS/Source/tasks.c ****                              * and of the RTOS objects, but could still be in the
1392:FreeRTOS/Source/tasks.c ****                              * blocked state if it is waiting on its notification
1393:FreeRTOS/Source/tasks.c ****                              * rather than waiting on an object.  If not, is
1394:FreeRTOS/Source/tasks.c ****                              * suspended. */
1395:FreeRTOS/Source/tasks.c ****                             eReturn = eSuspended;
1396:FreeRTOS/Source/tasks.c **** 
1397:FreeRTOS/Source/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1398:FreeRTOS/Source/tasks.c ****                             {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 26


1399:FreeRTOS/Source/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1400:FreeRTOS/Source/tasks.c ****                                 {
1401:FreeRTOS/Source/tasks.c ****                                     eReturn = eBlocked;
1402:FreeRTOS/Source/tasks.c ****                                     break;
1403:FreeRTOS/Source/tasks.c ****                                 }
1404:FreeRTOS/Source/tasks.c ****                             }
1405:FreeRTOS/Source/tasks.c ****                         }
1406:FreeRTOS/Source/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1407:FreeRTOS/Source/tasks.c ****                         {
1408:FreeRTOS/Source/tasks.c ****                             eReturn = eSuspended;
1409:FreeRTOS/Source/tasks.c ****                         }
1410:FreeRTOS/Source/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1411:FreeRTOS/Source/tasks.c ****                     }
1412:FreeRTOS/Source/tasks.c ****                     else
1413:FreeRTOS/Source/tasks.c ****                     {
1414:FreeRTOS/Source/tasks.c ****                         eReturn = eBlocked;
1415:FreeRTOS/Source/tasks.c ****                     }
1416:FreeRTOS/Source/tasks.c ****                 }
1417:FreeRTOS/Source/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1418:FreeRTOS/Source/tasks.c **** 
1419:FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1420:FreeRTOS/Source/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1421:FreeRTOS/Source/tasks.c ****                 {
1422:FreeRTOS/Source/tasks.c ****                     /* The task being queried is referenced from the deleted
1423:FreeRTOS/Source/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1424:FreeRTOS/Source/tasks.c ****                      * all. */
1425:FreeRTOS/Source/tasks.c ****                     eReturn = eDeleted;
1426:FreeRTOS/Source/tasks.c ****                 }
1427:FreeRTOS/Source/tasks.c ****             #endif
1428:FreeRTOS/Source/tasks.c **** 
1429:FreeRTOS/Source/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1430:FreeRTOS/Source/tasks.c ****             {
1431:FreeRTOS/Source/tasks.c ****                 /* If the task is not in any other state, it must be in the
1432:FreeRTOS/Source/tasks.c ****                  * Ready (including pending ready) state. */
1433:FreeRTOS/Source/tasks.c ****                 eReturn = eReady;
1434:FreeRTOS/Source/tasks.c ****             }
1435:FreeRTOS/Source/tasks.c ****         }
1436:FreeRTOS/Source/tasks.c **** 
1437:FreeRTOS/Source/tasks.c ****         return eReturn;
1438:FreeRTOS/Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1439:FreeRTOS/Source/tasks.c **** 
1440:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1441:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1442:FreeRTOS/Source/tasks.c **** 
1443:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1444:FreeRTOS/Source/tasks.c **** 
1445:FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1446:FreeRTOS/Source/tasks.c ****     {
1447:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
1448:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
1449:FreeRTOS/Source/tasks.c **** 
1450:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1451:FreeRTOS/Source/tasks.c ****         {
1452:FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the priority of the task
1453:FreeRTOS/Source/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1454:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1455:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 27


1456:FreeRTOS/Source/tasks.c ****         }
1457:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1458:FreeRTOS/Source/tasks.c **** 
1459:FreeRTOS/Source/tasks.c ****         return uxReturn;
1460:FreeRTOS/Source/tasks.c ****     }
1461:FreeRTOS/Source/tasks.c **** 
1462:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1463:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1464:FreeRTOS/Source/tasks.c **** 
1465:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1466:FreeRTOS/Source/tasks.c **** 
1467:FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1468:FreeRTOS/Source/tasks.c ****     {
1469:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
1470:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1471:FreeRTOS/Source/tasks.c **** 
1472:FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1473:FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1474:FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1475:FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1476:FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1477:FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1478:FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1479:FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1480:FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1481:FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1482:FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1483:FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1484:FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1485:FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1486:FreeRTOS/Source/tasks.c ****          * provided on the following link:
1487:FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1488:FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1489:FreeRTOS/Source/tasks.c **** 
1490:FreeRTOS/Source/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1491:FreeRTOS/Source/tasks.c ****         {
1492:FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1493:FreeRTOS/Source/tasks.c ****              * task that is being queried. */
1494:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1495:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1496:FreeRTOS/Source/tasks.c ****         }
1497:FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1498:FreeRTOS/Source/tasks.c **** 
1499:FreeRTOS/Source/tasks.c ****         return uxReturn;
1500:FreeRTOS/Source/tasks.c ****     }
1501:FreeRTOS/Source/tasks.c **** 
1502:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1504:FreeRTOS/Source/tasks.c **** 
1505:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1506:FreeRTOS/Source/tasks.c **** 
1507:FreeRTOS/Source/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1508:FreeRTOS/Source/tasks.c ****                            UBaseType_t uxNewPriority )
1509:FreeRTOS/Source/tasks.c ****     {
1510:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
1511:FreeRTOS/Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1512:FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 28


1513:FreeRTOS/Source/tasks.c **** 
1514:FreeRTOS/Source/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
1515:FreeRTOS/Source/tasks.c **** 
1516:FreeRTOS/Source/tasks.c ****         /* Ensure the new priority is valid. */
1517:FreeRTOS/Source/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1518:FreeRTOS/Source/tasks.c ****         {
1519:FreeRTOS/Source/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1520:FreeRTOS/Source/tasks.c ****         }
1521:FreeRTOS/Source/tasks.c ****         else
1522:FreeRTOS/Source/tasks.c ****         {
1523:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1524:FreeRTOS/Source/tasks.c ****         }
1525:FreeRTOS/Source/tasks.c **** 
1526:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1527:FreeRTOS/Source/tasks.c ****         {
1528:FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1529:FreeRTOS/Source/tasks.c ****              * task that is being changed. */
1530:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1531:FreeRTOS/Source/tasks.c **** 
1532:FreeRTOS/Source/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1533:FreeRTOS/Source/tasks.c **** 
1534:FreeRTOS/Source/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1535:FreeRTOS/Source/tasks.c ****             {
1536:FreeRTOS/Source/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
1537:FreeRTOS/Source/tasks.c ****             }
1538:FreeRTOS/Source/tasks.c ****             #else
1539:FreeRTOS/Source/tasks.c ****             {
1540:FreeRTOS/Source/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1541:FreeRTOS/Source/tasks.c ****             }
1542:FreeRTOS/Source/tasks.c ****             #endif
1543:FreeRTOS/Source/tasks.c **** 
1544:FreeRTOS/Source/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1545:FreeRTOS/Source/tasks.c ****             {
1546:FreeRTOS/Source/tasks.c ****                 /* The priority change may have readied a task of higher
1547:FreeRTOS/Source/tasks.c ****                  * priority than the calling task. */
1548:FreeRTOS/Source/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1549:FreeRTOS/Source/tasks.c ****                 {
1550:FreeRTOS/Source/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1551:FreeRTOS/Source/tasks.c ****                     {
1552:FreeRTOS/Source/tasks.c ****                         /* The priority of a task other than the currently
1553:FreeRTOS/Source/tasks.c ****                          * running task is being raised.  Is the priority being
1554:FreeRTOS/Source/tasks.c ****                          * raised above that of the running task? */
1555:FreeRTOS/Source/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1556:FreeRTOS/Source/tasks.c ****                         {
1557:FreeRTOS/Source/tasks.c ****                             xYieldRequired = pdTRUE;
1558:FreeRTOS/Source/tasks.c ****                         }
1559:FreeRTOS/Source/tasks.c ****                         else
1560:FreeRTOS/Source/tasks.c ****                         {
1561:FreeRTOS/Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1562:FreeRTOS/Source/tasks.c ****                         }
1563:FreeRTOS/Source/tasks.c ****                     }
1564:FreeRTOS/Source/tasks.c ****                     else
1565:FreeRTOS/Source/tasks.c ****                     {
1566:FreeRTOS/Source/tasks.c ****                         /* The priority of the running task is being raised,
1567:FreeRTOS/Source/tasks.c ****                          * but the running task must already be the highest
1568:FreeRTOS/Source/tasks.c ****                          * priority task able to run so no yield is required. */
1569:FreeRTOS/Source/tasks.c ****                     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 29


1570:FreeRTOS/Source/tasks.c ****                 }
1571:FreeRTOS/Source/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1572:FreeRTOS/Source/tasks.c ****                 {
1573:FreeRTOS/Source/tasks.c ****                     /* Setting the priority of the running task down means
1574:FreeRTOS/Source/tasks.c ****                      * there may now be another task of higher priority that
1575:FreeRTOS/Source/tasks.c ****                      * is ready to execute. */
1576:FreeRTOS/Source/tasks.c ****                     xYieldRequired = pdTRUE;
1577:FreeRTOS/Source/tasks.c ****                 }
1578:FreeRTOS/Source/tasks.c ****                 else
1579:FreeRTOS/Source/tasks.c ****                 {
1580:FreeRTOS/Source/tasks.c ****                     /* Setting the priority of any other task down does not
1581:FreeRTOS/Source/tasks.c ****                      * require a yield as the running task must be above the
1582:FreeRTOS/Source/tasks.c ****                      * new priority of the task being modified. */
1583:FreeRTOS/Source/tasks.c ****                 }
1584:FreeRTOS/Source/tasks.c **** 
1585:FreeRTOS/Source/tasks.c ****                 /* Remember the ready list the task might be referenced from
1586:FreeRTOS/Source/tasks.c ****                  * before its uxPriority member is changed so the
1587:FreeRTOS/Source/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1588:FreeRTOS/Source/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1589:FreeRTOS/Source/tasks.c **** 
1590:FreeRTOS/Source/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1591:FreeRTOS/Source/tasks.c ****                 {
1592:FreeRTOS/Source/tasks.c ****                     /* Only change the priority being used if the task is not
1593:FreeRTOS/Source/tasks.c ****                      * currently using an inherited priority. */
1594:FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1595:FreeRTOS/Source/tasks.c ****                     {
1596:FreeRTOS/Source/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1597:FreeRTOS/Source/tasks.c ****                     }
1598:FreeRTOS/Source/tasks.c ****                     else
1599:FreeRTOS/Source/tasks.c ****                     {
1600:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1601:FreeRTOS/Source/tasks.c ****                     }
1602:FreeRTOS/Source/tasks.c **** 
1603:FreeRTOS/Source/tasks.c ****                     /* The base priority gets set whatever. */
1604:FreeRTOS/Source/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
1605:FreeRTOS/Source/tasks.c ****                 }
1606:FreeRTOS/Source/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1607:FreeRTOS/Source/tasks.c ****                 {
1608:FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1609:FreeRTOS/Source/tasks.c ****                 }
1610:FreeRTOS/Source/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:FreeRTOS/Source/tasks.c **** 
1612:FreeRTOS/Source/tasks.c ****                 /* Only reset the event list item value if the value is not
1613:FreeRTOS/Source/tasks.c ****                  * being used for anything else. */
1614:FreeRTOS/Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1615:FreeRTOS/Source/tasks.c ****                 {
1616:FreeRTOS/Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1617:FreeRTOS/Source/tasks.c ****                 }
1618:FreeRTOS/Source/tasks.c ****                 else
1619:FreeRTOS/Source/tasks.c ****                 {
1620:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1621:FreeRTOS/Source/tasks.c ****                 }
1622:FreeRTOS/Source/tasks.c **** 
1623:FreeRTOS/Source/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1624:FreeRTOS/Source/tasks.c ****                  * nothing more than change its priority variable. However, if
1625:FreeRTOS/Source/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1626:FreeRTOS/Source/tasks.c ****                  * in the list appropriate to its new priority. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 30


1627:FreeRTOS/Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1628:FreeRTOS/Source/tasks.c ****                 {
1629:FreeRTOS/Source/tasks.c ****                     /* The task is currently in its ready list - remove before
1630:FreeRTOS/Source/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1631:FreeRTOS/Source/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1632:FreeRTOS/Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1633:FreeRTOS/Source/tasks.c ****                     {
1634:FreeRTOS/Source/tasks.c ****                         /* It is known that the task is in its ready list so
1635:FreeRTOS/Source/tasks.c ****                          * there is no need to check again and the port level
1636:FreeRTOS/Source/tasks.c ****                          * reset macro can be called directly. */
1637:FreeRTOS/Source/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1638:FreeRTOS/Source/tasks.c ****                     }
1639:FreeRTOS/Source/tasks.c ****                     else
1640:FreeRTOS/Source/tasks.c ****                     {
1641:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1642:FreeRTOS/Source/tasks.c ****                     }
1643:FreeRTOS/Source/tasks.c **** 
1644:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1645:FreeRTOS/Source/tasks.c ****                 }
1646:FreeRTOS/Source/tasks.c ****                 else
1647:FreeRTOS/Source/tasks.c ****                 {
1648:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1649:FreeRTOS/Source/tasks.c ****                 }
1650:FreeRTOS/Source/tasks.c **** 
1651:FreeRTOS/Source/tasks.c ****                 if( xYieldRequired != pdFALSE )
1652:FreeRTOS/Source/tasks.c ****                 {
1653:FreeRTOS/Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1654:FreeRTOS/Source/tasks.c ****                 }
1655:FreeRTOS/Source/tasks.c ****                 else
1656:FreeRTOS/Source/tasks.c ****                 {
1657:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1658:FreeRTOS/Source/tasks.c ****                 }
1659:FreeRTOS/Source/tasks.c **** 
1660:FreeRTOS/Source/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1661:FreeRTOS/Source/tasks.c ****                  * optimised task selection is not being used. */
1662:FreeRTOS/Source/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1663:FreeRTOS/Source/tasks.c ****             }
1664:FreeRTOS/Source/tasks.c ****         }
1665:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1666:FreeRTOS/Source/tasks.c ****     }
1667:FreeRTOS/Source/tasks.c **** 
1668:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1669:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1670:FreeRTOS/Source/tasks.c **** 
1671:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1672:FreeRTOS/Source/tasks.c **** 
1673:FreeRTOS/Source/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1674:FreeRTOS/Source/tasks.c ****     {
1675:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
1676:FreeRTOS/Source/tasks.c **** 
1677:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1678:FreeRTOS/Source/tasks.c ****         {
1679:FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the running task that is
1680:FreeRTOS/Source/tasks.c ****              * being suspended. */
1681:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1682:FreeRTOS/Source/tasks.c **** 
1683:FreeRTOS/Source/tasks.c ****             traceTASK_SUSPEND( pxTCB );
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 31


1684:FreeRTOS/Source/tasks.c **** 
1685:FreeRTOS/Source/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1686:FreeRTOS/Source/tasks.c ****              * suspended list. */
1687:FreeRTOS/Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1688:FreeRTOS/Source/tasks.c ****             {
1689:FreeRTOS/Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1690:FreeRTOS/Source/tasks.c ****             }
1691:FreeRTOS/Source/tasks.c ****             else
1692:FreeRTOS/Source/tasks.c ****             {
1693:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1694:FreeRTOS/Source/tasks.c ****             }
1695:FreeRTOS/Source/tasks.c **** 
1696:FreeRTOS/Source/tasks.c ****             /* Is the task waiting on an event also? */
1697:FreeRTOS/Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1698:FreeRTOS/Source/tasks.c ****             {
1699:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1700:FreeRTOS/Source/tasks.c ****             }
1701:FreeRTOS/Source/tasks.c ****             else
1702:FreeRTOS/Source/tasks.c ****             {
1703:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1704:FreeRTOS/Source/tasks.c ****             }
1705:FreeRTOS/Source/tasks.c **** 
1706:FreeRTOS/Source/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1707:FreeRTOS/Source/tasks.c **** 
1708:FreeRTOS/Source/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1709:FreeRTOS/Source/tasks.c ****             {
1710:FreeRTOS/Source/tasks.c ****                 BaseType_t x;
1711:FreeRTOS/Source/tasks.c **** 
1712:FreeRTOS/Source/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1713:FreeRTOS/Source/tasks.c ****                 {
1714:FreeRTOS/Source/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1715:FreeRTOS/Source/tasks.c ****                     {
1716:FreeRTOS/Source/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1717:FreeRTOS/Source/tasks.c ****                          * now suspended, so no notification was received. */
1718:FreeRTOS/Source/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1719:FreeRTOS/Source/tasks.c ****                     }
1720:FreeRTOS/Source/tasks.c ****                 }
1721:FreeRTOS/Source/tasks.c ****             }
1722:FreeRTOS/Source/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1723:FreeRTOS/Source/tasks.c ****         }
1724:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1725:FreeRTOS/Source/tasks.c **** 
1726:FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1727:FreeRTOS/Source/tasks.c ****         {
1728:FreeRTOS/Source/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1729:FreeRTOS/Source/tasks.c ****              * task that is now in the Suspended state. */
1730:FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
1731:FreeRTOS/Source/tasks.c ****             {
1732:FreeRTOS/Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1733:FreeRTOS/Source/tasks.c ****             }
1734:FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
1735:FreeRTOS/Source/tasks.c ****         }
1736:FreeRTOS/Source/tasks.c ****         else
1737:FreeRTOS/Source/tasks.c ****         {
1738:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1739:FreeRTOS/Source/tasks.c ****         }
1740:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 32


1741:FreeRTOS/Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1742:FreeRTOS/Source/tasks.c ****         {
1743:FreeRTOS/Source/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1744:FreeRTOS/Source/tasks.c ****             {
1745:FreeRTOS/Source/tasks.c ****                 /* The current task has just been suspended. */
1746:FreeRTOS/Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1747:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
1748:FreeRTOS/Source/tasks.c ****             }
1749:FreeRTOS/Source/tasks.c ****             else
1750:FreeRTOS/Source/tasks.c ****             {
1751:FreeRTOS/Source/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1752:FreeRTOS/Source/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1753:FreeRTOS/Source/tasks.c ****                  * must be adjusted to point to a different task. */
1754:FreeRTOS/Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1755:FreeRTOS/Source/tasks.c ****                 {
1756:FreeRTOS/Source/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1757:FreeRTOS/Source/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1758:FreeRTOS/Source/tasks.c ****                      * be set to point to it no matter what its relative priority
1759:FreeRTOS/Source/tasks.c ****                      * is. */
1760:FreeRTOS/Source/tasks.c ****                     pxCurrentTCB = NULL;
1761:FreeRTOS/Source/tasks.c ****                 }
1762:FreeRTOS/Source/tasks.c ****                 else
1763:FreeRTOS/Source/tasks.c ****                 {
1764:FreeRTOS/Source/tasks.c ****                     vTaskSwitchContext();
1765:FreeRTOS/Source/tasks.c ****                 }
1766:FreeRTOS/Source/tasks.c ****             }
1767:FreeRTOS/Source/tasks.c ****         }
1768:FreeRTOS/Source/tasks.c ****         else
1769:FreeRTOS/Source/tasks.c ****         {
1770:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1771:FreeRTOS/Source/tasks.c ****         }
1772:FreeRTOS/Source/tasks.c ****     }
1773:FreeRTOS/Source/tasks.c **** 
1774:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1775:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1776:FreeRTOS/Source/tasks.c **** 
1777:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS/Source/tasks.c **** 
1779:FreeRTOS/Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1780:FreeRTOS/Source/tasks.c ****     {
  29              		.loc 1 1780 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1781:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1781 9 view .LVU1
1782:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  35              		.loc 1 1782 9 view .LVU2
1783:FreeRTOS/Source/tasks.c **** 
1784:FreeRTOS/Source/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1785:FreeRTOS/Source/tasks.c ****          * section. */
1786:FreeRTOS/Source/tasks.c **** 
1787:FreeRTOS/Source/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1788:FreeRTOS/Source/tasks.c ****         configASSERT( xTask );
  36              		.loc 1 1788 9 view .LVU3
  37 0000 28B1     		cbz	r0, .L8
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 33


  38              		.loc 1 1788 30 discriminator 2 view .LVU4
1789:FreeRTOS/Source/tasks.c **** 
1790:FreeRTOS/Source/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1791:FreeRTOS/Source/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  39              		.loc 1 1791 9 discriminator 2 view .LVU5
  40              		.loc 1 1791 13 is_stmt 0 discriminator 2 view .LVU6
  41 0002 4169     		ldr	r1, [r0, #20]
  42              		.loc 1 1791 11 discriminator 2 view .LVU7
  43 0004 0C4A     		ldr	r2, .L10
  44 0006 9142     		cmp	r1, r2
  45 0008 0AD0     		beq	.L9
1781:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1781 20 view .LVU8
  47 000a 0020     		movs	r0, #0
  48              	.LVL1:
1781:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  49              		.loc 1 1781 20 view .LVU9
  50 000c 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
1788:FreeRTOS/Source/tasks.c **** 
  53              		.loc 1 1788 9 is_stmt 1 view .LVU10
  54              	.LBB155:
  55              	.LBI155:
  56              		.file 2 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 34


  33:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 35


  90:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 146:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 36


 147:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  57              		.loc 2 194 34 view .LVU11
  58              	.LBB156:
 195:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
  59              		.loc 2 196 9 view .LVU12
 197:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
  60              		.loc 2 198 9 view .LVU13
  61              		.syntax unified
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 37


  62              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  63 000e 4FF05003 			mov r3, #80												
  64 0012 83F31188 		msr basepri, r3											
  65 0016 BFF36F8F 		isb														
  66 001a BFF34F8F 		dsb														
  67              	
  68              	@ 0 "" 2
  69              	.LVL3:
  70              		.thumb
  71              		.syntax unified
  72              	.L3:
  73              		.loc 2 198 9 is_stmt 0 view .LVU14
  74              	.LBE156:
  75              	.LBE155:
1788:FreeRTOS/Source/tasks.c **** 
  76              		.loc 1 1788 9 is_stmt 1 discriminator 1 view .LVU15
1788:FreeRTOS/Source/tasks.c **** 
  77              		.loc 1 1788 9 discriminator 1 view .LVU16
  78 001e FEE7     		b	.L3
  79              	.L9:
1792:FreeRTOS/Source/tasks.c ****         {
1793:FreeRTOS/Source/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1794:FreeRTOS/Source/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  80              		.loc 1 1794 13 view .LVU17
  81              		.loc 1 1794 17 is_stmt 0 view .LVU18
  82 0020 836A     		ldr	r3, [r0, #40]
  83              		.loc 1 1794 15 view .LVU19
  84 0022 064A     		ldr	r2, .L10+4
  85 0024 9342     		cmp	r3, r2
  86 0026 02D0     		beq	.L6
1795:FreeRTOS/Source/tasks.c ****             {
1796:FreeRTOS/Source/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1797:FreeRTOS/Source/tasks.c ****                  * state, or because is is blocked with no timeout? */
1798:FreeRTOS/Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  87              		.loc 1 1798 17 is_stmt 1 view .LVU20
  88              		.loc 1 1798 19 is_stmt 0 view .LVU21
  89 0028 1BB1     		cbz	r3, .L7
1781:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  90              		.loc 1 1781 20 view .LVU22
  91 002a 0020     		movs	r0, #0
  92              	.LVL4:
1781:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  93              		.loc 1 1781 20 view .LVU23
  94 002c 7047     		bx	lr
  95              	.LVL5:
  96              	.L6:
1781:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
  97              		.loc 1 1781 20 view .LVU24
  98 002e 0020     		movs	r0, #0
  99              	.LVL6:
1781:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 100              		.loc 1 1781 20 view .LVU25
 101 0030 7047     		bx	lr
 102              	.LVL7:
 103              	.L7:
1799:FreeRTOS/Source/tasks.c ****                 {
1800:FreeRTOS/Source/tasks.c ****                     xReturn = pdTRUE;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 38


 104              		.loc 1 1800 29 view .LVU26
 105 0032 0120     		movs	r0, #1
 106              	.LVL8:
1801:FreeRTOS/Source/tasks.c ****                 }
1802:FreeRTOS/Source/tasks.c ****                 else
1803:FreeRTOS/Source/tasks.c ****                 {
1804:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1805:FreeRTOS/Source/tasks.c ****                 }
1806:FreeRTOS/Source/tasks.c ****             }
1807:FreeRTOS/Source/tasks.c ****             else
1808:FreeRTOS/Source/tasks.c ****             {
1809:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1810:FreeRTOS/Source/tasks.c ****             }
1811:FreeRTOS/Source/tasks.c ****         }
1812:FreeRTOS/Source/tasks.c ****         else
1813:FreeRTOS/Source/tasks.c ****         {
1814:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 107              		.loc 1 1814 37 is_stmt 1 view .LVU27
1815:FreeRTOS/Source/tasks.c ****         }
1816:FreeRTOS/Source/tasks.c **** 
1817:FreeRTOS/Source/tasks.c ****         return xReturn;
 108              		.loc 1 1817 9 view .LVU28
1818:FreeRTOS/Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 109              		.loc 1 1818 5 is_stmt 0 view .LVU29
 110 0034 7047     		bx	lr
 111              	.L11:
 112 0036 00BF     		.align	2
 113              	.L10:
 114 0038 00000000 		.word	xSuspendedTaskList
 115 003c 00000000 		.word	xPendingReadyList
 116              		.cfi_endproc
 117              	.LFE16:
 119              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 125              	prvTaskCheckFreeStackSpace:
 126              	.LVL9:
 127              	.LFB47:
1819:FreeRTOS/Source/tasks.c **** 
1820:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1821:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:FreeRTOS/Source/tasks.c **** 
1823:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1824:FreeRTOS/Source/tasks.c **** 
1825:FreeRTOS/Source/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1826:FreeRTOS/Source/tasks.c ****     {
1827:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1828:FreeRTOS/Source/tasks.c **** 
1829:FreeRTOS/Source/tasks.c ****         /* It does not make sense to resume the calling task. */
1830:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToResume );
1831:FreeRTOS/Source/tasks.c **** 
1832:FreeRTOS/Source/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1833:FreeRTOS/Source/tasks.c ****          * currently executing task. */
1834:FreeRTOS/Source/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1835:FreeRTOS/Source/tasks.c ****         {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 39


1836:FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
1837:FreeRTOS/Source/tasks.c ****             {
1838:FreeRTOS/Source/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1839:FreeRTOS/Source/tasks.c ****                 {
1840:FreeRTOS/Source/tasks.c ****                     traceTASK_RESUME( pxTCB );
1841:FreeRTOS/Source/tasks.c **** 
1842:FreeRTOS/Source/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1843:FreeRTOS/Source/tasks.c ****                      * suspended because this is inside a critical section. */
1844:FreeRTOS/Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1845:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1846:FreeRTOS/Source/tasks.c **** 
1847:FreeRTOS/Source/tasks.c ****                     /* A higher priority task may have just been resumed. */
1848:FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1849:FreeRTOS/Source/tasks.c ****                     {
1850:FreeRTOS/Source/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1851:FreeRTOS/Source/tasks.c ****                          * but will leave the lists in the correct state for the
1852:FreeRTOS/Source/tasks.c ****                          * next yield. */
1853:FreeRTOS/Source/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1854:FreeRTOS/Source/tasks.c ****                     }
1855:FreeRTOS/Source/tasks.c ****                     else
1856:FreeRTOS/Source/tasks.c ****                     {
1857:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1858:FreeRTOS/Source/tasks.c ****                     }
1859:FreeRTOS/Source/tasks.c ****                 }
1860:FreeRTOS/Source/tasks.c ****                 else
1861:FreeRTOS/Source/tasks.c ****                 {
1862:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1863:FreeRTOS/Source/tasks.c ****                 }
1864:FreeRTOS/Source/tasks.c ****             }
1865:FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
1866:FreeRTOS/Source/tasks.c ****         }
1867:FreeRTOS/Source/tasks.c ****         else
1868:FreeRTOS/Source/tasks.c ****         {
1869:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1870:FreeRTOS/Source/tasks.c ****         }
1871:FreeRTOS/Source/tasks.c ****     }
1872:FreeRTOS/Source/tasks.c **** 
1873:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1874:FreeRTOS/Source/tasks.c **** 
1875:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1876:FreeRTOS/Source/tasks.c **** 
1877:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1878:FreeRTOS/Source/tasks.c **** 
1879:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1880:FreeRTOS/Source/tasks.c ****     {
1881:FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1882:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1883:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1884:FreeRTOS/Source/tasks.c **** 
1885:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToResume );
1886:FreeRTOS/Source/tasks.c **** 
1887:FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1888:FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1889:FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1890:FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1891:FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1892:FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 40


1893:FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1894:FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1895:FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1896:FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1897:FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1898:FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1899:FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1900:FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1901:FreeRTOS/Source/tasks.c ****          * provided on the following link:
1902:FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1903:FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1904:FreeRTOS/Source/tasks.c **** 
1905:FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1906:FreeRTOS/Source/tasks.c ****         {
1907:FreeRTOS/Source/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1908:FreeRTOS/Source/tasks.c ****             {
1909:FreeRTOS/Source/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1910:FreeRTOS/Source/tasks.c **** 
1911:FreeRTOS/Source/tasks.c ****                 /* Check the ready lists can be accessed. */
1912:FreeRTOS/Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1913:FreeRTOS/Source/tasks.c ****                 {
1914:FreeRTOS/Source/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1915:FreeRTOS/Source/tasks.c ****                      * suspended list to the ready list directly. */
1916:FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1917:FreeRTOS/Source/tasks.c ****                     {
1918:FreeRTOS/Source/tasks.c ****                         xYieldRequired = pdTRUE;
1919:FreeRTOS/Source/tasks.c **** 
1920:FreeRTOS/Source/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1921:FreeRTOS/Source/tasks.c ****                          * using the return value to initiate a context switch
1922:FreeRTOS/Source/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1923:FreeRTOS/Source/tasks.c ****                         xYieldPending = pdTRUE;
1924:FreeRTOS/Source/tasks.c ****                     }
1925:FreeRTOS/Source/tasks.c ****                     else
1926:FreeRTOS/Source/tasks.c ****                     {
1927:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1928:FreeRTOS/Source/tasks.c ****                     }
1929:FreeRTOS/Source/tasks.c **** 
1930:FreeRTOS/Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1931:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1932:FreeRTOS/Source/tasks.c ****                 }
1933:FreeRTOS/Source/tasks.c ****                 else
1934:FreeRTOS/Source/tasks.c ****                 {
1935:FreeRTOS/Source/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1936:FreeRTOS/Source/tasks.c ****                      * is held in the pending ready list until the scheduler is
1937:FreeRTOS/Source/tasks.c ****                      * unsuspended. */
1938:FreeRTOS/Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1939:FreeRTOS/Source/tasks.c ****                 }
1940:FreeRTOS/Source/tasks.c ****             }
1941:FreeRTOS/Source/tasks.c ****             else
1942:FreeRTOS/Source/tasks.c ****             {
1943:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1944:FreeRTOS/Source/tasks.c ****             }
1945:FreeRTOS/Source/tasks.c ****         }
1946:FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1947:FreeRTOS/Source/tasks.c **** 
1948:FreeRTOS/Source/tasks.c ****         return xYieldRequired;
1949:FreeRTOS/Source/tasks.c ****     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 41


1950:FreeRTOS/Source/tasks.c **** 
1951:FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1952:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1953:FreeRTOS/Source/tasks.c **** 
1954:FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1955:FreeRTOS/Source/tasks.c **** {
1956:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
1957:FreeRTOS/Source/tasks.c **** 
1958:FreeRTOS/Source/tasks.c ****     /* Add the idle task at the lowest priority. */
1959:FreeRTOS/Source/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1960:FreeRTOS/Source/tasks.c ****     {
1961:FreeRTOS/Source/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1962:FreeRTOS/Source/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1963:FreeRTOS/Source/tasks.c ****         uint32_t ulIdleTaskStackSize;
1964:FreeRTOS/Source/tasks.c **** 
1965:FreeRTOS/Source/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1966:FreeRTOS/Source/tasks.c ****          * address of the RAM then create the idle task. */
1967:FreeRTOS/Source/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1968:FreeRTOS/Source/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1969:FreeRTOS/Source/tasks.c ****                                              configIDLE_TASK_NAME,
1970:FreeRTOS/Source/tasks.c ****                                              ulIdleTaskStackSize,
1971:FreeRTOS/Source/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1972:FreeRTOS/Source/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1973:FreeRTOS/Source/tasks.c ****                                              pxIdleTaskStackBuffer,
1974:FreeRTOS/Source/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1975:FreeRTOS/Source/tasks.c **** 
1976:FreeRTOS/Source/tasks.c ****         if( xIdleTaskHandle != NULL )
1977:FreeRTOS/Source/tasks.c ****         {
1978:FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
1979:FreeRTOS/Source/tasks.c ****         }
1980:FreeRTOS/Source/tasks.c ****         else
1981:FreeRTOS/Source/tasks.c ****         {
1982:FreeRTOS/Source/tasks.c ****             xReturn = pdFAIL;
1983:FreeRTOS/Source/tasks.c ****         }
1984:FreeRTOS/Source/tasks.c ****     }
1985:FreeRTOS/Source/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1986:FreeRTOS/Source/tasks.c ****     {
1987:FreeRTOS/Source/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
1988:FreeRTOS/Source/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
1989:FreeRTOS/Source/tasks.c ****                                configIDLE_TASK_NAME,
1990:FreeRTOS/Source/tasks.c ****                                configMINIMAL_STACK_SIZE,
1991:FreeRTOS/Source/tasks.c ****                                ( void * ) NULL,
1992:FreeRTOS/Source/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
1993:FreeRTOS/Source/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
1994:FreeRTOS/Source/tasks.c ****     }
1995:FreeRTOS/Source/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
1996:FreeRTOS/Source/tasks.c **** 
1997:FreeRTOS/Source/tasks.c ****     #if ( configUSE_TIMERS == 1 )
1998:FreeRTOS/Source/tasks.c ****     {
1999:FreeRTOS/Source/tasks.c ****         if( xReturn == pdPASS )
2000:FreeRTOS/Source/tasks.c ****         {
2001:FreeRTOS/Source/tasks.c ****             xReturn = xTimerCreateTimerTask();
2002:FreeRTOS/Source/tasks.c ****         }
2003:FreeRTOS/Source/tasks.c ****         else
2004:FreeRTOS/Source/tasks.c ****         {
2005:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2006:FreeRTOS/Source/tasks.c ****         }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 42


2007:FreeRTOS/Source/tasks.c ****     }
2008:FreeRTOS/Source/tasks.c ****     #endif /* configUSE_TIMERS */
2009:FreeRTOS/Source/tasks.c **** 
2010:FreeRTOS/Source/tasks.c ****     if( xReturn == pdPASS )
2011:FreeRTOS/Source/tasks.c ****     {
2012:FreeRTOS/Source/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2013:FreeRTOS/Source/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2014:FreeRTOS/Source/tasks.c ****          * the only macro called by the function. */
2015:FreeRTOS/Source/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2016:FreeRTOS/Source/tasks.c ****         {
2017:FreeRTOS/Source/tasks.c ****             freertos_tasks_c_additions_init();
2018:FreeRTOS/Source/tasks.c ****         }
2019:FreeRTOS/Source/tasks.c ****         #endif
2020:FreeRTOS/Source/tasks.c **** 
2021:FreeRTOS/Source/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2022:FreeRTOS/Source/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2023:FreeRTOS/Source/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2024:FreeRTOS/Source/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2025:FreeRTOS/Source/tasks.c ****          * starts to run. */
2026:FreeRTOS/Source/tasks.c ****         portDISABLE_INTERRUPTS();
2027:FreeRTOS/Source/tasks.c **** 
2028:FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
2029:FreeRTOS/Source/tasks.c ****         {
2030:FreeRTOS/Source/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2031:FreeRTOS/Source/tasks.c ****              * block specific to the task that will run first. */
2032:FreeRTOS/Source/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2033:FreeRTOS/Source/tasks.c ****         }
2034:FreeRTOS/Source/tasks.c ****         #endif
2035:FreeRTOS/Source/tasks.c **** 
2036:FreeRTOS/Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2037:FreeRTOS/Source/tasks.c ****         xSchedulerRunning = pdTRUE;
2038:FreeRTOS/Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2039:FreeRTOS/Source/tasks.c **** 
2040:FreeRTOS/Source/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2041:FreeRTOS/Source/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2042:FreeRTOS/Source/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2043:FreeRTOS/Source/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2044:FreeRTOS/Source/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2045:FreeRTOS/Source/tasks.c ****          * FreeRTOSConfig.h file. */
2046:FreeRTOS/Source/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2047:FreeRTOS/Source/tasks.c **** 
2048:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
2049:FreeRTOS/Source/tasks.c **** 
2050:FreeRTOS/Source/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2051:FreeRTOS/Source/tasks.c ****          * portable interface. */
2052:FreeRTOS/Source/tasks.c ****         xPortStartScheduler();
2053:FreeRTOS/Source/tasks.c **** 
2054:FreeRTOS/Source/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2055:FreeRTOS/Source/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2056:FreeRTOS/Source/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2057:FreeRTOS/Source/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2058:FreeRTOS/Source/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2059:FreeRTOS/Source/tasks.c ****          * nothing to return to. */
2060:FreeRTOS/Source/tasks.c ****     }
2061:FreeRTOS/Source/tasks.c ****     else
2062:FreeRTOS/Source/tasks.c ****     {
2063:FreeRTOS/Source/tasks.c ****         /* This line will only be reached if the kernel could not be started,
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 43


2064:FreeRTOS/Source/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2065:FreeRTOS/Source/tasks.c ****          * or the timer task. */
2066:FreeRTOS/Source/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2067:FreeRTOS/Source/tasks.c ****     }
2068:FreeRTOS/Source/tasks.c **** 
2069:FreeRTOS/Source/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2070:FreeRTOS/Source/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2071:FreeRTOS/Source/tasks.c ****     ( void ) xIdleTaskHandle;
2072:FreeRTOS/Source/tasks.c **** 
2073:FreeRTOS/Source/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2074:FreeRTOS/Source/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2075:FreeRTOS/Source/tasks.c ****     ( void ) uxTopUsedPriority;
2076:FreeRTOS/Source/tasks.c **** }
2077:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2078:FreeRTOS/Source/tasks.c **** 
2079:FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2080:FreeRTOS/Source/tasks.c **** {
2081:FreeRTOS/Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2082:FreeRTOS/Source/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2083:FreeRTOS/Source/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2084:FreeRTOS/Source/tasks.c ****     portDISABLE_INTERRUPTS();
2085:FreeRTOS/Source/tasks.c ****     xSchedulerRunning = pdFALSE;
2086:FreeRTOS/Source/tasks.c ****     vPortEndScheduler();
2087:FreeRTOS/Source/tasks.c **** }
2088:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2089:FreeRTOS/Source/tasks.c **** 
2090:FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2091:FreeRTOS/Source/tasks.c **** {
2092:FreeRTOS/Source/tasks.c ****     /* A critical section is not required as the variable is of type
2093:FreeRTOS/Source/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2094:FreeRTOS/Source/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2095:FreeRTOS/Source/tasks.c ****      * https://goo.gl/wu4acr */
2096:FreeRTOS/Source/tasks.c **** 
2097:FreeRTOS/Source/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2098:FreeRTOS/Source/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2099:FreeRTOS/Source/tasks.c ****     portSOFTWARE_BARRIER();
2100:FreeRTOS/Source/tasks.c **** 
2101:FreeRTOS/Source/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2102:FreeRTOS/Source/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2103:FreeRTOS/Source/tasks.c ****     ++uxSchedulerSuspended;
2104:FreeRTOS/Source/tasks.c **** 
2105:FreeRTOS/Source/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2106:FreeRTOS/Source/tasks.c ****      * the above increment elsewhere. */
2107:FreeRTOS/Source/tasks.c ****     portMEMORY_BARRIER();
2108:FreeRTOS/Source/tasks.c **** }
2109:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:FreeRTOS/Source/tasks.c **** 
2111:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:FreeRTOS/Source/tasks.c **** 
2113:FreeRTOS/Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2114:FreeRTOS/Source/tasks.c ****     {
2115:FreeRTOS/Source/tasks.c ****         TickType_t xReturn;
2116:FreeRTOS/Source/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:FreeRTOS/Source/tasks.c **** 
2118:FreeRTOS/Source/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2119:FreeRTOS/Source/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:FreeRTOS/Source/tasks.c ****          * task that are in the Ready state, even though the idle task is
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 44


2121:FreeRTOS/Source/tasks.c ****          * running. */
2122:FreeRTOS/Source/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:FreeRTOS/Source/tasks.c ****         {
2124:FreeRTOS/Source/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:FreeRTOS/Source/tasks.c ****             {
2126:FreeRTOS/Source/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2127:FreeRTOS/Source/tasks.c ****             }
2128:FreeRTOS/Source/tasks.c ****         }
2129:FreeRTOS/Source/tasks.c ****         #else
2130:FreeRTOS/Source/tasks.c ****         {
2131:FreeRTOS/Source/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:FreeRTOS/Source/tasks.c **** 
2133:FreeRTOS/Source/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2134:FreeRTOS/Source/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2135:FreeRTOS/Source/tasks.c ****              * significant bit are set then there are tasks that have a priority
2136:FreeRTOS/Source/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2137:FreeRTOS/Source/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2138:FreeRTOS/Source/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2139:FreeRTOS/Source/tasks.c ****             {
2140:FreeRTOS/Source/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2141:FreeRTOS/Source/tasks.c ****             }
2142:FreeRTOS/Source/tasks.c ****         }
2143:FreeRTOS/Source/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2144:FreeRTOS/Source/tasks.c **** 
2145:FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:FreeRTOS/Source/tasks.c ****         {
2147:FreeRTOS/Source/tasks.c ****             xReturn = 0;
2148:FreeRTOS/Source/tasks.c ****         }
2149:FreeRTOS/Source/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:FreeRTOS/Source/tasks.c ****         {
2151:FreeRTOS/Source/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2152:FreeRTOS/Source/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2153:FreeRTOS/Source/tasks.c ****              * processed. */
2154:FreeRTOS/Source/tasks.c ****             xReturn = 0;
2155:FreeRTOS/Source/tasks.c ****         }
2156:FreeRTOS/Source/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:FreeRTOS/Source/tasks.c ****         {
2158:FreeRTOS/Source/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2159:FreeRTOS/Source/tasks.c ****              * idle priority.  This path can only be reached if
2160:FreeRTOS/Source/tasks.c ****              * configUSE_PREEMPTION is 0. */
2161:FreeRTOS/Source/tasks.c ****             xReturn = 0;
2162:FreeRTOS/Source/tasks.c ****         }
2163:FreeRTOS/Source/tasks.c ****         else
2164:FreeRTOS/Source/tasks.c ****         {
2165:FreeRTOS/Source/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2166:FreeRTOS/Source/tasks.c ****         }
2167:FreeRTOS/Source/tasks.c **** 
2168:FreeRTOS/Source/tasks.c ****         return xReturn;
2169:FreeRTOS/Source/tasks.c ****     }
2170:FreeRTOS/Source/tasks.c **** 
2171:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:FreeRTOS/Source/tasks.c **** 
2174:FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:FreeRTOS/Source/tasks.c **** {
2176:FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB = NULL;
2177:FreeRTOS/Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 45


2178:FreeRTOS/Source/tasks.c **** 
2179:FreeRTOS/Source/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2180:FreeRTOS/Source/tasks.c ****      * previous call to vTaskSuspendAll(). */
2181:FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended );
2182:FreeRTOS/Source/tasks.c **** 
2183:FreeRTOS/Source/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2184:FreeRTOS/Source/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2185:FreeRTOS/Source/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2186:FreeRTOS/Source/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2187:FreeRTOS/Source/tasks.c ****      * tasks from this list into their appropriate ready list. */
2188:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
2189:FreeRTOS/Source/tasks.c ****     {
2190:FreeRTOS/Source/tasks.c ****         --uxSchedulerSuspended;
2191:FreeRTOS/Source/tasks.c **** 
2192:FreeRTOS/Source/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:FreeRTOS/Source/tasks.c ****         {
2194:FreeRTOS/Source/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:FreeRTOS/Source/tasks.c ****             {
2196:FreeRTOS/Source/tasks.c ****                 /* Move any readied tasks from the pending list into the
2197:FreeRTOS/Source/tasks.c ****                  * appropriate ready list. */
2198:FreeRTOS/Source/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:FreeRTOS/Source/tasks.c ****                 {
2200:FreeRTOS/Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2201:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2202:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
2203:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2204:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2205:FreeRTOS/Source/tasks.c **** 
2206:FreeRTOS/Source/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2207:FreeRTOS/Source/tasks.c ****                      * the current task then a yield must be performed. */
2208:FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2209:FreeRTOS/Source/tasks.c ****                     {
2210:FreeRTOS/Source/tasks.c ****                         xYieldPending = pdTRUE;
2211:FreeRTOS/Source/tasks.c ****                     }
2212:FreeRTOS/Source/tasks.c ****                     else
2213:FreeRTOS/Source/tasks.c ****                     {
2214:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2215:FreeRTOS/Source/tasks.c ****                     }
2216:FreeRTOS/Source/tasks.c ****                 }
2217:FreeRTOS/Source/tasks.c **** 
2218:FreeRTOS/Source/tasks.c ****                 if( pxTCB != NULL )
2219:FreeRTOS/Source/tasks.c ****                 {
2220:FreeRTOS/Source/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2221:FreeRTOS/Source/tasks.c ****                      * which may have prevented the next unblock time from being
2222:FreeRTOS/Source/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2223:FreeRTOS/Source/tasks.c ****                      * important for low power tickless implementations, where
2224:FreeRTOS/Source/tasks.c ****                      * this can prevent an unnecessary exit from low power
2225:FreeRTOS/Source/tasks.c ****                      * state. */
2226:FreeRTOS/Source/tasks.c ****                     prvResetNextTaskUnblockTime();
2227:FreeRTOS/Source/tasks.c ****                 }
2228:FreeRTOS/Source/tasks.c **** 
2229:FreeRTOS/Source/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2230:FreeRTOS/Source/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2231:FreeRTOS/Source/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2232:FreeRTOS/Source/tasks.c ****                  * time. */
2233:FreeRTOS/Source/tasks.c ****                 {
2234:FreeRTOS/Source/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 46


2235:FreeRTOS/Source/tasks.c **** 
2236:FreeRTOS/Source/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2237:FreeRTOS/Source/tasks.c ****                     {
2238:FreeRTOS/Source/tasks.c ****                         do
2239:FreeRTOS/Source/tasks.c ****                         {
2240:FreeRTOS/Source/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2241:FreeRTOS/Source/tasks.c ****                             {
2242:FreeRTOS/Source/tasks.c ****                                 xYieldPending = pdTRUE;
2243:FreeRTOS/Source/tasks.c ****                             }
2244:FreeRTOS/Source/tasks.c ****                             else
2245:FreeRTOS/Source/tasks.c ****                             {
2246:FreeRTOS/Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2247:FreeRTOS/Source/tasks.c ****                             }
2248:FreeRTOS/Source/tasks.c **** 
2249:FreeRTOS/Source/tasks.c ****                             --xPendedCounts;
2250:FreeRTOS/Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2251:FreeRTOS/Source/tasks.c **** 
2252:FreeRTOS/Source/tasks.c ****                         xPendedTicks = 0;
2253:FreeRTOS/Source/tasks.c ****                     }
2254:FreeRTOS/Source/tasks.c ****                     else
2255:FreeRTOS/Source/tasks.c ****                     {
2256:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2257:FreeRTOS/Source/tasks.c ****                     }
2258:FreeRTOS/Source/tasks.c ****                 }
2259:FreeRTOS/Source/tasks.c **** 
2260:FreeRTOS/Source/tasks.c ****                 if( xYieldPending != pdFALSE )
2261:FreeRTOS/Source/tasks.c ****                 {
2262:FreeRTOS/Source/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2263:FreeRTOS/Source/tasks.c ****                     {
2264:FreeRTOS/Source/tasks.c ****                         xAlreadyYielded = pdTRUE;
2265:FreeRTOS/Source/tasks.c ****                     }
2266:FreeRTOS/Source/tasks.c ****                     #endif
2267:FreeRTOS/Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2268:FreeRTOS/Source/tasks.c ****                 }
2269:FreeRTOS/Source/tasks.c ****                 else
2270:FreeRTOS/Source/tasks.c ****                 {
2271:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2272:FreeRTOS/Source/tasks.c ****                 }
2273:FreeRTOS/Source/tasks.c ****             }
2274:FreeRTOS/Source/tasks.c ****         }
2275:FreeRTOS/Source/tasks.c ****         else
2276:FreeRTOS/Source/tasks.c ****         {
2277:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2278:FreeRTOS/Source/tasks.c ****         }
2279:FreeRTOS/Source/tasks.c ****     }
2280:FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
2281:FreeRTOS/Source/tasks.c **** 
2282:FreeRTOS/Source/tasks.c ****     return xAlreadyYielded;
2283:FreeRTOS/Source/tasks.c **** }
2284:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2285:FreeRTOS/Source/tasks.c **** 
2286:FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2287:FreeRTOS/Source/tasks.c **** {
2288:FreeRTOS/Source/tasks.c ****     TickType_t xTicks;
2289:FreeRTOS/Source/tasks.c **** 
2290:FreeRTOS/Source/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2291:FreeRTOS/Source/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 47


2292:FreeRTOS/Source/tasks.c ****     {
2293:FreeRTOS/Source/tasks.c ****         xTicks = xTickCount;
2294:FreeRTOS/Source/tasks.c ****     }
2295:FreeRTOS/Source/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2296:FreeRTOS/Source/tasks.c **** 
2297:FreeRTOS/Source/tasks.c ****     return xTicks;
2298:FreeRTOS/Source/tasks.c **** }
2299:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2300:FreeRTOS/Source/tasks.c **** 
2301:FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2302:FreeRTOS/Source/tasks.c **** {
2303:FreeRTOS/Source/tasks.c ****     TickType_t xReturn;
2304:FreeRTOS/Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2305:FreeRTOS/Source/tasks.c **** 
2306:FreeRTOS/Source/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2307:FreeRTOS/Source/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2308:FreeRTOS/Source/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2309:FreeRTOS/Source/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2310:FreeRTOS/Source/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2311:FreeRTOS/Source/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2312:FreeRTOS/Source/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2313:FreeRTOS/Source/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2314:FreeRTOS/Source/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2315:FreeRTOS/Source/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2316:FreeRTOS/Source/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2317:FreeRTOS/Source/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2318:FreeRTOS/Source/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2319:FreeRTOS/Source/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2320:FreeRTOS/Source/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2321:FreeRTOS/Source/tasks.c **** 
2322:FreeRTOS/Source/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2323:FreeRTOS/Source/tasks.c ****     {
2324:FreeRTOS/Source/tasks.c ****         xReturn = xTickCount;
2325:FreeRTOS/Source/tasks.c ****     }
2326:FreeRTOS/Source/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2327:FreeRTOS/Source/tasks.c **** 
2328:FreeRTOS/Source/tasks.c ****     return xReturn;
2329:FreeRTOS/Source/tasks.c **** }
2330:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2331:FreeRTOS/Source/tasks.c **** 
2332:FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2333:FreeRTOS/Source/tasks.c **** {
2334:FreeRTOS/Source/tasks.c ****     /* A critical section is not required because the variables are of type
2335:FreeRTOS/Source/tasks.c ****      * BaseType_t. */
2336:FreeRTOS/Source/tasks.c ****     return uxCurrentNumberOfTasks;
2337:FreeRTOS/Source/tasks.c **** }
2338:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2339:FreeRTOS/Source/tasks.c **** 
2340:FreeRTOS/Source/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2341:FreeRTOS/Source/tasks.c **** {
2342:FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
2343:FreeRTOS/Source/tasks.c **** 
2344:FreeRTOS/Source/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2345:FreeRTOS/Source/tasks.c ****      * queried. */
2346:FreeRTOS/Source/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2347:FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
2348:FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 48


2349:FreeRTOS/Source/tasks.c **** }
2350:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2351:FreeRTOS/Source/tasks.c **** 
2352:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2353:FreeRTOS/Source/tasks.c **** 
2354:FreeRTOS/Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2355:FreeRTOS/Source/tasks.c ****                                                      const char pcNameToQuery[] )
2356:FreeRTOS/Source/tasks.c ****     {
2357:FreeRTOS/Source/tasks.c ****         TCB_t * pxNextTCB;
2358:FreeRTOS/Source/tasks.c ****         TCB_t * pxFirstTCB;
2359:FreeRTOS/Source/tasks.c ****         TCB_t * pxReturn = NULL;
2360:FreeRTOS/Source/tasks.c ****         UBaseType_t x;
2361:FreeRTOS/Source/tasks.c ****         char cNextChar;
2362:FreeRTOS/Source/tasks.c ****         BaseType_t xBreakLoop;
2363:FreeRTOS/Source/tasks.c **** 
2364:FreeRTOS/Source/tasks.c ****         /* This function is called with the scheduler suspended. */
2365:FreeRTOS/Source/tasks.c **** 
2366:FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2367:FreeRTOS/Source/tasks.c ****         {
2368:FreeRTOS/Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2369:FreeRTOS/Source/tasks.c **** 
2370:FreeRTOS/Source/tasks.c ****             do
2371:FreeRTOS/Source/tasks.c ****             {
2372:FreeRTOS/Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2373:FreeRTOS/Source/tasks.c **** 
2374:FreeRTOS/Source/tasks.c ****                 /* Check each character in the name looking for a match or
2375:FreeRTOS/Source/tasks.c ****                  * mismatch. */
2376:FreeRTOS/Source/tasks.c ****                 xBreakLoop = pdFALSE;
2377:FreeRTOS/Source/tasks.c **** 
2378:FreeRTOS/Source/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2379:FreeRTOS/Source/tasks.c ****                 {
2380:FreeRTOS/Source/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2381:FreeRTOS/Source/tasks.c **** 
2382:FreeRTOS/Source/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2383:FreeRTOS/Source/tasks.c ****                     {
2384:FreeRTOS/Source/tasks.c ****                         /* Characters didn't match. */
2385:FreeRTOS/Source/tasks.c ****                         xBreakLoop = pdTRUE;
2386:FreeRTOS/Source/tasks.c ****                     }
2387:FreeRTOS/Source/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2388:FreeRTOS/Source/tasks.c ****                     {
2389:FreeRTOS/Source/tasks.c ****                         /* Both strings terminated, a match must have been
2390:FreeRTOS/Source/tasks.c ****                          * found. */
2391:FreeRTOS/Source/tasks.c ****                         pxReturn = pxNextTCB;
2392:FreeRTOS/Source/tasks.c ****                         xBreakLoop = pdTRUE;
2393:FreeRTOS/Source/tasks.c ****                     }
2394:FreeRTOS/Source/tasks.c ****                     else
2395:FreeRTOS/Source/tasks.c ****                     {
2396:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2397:FreeRTOS/Source/tasks.c ****                     }
2398:FreeRTOS/Source/tasks.c **** 
2399:FreeRTOS/Source/tasks.c ****                     if( xBreakLoop != pdFALSE )
2400:FreeRTOS/Source/tasks.c ****                     {
2401:FreeRTOS/Source/tasks.c ****                         break;
2402:FreeRTOS/Source/tasks.c ****                     }
2403:FreeRTOS/Source/tasks.c ****                 }
2404:FreeRTOS/Source/tasks.c **** 
2405:FreeRTOS/Source/tasks.c ****                 if( pxReturn != NULL )
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 49


2406:FreeRTOS/Source/tasks.c ****                 {
2407:FreeRTOS/Source/tasks.c ****                     /* The handle has been found. */
2408:FreeRTOS/Source/tasks.c ****                     break;
2409:FreeRTOS/Source/tasks.c ****                 }
2410:FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2411:FreeRTOS/Source/tasks.c ****         }
2412:FreeRTOS/Source/tasks.c ****         else
2413:FreeRTOS/Source/tasks.c ****         {
2414:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2415:FreeRTOS/Source/tasks.c ****         }
2416:FreeRTOS/Source/tasks.c **** 
2417:FreeRTOS/Source/tasks.c ****         return pxReturn;
2418:FreeRTOS/Source/tasks.c ****     }
2419:FreeRTOS/Source/tasks.c **** 
2420:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2421:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2422:FreeRTOS/Source/tasks.c **** 
2423:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2424:FreeRTOS/Source/tasks.c **** 
2425:FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2426:FreeRTOS/Source/tasks.c ****     {
2427:FreeRTOS/Source/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2428:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
2429:FreeRTOS/Source/tasks.c **** 
2430:FreeRTOS/Source/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2431:FreeRTOS/Source/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2432:FreeRTOS/Source/tasks.c **** 
2433:FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
2434:FreeRTOS/Source/tasks.c ****         {
2435:FreeRTOS/Source/tasks.c ****             /* Search the ready lists. */
2436:FreeRTOS/Source/tasks.c ****             do
2437:FreeRTOS/Source/tasks.c ****             {
2438:FreeRTOS/Source/tasks.c ****                 uxQueue--;
2439:FreeRTOS/Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2440:FreeRTOS/Source/tasks.c **** 
2441:FreeRTOS/Source/tasks.c ****                 if( pxTCB != NULL )
2442:FreeRTOS/Source/tasks.c ****                 {
2443:FreeRTOS/Source/tasks.c ****                     /* Found the handle. */
2444:FreeRTOS/Source/tasks.c ****                     break;
2445:FreeRTOS/Source/tasks.c ****                 }
2446:FreeRTOS/Source/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2447:FreeRTOS/Source/tasks.c **** 
2448:FreeRTOS/Source/tasks.c ****             /* Search the delayed lists. */
2449:FreeRTOS/Source/tasks.c ****             if( pxTCB == NULL )
2450:FreeRTOS/Source/tasks.c ****             {
2451:FreeRTOS/Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2452:FreeRTOS/Source/tasks.c ****             }
2453:FreeRTOS/Source/tasks.c **** 
2454:FreeRTOS/Source/tasks.c ****             if( pxTCB == NULL )
2455:FreeRTOS/Source/tasks.c ****             {
2456:FreeRTOS/Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2457:FreeRTOS/Source/tasks.c ****             }
2458:FreeRTOS/Source/tasks.c **** 
2459:FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2460:FreeRTOS/Source/tasks.c ****             {
2461:FreeRTOS/Source/tasks.c ****                 if( pxTCB == NULL )
2462:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 50


2463:FreeRTOS/Source/tasks.c ****                     /* Search the suspended list. */
2464:FreeRTOS/Source/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2465:FreeRTOS/Source/tasks.c ****                 }
2466:FreeRTOS/Source/tasks.c ****             }
2467:FreeRTOS/Source/tasks.c ****             #endif
2468:FreeRTOS/Source/tasks.c **** 
2469:FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2470:FreeRTOS/Source/tasks.c ****             {
2471:FreeRTOS/Source/tasks.c ****                 if( pxTCB == NULL )
2472:FreeRTOS/Source/tasks.c ****                 {
2473:FreeRTOS/Source/tasks.c ****                     /* Search the deleted list. */
2474:FreeRTOS/Source/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2475:FreeRTOS/Source/tasks.c ****                 }
2476:FreeRTOS/Source/tasks.c ****             }
2477:FreeRTOS/Source/tasks.c ****             #endif
2478:FreeRTOS/Source/tasks.c ****         }
2479:FreeRTOS/Source/tasks.c ****         ( void ) xTaskResumeAll();
2480:FreeRTOS/Source/tasks.c **** 
2481:FreeRTOS/Source/tasks.c ****         return pxTCB;
2482:FreeRTOS/Source/tasks.c ****     }
2483:FreeRTOS/Source/tasks.c **** 
2484:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2485:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2486:FreeRTOS/Source/tasks.c **** 
2487:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2488:FreeRTOS/Source/tasks.c **** 
2489:FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2490:FreeRTOS/Source/tasks.c ****                                       const UBaseType_t uxArraySize,
2491:FreeRTOS/Source/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2492:FreeRTOS/Source/tasks.c ****     {
2493:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2494:FreeRTOS/Source/tasks.c **** 
2495:FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
2496:FreeRTOS/Source/tasks.c ****         {
2497:FreeRTOS/Source/tasks.c ****             /* Is there a space in the array for each task in the system? */
2498:FreeRTOS/Source/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2499:FreeRTOS/Source/tasks.c ****             {
2500:FreeRTOS/Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2501:FreeRTOS/Source/tasks.c ****                  * task in the Ready state. */
2502:FreeRTOS/Source/tasks.c ****                 do
2503:FreeRTOS/Source/tasks.c ****                 {
2504:FreeRTOS/Source/tasks.c ****                     uxQueue--;
2505:FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2506:FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2507:FreeRTOS/Source/tasks.c **** 
2508:FreeRTOS/Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2509:FreeRTOS/Source/tasks.c ****                  * task in the Blocked state. */
2510:FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2511:FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2512:FreeRTOS/Source/tasks.c **** 
2513:FreeRTOS/Source/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2514:FreeRTOS/Source/tasks.c ****                 {
2515:FreeRTOS/Source/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2516:FreeRTOS/Source/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2517:FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
2518:FreeRTOS/Source/tasks.c ****                 }
2519:FreeRTOS/Source/tasks.c ****                 #endif
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 51


2520:FreeRTOS/Source/tasks.c **** 
2521:FreeRTOS/Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2522:FreeRTOS/Source/tasks.c ****                 {
2523:FreeRTOS/Source/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2524:FreeRTOS/Source/tasks.c ****                      * each task in the Suspended state. */
2525:FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
2526:FreeRTOS/Source/tasks.c ****                 }
2527:FreeRTOS/Source/tasks.c ****                 #endif
2528:FreeRTOS/Source/tasks.c **** 
2529:FreeRTOS/Source/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2530:FreeRTOS/Source/tasks.c ****                 {
2531:FreeRTOS/Source/tasks.c ****                     if( pulTotalRunTime != NULL )
2532:FreeRTOS/Source/tasks.c ****                     {
2533:FreeRTOS/Source/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2534:FreeRTOS/Source/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2535:FreeRTOS/Source/tasks.c ****                         #else
2536:FreeRTOS/Source/tasks.c ****                             *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2537:FreeRTOS/Source/tasks.c ****                         #endif
2538:FreeRTOS/Source/tasks.c ****                     }
2539:FreeRTOS/Source/tasks.c ****                 }
2540:FreeRTOS/Source/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2541:FreeRTOS/Source/tasks.c ****                 {
2542:FreeRTOS/Source/tasks.c ****                     if( pulTotalRunTime != NULL )
2543:FreeRTOS/Source/tasks.c ****                     {
2544:FreeRTOS/Source/tasks.c ****                         *pulTotalRunTime = 0;
2545:FreeRTOS/Source/tasks.c ****                     }
2546:FreeRTOS/Source/tasks.c ****                 }
2547:FreeRTOS/Source/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2548:FreeRTOS/Source/tasks.c ****             }
2549:FreeRTOS/Source/tasks.c ****             else
2550:FreeRTOS/Source/tasks.c ****             {
2551:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2552:FreeRTOS/Source/tasks.c ****             }
2553:FreeRTOS/Source/tasks.c ****         }
2554:FreeRTOS/Source/tasks.c ****         ( void ) xTaskResumeAll();
2555:FreeRTOS/Source/tasks.c **** 
2556:FreeRTOS/Source/tasks.c ****         return uxTask;
2557:FreeRTOS/Source/tasks.c ****     }
2558:FreeRTOS/Source/tasks.c **** 
2559:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2560:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2561:FreeRTOS/Source/tasks.c **** 
2562:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2563:FreeRTOS/Source/tasks.c **** 
2564:FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2565:FreeRTOS/Source/tasks.c ****     {
2566:FreeRTOS/Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2567:FreeRTOS/Source/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2568:FreeRTOS/Source/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2569:FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle;
2570:FreeRTOS/Source/tasks.c ****     }
2571:FreeRTOS/Source/tasks.c **** 
2572:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2573:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2574:FreeRTOS/Source/tasks.c **** 
2575:FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2576:FreeRTOS/Source/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 52


2577:FreeRTOS/Source/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2578:FreeRTOS/Source/tasks.c ****  * 1. */
2579:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2580:FreeRTOS/Source/tasks.c **** 
2581:FreeRTOS/Source/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
2582:FreeRTOS/Source/tasks.c ****     {
2583:FreeRTOS/Source/tasks.c ****         /* Correct the tick count value after a period during which the tick
2584:FreeRTOS/Source/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2585:FreeRTOS/Source/tasks.c ****          * each stepped tick. */
2586:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2587:FreeRTOS/Source/tasks.c **** 
2588:FreeRTOS/Source/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2589:FreeRTOS/Source/tasks.c ****         {
2590:FreeRTOS/Source/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2591:FreeRTOS/Source/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2592:FreeRTOS/Source/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2593:FreeRTOS/Source/tasks.c ****             configASSERT( uxSchedulerSuspended );
2594:FreeRTOS/Source/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
2595:FreeRTOS/Source/tasks.c **** 
2596:FreeRTOS/Source/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2597:FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
2598:FreeRTOS/Source/tasks.c ****             {
2599:FreeRTOS/Source/tasks.c ****                 xPendedTicks++;
2600:FreeRTOS/Source/tasks.c ****             }
2601:FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
2602:FreeRTOS/Source/tasks.c ****             xTicksToJump--;
2603:FreeRTOS/Source/tasks.c ****         }
2604:FreeRTOS/Source/tasks.c ****         else
2605:FreeRTOS/Source/tasks.c ****         {
2606:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2607:FreeRTOS/Source/tasks.c ****         }
2608:FreeRTOS/Source/tasks.c **** 
2609:FreeRTOS/Source/tasks.c ****         xTickCount += xTicksToJump;
2610:FreeRTOS/Source/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2611:FreeRTOS/Source/tasks.c ****     }
2612:FreeRTOS/Source/tasks.c **** 
2613:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2614:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2615:FreeRTOS/Source/tasks.c **** 
2616:FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2617:FreeRTOS/Source/tasks.c **** {
2618:FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
2619:FreeRTOS/Source/tasks.c **** 
2620:FreeRTOS/Source/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2621:FreeRTOS/Source/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2622:FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2623:FreeRTOS/Source/tasks.c **** 
2624:FreeRTOS/Source/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2625:FreeRTOS/Source/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2626:FreeRTOS/Source/tasks.c ****     vTaskSuspendAll();
2627:FreeRTOS/Source/tasks.c **** 
2628:FreeRTOS/Source/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2629:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
2630:FreeRTOS/Source/tasks.c ****     {
2631:FreeRTOS/Source/tasks.c ****         xPendedTicks += xTicksToCatchUp;
2632:FreeRTOS/Source/tasks.c ****     }
2633:FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 53


2634:FreeRTOS/Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2635:FreeRTOS/Source/tasks.c **** 
2636:FreeRTOS/Source/tasks.c ****     return xYieldOccurred;
2637:FreeRTOS/Source/tasks.c **** }
2638:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2639:FreeRTOS/Source/tasks.c **** 
2640:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2641:FreeRTOS/Source/tasks.c **** 
2642:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2643:FreeRTOS/Source/tasks.c ****     {
2644:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB = xTask;
2645:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
2646:FreeRTOS/Source/tasks.c **** 
2647:FreeRTOS/Source/tasks.c ****         configASSERT( pxTCB );
2648:FreeRTOS/Source/tasks.c **** 
2649:FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
2650:FreeRTOS/Source/tasks.c ****         {
2651:FreeRTOS/Source/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2652:FreeRTOS/Source/tasks.c ****              * it is actually in the Blocked state. */
2653:FreeRTOS/Source/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2654:FreeRTOS/Source/tasks.c ****             {
2655:FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
2656:FreeRTOS/Source/tasks.c **** 
2657:FreeRTOS/Source/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2658:FreeRTOS/Source/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2659:FreeRTOS/Source/tasks.c ****                  * scheduler is suspended. */
2660:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2661:FreeRTOS/Source/tasks.c **** 
2662:FreeRTOS/Source/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2663:FreeRTOS/Source/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2664:FreeRTOS/Source/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2665:FreeRTOS/Source/tasks.c ****                  * is used. */
2666:FreeRTOS/Source/tasks.c ****                 taskENTER_CRITICAL();
2667:FreeRTOS/Source/tasks.c ****                 {
2668:FreeRTOS/Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2669:FreeRTOS/Source/tasks.c ****                     {
2670:FreeRTOS/Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2671:FreeRTOS/Source/tasks.c **** 
2672:FreeRTOS/Source/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2673:FreeRTOS/Source/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2674:FreeRTOS/Source/tasks.c ****                          * then block again. */
2675:FreeRTOS/Source/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2676:FreeRTOS/Source/tasks.c ****                     }
2677:FreeRTOS/Source/tasks.c ****                     else
2678:FreeRTOS/Source/tasks.c ****                     {
2679:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2680:FreeRTOS/Source/tasks.c ****                     }
2681:FreeRTOS/Source/tasks.c ****                 }
2682:FreeRTOS/Source/tasks.c ****                 taskEXIT_CRITICAL();
2683:FreeRTOS/Source/tasks.c **** 
2684:FreeRTOS/Source/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2685:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2686:FreeRTOS/Source/tasks.c **** 
2687:FreeRTOS/Source/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2688:FreeRTOS/Source/tasks.c ****                  * switch if preemption is turned off. */
2689:FreeRTOS/Source/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2690:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 54


2691:FreeRTOS/Source/tasks.c ****                     /* Preemption is on, but a context switch should only be
2692:FreeRTOS/Source/tasks.c ****                      * performed if the unblocked task has a priority that is
2693:FreeRTOS/Source/tasks.c ****                      * higher than the currently executing task. */
2694:FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2695:FreeRTOS/Source/tasks.c ****                     {
2696:FreeRTOS/Source/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2697:FreeRTOS/Source/tasks.c ****                          * is unsuspended. */
2698:FreeRTOS/Source/tasks.c ****                         xYieldPending = pdTRUE;
2699:FreeRTOS/Source/tasks.c ****                     }
2700:FreeRTOS/Source/tasks.c ****                     else
2701:FreeRTOS/Source/tasks.c ****                     {
2702:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2703:FreeRTOS/Source/tasks.c ****                     }
2704:FreeRTOS/Source/tasks.c ****                 }
2705:FreeRTOS/Source/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2706:FreeRTOS/Source/tasks.c ****             }
2707:FreeRTOS/Source/tasks.c ****             else
2708:FreeRTOS/Source/tasks.c ****             {
2709:FreeRTOS/Source/tasks.c ****                 xReturn = pdFAIL;
2710:FreeRTOS/Source/tasks.c ****             }
2711:FreeRTOS/Source/tasks.c ****         }
2712:FreeRTOS/Source/tasks.c ****         ( void ) xTaskResumeAll();
2713:FreeRTOS/Source/tasks.c **** 
2714:FreeRTOS/Source/tasks.c ****         return xReturn;
2715:FreeRTOS/Source/tasks.c ****     }
2716:FreeRTOS/Source/tasks.c **** 
2717:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2718:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2719:FreeRTOS/Source/tasks.c **** 
2720:FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2721:FreeRTOS/Source/tasks.c **** {
2722:FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
2723:FreeRTOS/Source/tasks.c ****     TickType_t xItemValue;
2724:FreeRTOS/Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2725:FreeRTOS/Source/tasks.c **** 
2726:FreeRTOS/Source/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2727:FreeRTOS/Source/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2728:FreeRTOS/Source/tasks.c ****      * tasks to be unblocked. */
2729:FreeRTOS/Source/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2730:FreeRTOS/Source/tasks.c **** 
2731:FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2732:FreeRTOS/Source/tasks.c ****     {
2733:FreeRTOS/Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2734:FreeRTOS/Source/tasks.c ****          * block. */
2735:FreeRTOS/Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2736:FreeRTOS/Source/tasks.c **** 
2737:FreeRTOS/Source/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2738:FreeRTOS/Source/tasks.c ****          * delayed lists if it wraps to 0. */
2739:FreeRTOS/Source/tasks.c ****         xTickCount = xConstTickCount;
2740:FreeRTOS/Source/tasks.c **** 
2741:FreeRTOS/Source/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2742:FreeRTOS/Source/tasks.c ****         {
2743:FreeRTOS/Source/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2744:FreeRTOS/Source/tasks.c ****         }
2745:FreeRTOS/Source/tasks.c ****         else
2746:FreeRTOS/Source/tasks.c ****         {
2747:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 55


2748:FreeRTOS/Source/tasks.c ****         }
2749:FreeRTOS/Source/tasks.c **** 
2750:FreeRTOS/Source/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2751:FreeRTOS/Source/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2752:FreeRTOS/Source/tasks.c ****          * has been found whose block time has not expired there is no need to
2753:FreeRTOS/Source/tasks.c ****          * look any further down the list. */
2754:FreeRTOS/Source/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2755:FreeRTOS/Source/tasks.c ****         {
2756:FreeRTOS/Source/tasks.c ****             for( ; ; )
2757:FreeRTOS/Source/tasks.c ****             {
2758:FreeRTOS/Source/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2759:FreeRTOS/Source/tasks.c ****                 {
2760:FreeRTOS/Source/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2761:FreeRTOS/Source/tasks.c ****                      * to the maximum possible value so it is extremely
2762:FreeRTOS/Source/tasks.c ****                      * unlikely that the
2763:FreeRTOS/Source/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2764:FreeRTOS/Source/tasks.c ****                      * next time through. */
2765:FreeRTOS/Source/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2766:FreeRTOS/Source/tasks.c ****                     break;
2767:FreeRTOS/Source/tasks.c ****                 }
2768:FreeRTOS/Source/tasks.c ****                 else
2769:FreeRTOS/Source/tasks.c ****                 {
2770:FreeRTOS/Source/tasks.c ****                     /* The delayed list is not empty, get the value of the
2771:FreeRTOS/Source/tasks.c ****                      * item at the head of the delayed list.  This is the time
2772:FreeRTOS/Source/tasks.c ****                      * at which the task at the head of the delayed list must
2773:FreeRTOS/Source/tasks.c ****                      * be removed from the Blocked state. */
2774:FreeRTOS/Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2775:FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2776:FreeRTOS/Source/tasks.c **** 
2777:FreeRTOS/Source/tasks.c ****                     if( xConstTickCount < xItemValue )
2778:FreeRTOS/Source/tasks.c ****                     {
2779:FreeRTOS/Source/tasks.c ****                         /* It is not time to unblock this item yet, but the
2780:FreeRTOS/Source/tasks.c ****                          * item value is the time at which the task at the head
2781:FreeRTOS/Source/tasks.c ****                          * of the blocked list must be removed from the Blocked
2782:FreeRTOS/Source/tasks.c ****                          * state -  so record the item value in
2783:FreeRTOS/Source/tasks.c ****                          * xNextTaskUnblockTime. */
2784:FreeRTOS/Source/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2785:FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2786:FreeRTOS/Source/tasks.c ****                     }
2787:FreeRTOS/Source/tasks.c ****                     else
2788:FreeRTOS/Source/tasks.c ****                     {
2789:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2790:FreeRTOS/Source/tasks.c ****                     }
2791:FreeRTOS/Source/tasks.c **** 
2792:FreeRTOS/Source/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2793:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2794:FreeRTOS/Source/tasks.c **** 
2795:FreeRTOS/Source/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2796:FreeRTOS/Source/tasks.c ****                      * it from the event list. */
2797:FreeRTOS/Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2798:FreeRTOS/Source/tasks.c ****                     {
2799:FreeRTOS/Source/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2800:FreeRTOS/Source/tasks.c ****                     }
2801:FreeRTOS/Source/tasks.c ****                     else
2802:FreeRTOS/Source/tasks.c ****                     {
2803:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2804:FreeRTOS/Source/tasks.c ****                     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 56


2805:FreeRTOS/Source/tasks.c **** 
2806:FreeRTOS/Source/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2807:FreeRTOS/Source/tasks.c ****                      * list. */
2808:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2809:FreeRTOS/Source/tasks.c **** 
2810:FreeRTOS/Source/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2811:FreeRTOS/Source/tasks.c ****                      * context switch if preemption is turned off. */
2812:FreeRTOS/Source/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2813:FreeRTOS/Source/tasks.c ****                     {
2814:FreeRTOS/Source/tasks.c ****                         /* Preemption is on, but a context switch should
2815:FreeRTOS/Source/tasks.c ****                          * only be performed if the unblocked task's
2816:FreeRTOS/Source/tasks.c ****                          * priority is higher than the currently executing
2817:FreeRTOS/Source/tasks.c ****                          * task.
2818:FreeRTOS/Source/tasks.c ****                          * The case of equal priority tasks sharing
2819:FreeRTOS/Source/tasks.c ****                          * processing time (which happens when both
2820:FreeRTOS/Source/tasks.c ****                          * preemption and time slicing are on) is
2821:FreeRTOS/Source/tasks.c ****                          * handled below.*/
2822:FreeRTOS/Source/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2823:FreeRTOS/Source/tasks.c ****                         {
2824:FreeRTOS/Source/tasks.c ****                             xSwitchRequired = pdTRUE;
2825:FreeRTOS/Source/tasks.c ****                         }
2826:FreeRTOS/Source/tasks.c ****                         else
2827:FreeRTOS/Source/tasks.c ****                         {
2828:FreeRTOS/Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2829:FreeRTOS/Source/tasks.c ****                         }
2830:FreeRTOS/Source/tasks.c ****                     }
2831:FreeRTOS/Source/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2832:FreeRTOS/Source/tasks.c ****                 }
2833:FreeRTOS/Source/tasks.c ****             }
2834:FreeRTOS/Source/tasks.c ****         }
2835:FreeRTOS/Source/tasks.c **** 
2836:FreeRTOS/Source/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2837:FreeRTOS/Source/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2838:FreeRTOS/Source/tasks.c ****          * writer has not explicitly turned time slicing off. */
2839:FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2840:FreeRTOS/Source/tasks.c ****         {
2841:FreeRTOS/Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2842:FreeRTOS/Source/tasks.c ****             {
2843:FreeRTOS/Source/tasks.c ****                 xSwitchRequired = pdTRUE;
2844:FreeRTOS/Source/tasks.c ****             }
2845:FreeRTOS/Source/tasks.c ****             else
2846:FreeRTOS/Source/tasks.c ****             {
2847:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2848:FreeRTOS/Source/tasks.c ****             }
2849:FreeRTOS/Source/tasks.c ****         }
2850:FreeRTOS/Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2851:FreeRTOS/Source/tasks.c **** 
2852:FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2853:FreeRTOS/Source/tasks.c ****         {
2854:FreeRTOS/Source/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2855:FreeRTOS/Source/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2856:FreeRTOS/Source/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2857:FreeRTOS/Source/tasks.c ****             {
2858:FreeRTOS/Source/tasks.c ****                 vApplicationTickHook();
2859:FreeRTOS/Source/tasks.c ****             }
2860:FreeRTOS/Source/tasks.c ****             else
2861:FreeRTOS/Source/tasks.c ****             {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 57


2862:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2863:FreeRTOS/Source/tasks.c ****             }
2864:FreeRTOS/Source/tasks.c ****         }
2865:FreeRTOS/Source/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2866:FreeRTOS/Source/tasks.c **** 
2867:FreeRTOS/Source/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2868:FreeRTOS/Source/tasks.c ****         {
2869:FreeRTOS/Source/tasks.c ****             if( xYieldPending != pdFALSE )
2870:FreeRTOS/Source/tasks.c ****             {
2871:FreeRTOS/Source/tasks.c ****                 xSwitchRequired = pdTRUE;
2872:FreeRTOS/Source/tasks.c ****             }
2873:FreeRTOS/Source/tasks.c ****             else
2874:FreeRTOS/Source/tasks.c ****             {
2875:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2876:FreeRTOS/Source/tasks.c ****             }
2877:FreeRTOS/Source/tasks.c ****         }
2878:FreeRTOS/Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
2879:FreeRTOS/Source/tasks.c ****     }
2880:FreeRTOS/Source/tasks.c ****     else
2881:FreeRTOS/Source/tasks.c ****     {
2882:FreeRTOS/Source/tasks.c ****         ++xPendedTicks;
2883:FreeRTOS/Source/tasks.c **** 
2884:FreeRTOS/Source/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2885:FreeRTOS/Source/tasks.c ****          * scheduler is locked. */
2886:FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2887:FreeRTOS/Source/tasks.c ****         {
2888:FreeRTOS/Source/tasks.c ****             vApplicationTickHook();
2889:FreeRTOS/Source/tasks.c ****         }
2890:FreeRTOS/Source/tasks.c ****         #endif
2891:FreeRTOS/Source/tasks.c ****     }
2892:FreeRTOS/Source/tasks.c **** 
2893:FreeRTOS/Source/tasks.c ****     return xSwitchRequired;
2894:FreeRTOS/Source/tasks.c **** }
2895:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2896:FreeRTOS/Source/tasks.c **** 
2897:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2898:FreeRTOS/Source/tasks.c **** 
2899:FreeRTOS/Source/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2900:FreeRTOS/Source/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2901:FreeRTOS/Source/tasks.c ****     {
2902:FreeRTOS/Source/tasks.c ****         TCB_t * xTCB;
2903:FreeRTOS/Source/tasks.c **** 
2904:FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2905:FreeRTOS/Source/tasks.c ****          * getting set. */
2906:FreeRTOS/Source/tasks.c ****         if( xTask == NULL )
2907:FreeRTOS/Source/tasks.c ****         {
2908:FreeRTOS/Source/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2909:FreeRTOS/Source/tasks.c ****         }
2910:FreeRTOS/Source/tasks.c ****         else
2911:FreeRTOS/Source/tasks.c ****         {
2912:FreeRTOS/Source/tasks.c ****             xTCB = xTask;
2913:FreeRTOS/Source/tasks.c ****         }
2914:FreeRTOS/Source/tasks.c **** 
2915:FreeRTOS/Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2916:FreeRTOS/Source/tasks.c ****          * the value can be accessed from an interrupt. */
2917:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
2918:FreeRTOS/Source/tasks.c ****         {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 58


2919:FreeRTOS/Source/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2920:FreeRTOS/Source/tasks.c ****         }
2921:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
2922:FreeRTOS/Source/tasks.c ****     }
2923:FreeRTOS/Source/tasks.c **** 
2924:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2925:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2926:FreeRTOS/Source/tasks.c **** 
2927:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2928:FreeRTOS/Source/tasks.c **** 
2929:FreeRTOS/Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2930:FreeRTOS/Source/tasks.c ****     {
2931:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
2932:FreeRTOS/Source/tasks.c ****         TaskHookFunction_t xReturn;
2933:FreeRTOS/Source/tasks.c **** 
2934:FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2935:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2936:FreeRTOS/Source/tasks.c **** 
2937:FreeRTOS/Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2938:FreeRTOS/Source/tasks.c ****          * the value can be accessed from an interrupt. */
2939:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
2940:FreeRTOS/Source/tasks.c ****         {
2941:FreeRTOS/Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2942:FreeRTOS/Source/tasks.c ****         }
2943:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
2944:FreeRTOS/Source/tasks.c **** 
2945:FreeRTOS/Source/tasks.c ****         return xReturn;
2946:FreeRTOS/Source/tasks.c ****     }
2947:FreeRTOS/Source/tasks.c **** 
2948:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2949:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS/Source/tasks.c **** 
2951:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2952:FreeRTOS/Source/tasks.c **** 
2953:FreeRTOS/Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2954:FreeRTOS/Source/tasks.c ****     {
2955:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
2956:FreeRTOS/Source/tasks.c ****         TaskHookFunction_t xReturn;
2957:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2958:FreeRTOS/Source/tasks.c **** 
2959:FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2960:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2961:FreeRTOS/Source/tasks.c **** 
2962:FreeRTOS/Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2963:FreeRTOS/Source/tasks.c ****          * the value can be accessed from an interrupt. */
2964:FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2965:FreeRTOS/Source/tasks.c ****         {
2966:FreeRTOS/Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2967:FreeRTOS/Source/tasks.c ****         }
2968:FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2969:FreeRTOS/Source/tasks.c **** 
2970:FreeRTOS/Source/tasks.c ****         return xReturn;
2971:FreeRTOS/Source/tasks.c ****     }
2972:FreeRTOS/Source/tasks.c **** 
2973:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2974:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2975:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 59


2976:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2977:FreeRTOS/Source/tasks.c **** 
2978:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2979:FreeRTOS/Source/tasks.c ****                                              void * pvParameter )
2980:FreeRTOS/Source/tasks.c ****     {
2981:FreeRTOS/Source/tasks.c ****         TCB_t * xTCB;
2982:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
2983:FreeRTOS/Source/tasks.c **** 
2984:FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2985:FreeRTOS/Source/tasks.c ****         if( xTask == NULL )
2986:FreeRTOS/Source/tasks.c ****         {
2987:FreeRTOS/Source/tasks.c ****             xTCB = pxCurrentTCB;
2988:FreeRTOS/Source/tasks.c ****         }
2989:FreeRTOS/Source/tasks.c ****         else
2990:FreeRTOS/Source/tasks.c ****         {
2991:FreeRTOS/Source/tasks.c ****             xTCB = xTask;
2992:FreeRTOS/Source/tasks.c ****         }
2993:FreeRTOS/Source/tasks.c **** 
2994:FreeRTOS/Source/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2995:FreeRTOS/Source/tasks.c ****         {
2996:FreeRTOS/Source/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2997:FreeRTOS/Source/tasks.c ****         }
2998:FreeRTOS/Source/tasks.c ****         else
2999:FreeRTOS/Source/tasks.c ****         {
3000:FreeRTOS/Source/tasks.c ****             xReturn = pdFAIL;
3001:FreeRTOS/Source/tasks.c ****         }
3002:FreeRTOS/Source/tasks.c **** 
3003:FreeRTOS/Source/tasks.c ****         return xReturn;
3004:FreeRTOS/Source/tasks.c ****     }
3005:FreeRTOS/Source/tasks.c **** 
3006:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3007:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3008:FreeRTOS/Source/tasks.c **** 
3009:FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
3010:FreeRTOS/Source/tasks.c **** {
3011:FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3012:FreeRTOS/Source/tasks.c ****     {
3013:FreeRTOS/Source/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3014:FreeRTOS/Source/tasks.c ****          * switch. */
3015:FreeRTOS/Source/tasks.c ****         xYieldPending = pdTRUE;
3016:FreeRTOS/Source/tasks.c ****     }
3017:FreeRTOS/Source/tasks.c ****     else
3018:FreeRTOS/Source/tasks.c ****     {
3019:FreeRTOS/Source/tasks.c ****         xYieldPending = pdFALSE;
3020:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_OUT();
3021:FreeRTOS/Source/tasks.c **** 
3022:FreeRTOS/Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3023:FreeRTOS/Source/tasks.c ****         {
3024:FreeRTOS/Source/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3025:FreeRTOS/Source/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3026:FreeRTOS/Source/tasks.c ****             #else
3027:FreeRTOS/Source/tasks.c ****                 ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3028:FreeRTOS/Source/tasks.c ****             #endif
3029:FreeRTOS/Source/tasks.c **** 
3030:FreeRTOS/Source/tasks.c ****             /* Add the amount of time the task has been running to the
3031:FreeRTOS/Source/tasks.c ****              * accumulated time so far.  The time the task started running was
3032:FreeRTOS/Source/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 60


3033:FreeRTOS/Source/tasks.c ****              * protection here so count values are only valid until the timer
3034:FreeRTOS/Source/tasks.c ****              * overflows.  The guard against negative values is to protect
3035:FreeRTOS/Source/tasks.c ****              * against suspect run time stat counter implementations - which
3036:FreeRTOS/Source/tasks.c ****              * are provided by the application, not the kernel. */
3037:FreeRTOS/Source/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
3038:FreeRTOS/Source/tasks.c ****             {
3039:FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3040:FreeRTOS/Source/tasks.c ****             }
3041:FreeRTOS/Source/tasks.c ****             else
3042:FreeRTOS/Source/tasks.c ****             {
3043:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3044:FreeRTOS/Source/tasks.c ****             }
3045:FreeRTOS/Source/tasks.c **** 
3046:FreeRTOS/Source/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3047:FreeRTOS/Source/tasks.c ****         }
3048:FreeRTOS/Source/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3049:FreeRTOS/Source/tasks.c **** 
3050:FreeRTOS/Source/tasks.c ****         /* Check for stack overflow, if configured. */
3051:FreeRTOS/Source/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3052:FreeRTOS/Source/tasks.c **** 
3053:FreeRTOS/Source/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3054:FreeRTOS/Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3055:FreeRTOS/Source/tasks.c ****         {
3056:FreeRTOS/Source/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3057:FreeRTOS/Source/tasks.c ****         }
3058:FreeRTOS/Source/tasks.c ****         #endif
3059:FreeRTOS/Source/tasks.c **** 
3060:FreeRTOS/Source/tasks.c ****         /* Select a new task to run using either the generic C or port
3061:FreeRTOS/Source/tasks.c ****          * optimised asm code. */
3062:FreeRTOS/Source/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3063:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
3064:FreeRTOS/Source/tasks.c **** 
3065:FreeRTOS/Source/tasks.c ****         /* After the new task is switched in, update the global errno. */
3066:FreeRTOS/Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:FreeRTOS/Source/tasks.c ****         {
3068:FreeRTOS/Source/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3069:FreeRTOS/Source/tasks.c ****         }
3070:FreeRTOS/Source/tasks.c ****         #endif
3071:FreeRTOS/Source/tasks.c **** 
3072:FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3073:FreeRTOS/Source/tasks.c ****         {
3074:FreeRTOS/Source/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3075:FreeRTOS/Source/tasks.c ****              * Block specific to this task. */
3076:FreeRTOS/Source/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3077:FreeRTOS/Source/tasks.c ****         }
3078:FreeRTOS/Source/tasks.c ****         #endif
3079:FreeRTOS/Source/tasks.c ****     }
3080:FreeRTOS/Source/tasks.c **** }
3081:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3082:FreeRTOS/Source/tasks.c **** 
3083:FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3084:FreeRTOS/Source/tasks.c ****                             const TickType_t xTicksToWait )
3085:FreeRTOS/Source/tasks.c **** {
3086:FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
3087:FreeRTOS/Source/tasks.c **** 
3088:FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3089:FreeRTOS/Source/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 61


3090:FreeRTOS/Source/tasks.c **** 
3091:FreeRTOS/Source/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3092:FreeRTOS/Source/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3093:FreeRTOS/Source/tasks.c ****      * is the first to be woken by the event.
3094:FreeRTOS/Source/tasks.c ****      *
3095:FreeRTOS/Source/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3096:FreeRTOS/Source/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3097:FreeRTOS/Source/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3098:FreeRTOS/Source/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3099:FreeRTOS/Source/tasks.c ****      *
3100:FreeRTOS/Source/tasks.c ****      * The queue that contains the event list is locked, preventing
3101:FreeRTOS/Source/tasks.c ****      * simultaneous access from interrupts. */
3102:FreeRTOS/Source/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3103:FreeRTOS/Source/tasks.c **** 
3104:FreeRTOS/Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3105:FreeRTOS/Source/tasks.c **** }
3106:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3107:FreeRTOS/Source/tasks.c **** 
3108:FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3109:FreeRTOS/Source/tasks.c ****                                      const TickType_t xItemValue,
3110:FreeRTOS/Source/tasks.c ****                                      const TickType_t xTicksToWait )
3111:FreeRTOS/Source/tasks.c **** {
3112:FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
3113:FreeRTOS/Source/tasks.c **** 
3114:FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3115:FreeRTOS/Source/tasks.c ****      * the event groups implementation. */
3116:FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3117:FreeRTOS/Source/tasks.c **** 
3118:FreeRTOS/Source/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3119:FreeRTOS/Source/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3120:FreeRTOS/Source/tasks.c ****      * task that is not in the Blocked state. */
3121:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3122:FreeRTOS/Source/tasks.c **** 
3123:FreeRTOS/Source/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3124:FreeRTOS/Source/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3125:FreeRTOS/Source/tasks.c ****      * event group implementation - and interrupts don't access event groups
3126:FreeRTOS/Source/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3127:FreeRTOS/Source/tasks.c ****      * the task level). */
3128:FreeRTOS/Source/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3129:FreeRTOS/Source/tasks.c **** 
3130:FreeRTOS/Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3131:FreeRTOS/Source/tasks.c **** }
3132:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3133:FreeRTOS/Source/tasks.c **** 
3134:FreeRTOS/Source/tasks.c **** #if ( configUSE_TIMERS == 1 )
3135:FreeRTOS/Source/tasks.c **** 
3136:FreeRTOS/Source/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3137:FreeRTOS/Source/tasks.c ****                                           TickType_t xTicksToWait,
3138:FreeRTOS/Source/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3139:FreeRTOS/Source/tasks.c ****     {
3140:FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
3141:FreeRTOS/Source/tasks.c **** 
3142:FreeRTOS/Source/tasks.c ****         /* This function should not be called by application code hence the
3143:FreeRTOS/Source/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3144:FreeRTOS/Source/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3145:FreeRTOS/Source/tasks.c ****          * it should be called with the scheduler suspended. */
3146:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 62


3147:FreeRTOS/Source/tasks.c **** 
3148:FreeRTOS/Source/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3149:FreeRTOS/Source/tasks.c ****          * In this case it is assume that this is the only task that is going to
3150:FreeRTOS/Source/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3151:FreeRTOS/Source/tasks.c ****          * can be used in place of vListInsert. */
3152:FreeRTOS/Source/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3153:FreeRTOS/Source/tasks.c **** 
3154:FreeRTOS/Source/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3155:FreeRTOS/Source/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3156:FreeRTOS/Source/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3157:FreeRTOS/Source/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3158:FreeRTOS/Source/tasks.c ****         {
3159:FreeRTOS/Source/tasks.c ****             xTicksToWait = portMAX_DELAY;
3160:FreeRTOS/Source/tasks.c ****         }
3161:FreeRTOS/Source/tasks.c **** 
3162:FreeRTOS/Source/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3163:FreeRTOS/Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3164:FreeRTOS/Source/tasks.c ****     }
3165:FreeRTOS/Source/tasks.c **** 
3166:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3167:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:FreeRTOS/Source/tasks.c **** 
3169:FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3170:FreeRTOS/Source/tasks.c **** {
3171:FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3172:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
3173:FreeRTOS/Source/tasks.c **** 
3174:FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3175:FreeRTOS/Source/tasks.c ****      * called from a critical section within an ISR. */
3176:FreeRTOS/Source/tasks.c **** 
3177:FreeRTOS/Source/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3178:FreeRTOS/Source/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3179:FreeRTOS/Source/tasks.c ****      * the delayed list, and add it to the ready list.
3180:FreeRTOS/Source/tasks.c ****      *
3181:FreeRTOS/Source/tasks.c ****      * If an event is for a queue that is locked then this function will never
3182:FreeRTOS/Source/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3183:FreeRTOS/Source/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3184:FreeRTOS/Source/tasks.c ****      *
3185:FreeRTOS/Source/tasks.c ****      * This function assumes that a check has already been made to ensure that
3186:FreeRTOS/Source/tasks.c ****      * pxEventList is not empty. */
3187:FreeRTOS/Source/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3188:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3189:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3190:FreeRTOS/Source/tasks.c **** 
3191:FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3192:FreeRTOS/Source/tasks.c ****     {
3193:FreeRTOS/Source/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3194:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3195:FreeRTOS/Source/tasks.c **** 
3196:FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3197:FreeRTOS/Source/tasks.c ****         {
3198:FreeRTOS/Source/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3199:FreeRTOS/Source/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3200:FreeRTOS/Source/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3201:FreeRTOS/Source/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3202:FreeRTOS/Source/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3203:FreeRTOS/Source/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 63


3204:FreeRTOS/Source/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3205:FreeRTOS/Source/tasks.c ****              * ensure it is updated at the earliest possible time. */
3206:FreeRTOS/Source/tasks.c ****             prvResetNextTaskUnblockTime();
3207:FreeRTOS/Source/tasks.c ****         }
3208:FreeRTOS/Source/tasks.c ****         #endif
3209:FreeRTOS/Source/tasks.c ****     }
3210:FreeRTOS/Source/tasks.c ****     else
3211:FreeRTOS/Source/tasks.c ****     {
3212:FreeRTOS/Source/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3213:FreeRTOS/Source/tasks.c ****          * pending until the scheduler is resumed. */
3214:FreeRTOS/Source/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3215:FreeRTOS/Source/tasks.c ****     }
3216:FreeRTOS/Source/tasks.c **** 
3217:FreeRTOS/Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3218:FreeRTOS/Source/tasks.c ****     {
3219:FreeRTOS/Source/tasks.c ****         /* Return true if the task removed from the event list has a higher
3220:FreeRTOS/Source/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3221:FreeRTOS/Source/tasks.c ****          * it should force a context switch now. */
3222:FreeRTOS/Source/tasks.c ****         xReturn = pdTRUE;
3223:FreeRTOS/Source/tasks.c **** 
3224:FreeRTOS/Source/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3225:FreeRTOS/Source/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3226:FreeRTOS/Source/tasks.c ****         xYieldPending = pdTRUE;
3227:FreeRTOS/Source/tasks.c ****     }
3228:FreeRTOS/Source/tasks.c ****     else
3229:FreeRTOS/Source/tasks.c ****     {
3230:FreeRTOS/Source/tasks.c ****         xReturn = pdFALSE;
3231:FreeRTOS/Source/tasks.c ****     }
3232:FreeRTOS/Source/tasks.c **** 
3233:FreeRTOS/Source/tasks.c ****     return xReturn;
3234:FreeRTOS/Source/tasks.c **** }
3235:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3236:FreeRTOS/Source/tasks.c **** 
3237:FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3238:FreeRTOS/Source/tasks.c ****                                         const TickType_t xItemValue )
3239:FreeRTOS/Source/tasks.c **** {
3240:FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3241:FreeRTOS/Source/tasks.c **** 
3242:FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3243:FreeRTOS/Source/tasks.c ****      * the event flags implementation. */
3244:FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3245:FreeRTOS/Source/tasks.c **** 
3246:FreeRTOS/Source/tasks.c ****     /* Store the new item value in the event list. */
3247:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3248:FreeRTOS/Source/tasks.c **** 
3249:FreeRTOS/Source/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3250:FreeRTOS/Source/tasks.c ****      * event flags. */
3251:FreeRTOS/Source/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3252:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3253:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3254:FreeRTOS/Source/tasks.c **** 
3255:FreeRTOS/Source/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3256:FreeRTOS/Source/tasks.c ****     {
3257:FreeRTOS/Source/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3258:FreeRTOS/Source/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3259:FreeRTOS/Source/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3260:FreeRTOS/Source/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 64


3261:FreeRTOS/Source/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3262:FreeRTOS/Source/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3263:FreeRTOS/Source/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
3264:FreeRTOS/Source/tasks.c ****          * ensure it is updated at the earliest possible time. */
3265:FreeRTOS/Source/tasks.c ****         prvResetNextTaskUnblockTime();
3266:FreeRTOS/Source/tasks.c ****     }
3267:FreeRTOS/Source/tasks.c ****     #endif
3268:FreeRTOS/Source/tasks.c **** 
3269:FreeRTOS/Source/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3270:FreeRTOS/Source/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3271:FreeRTOS/Source/tasks.c ****      * lists. */
3272:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3273:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3274:FreeRTOS/Source/tasks.c **** 
3275:FreeRTOS/Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3276:FreeRTOS/Source/tasks.c ****     {
3277:FreeRTOS/Source/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3278:FreeRTOS/Source/tasks.c ****          * a context switch is required.  This function is called with the
3279:FreeRTOS/Source/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3280:FreeRTOS/Source/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3281:FreeRTOS/Source/tasks.c ****         xYieldPending = pdTRUE;
3282:FreeRTOS/Source/tasks.c ****     }
3283:FreeRTOS/Source/tasks.c **** }
3284:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3285:FreeRTOS/Source/tasks.c **** 
3286:FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3287:FreeRTOS/Source/tasks.c **** {
3288:FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
3289:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
3290:FreeRTOS/Source/tasks.c ****     {
3291:FreeRTOS/Source/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3292:FreeRTOS/Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3293:FreeRTOS/Source/tasks.c ****     }
3294:FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
3295:FreeRTOS/Source/tasks.c **** }
3296:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3297:FreeRTOS/Source/tasks.c **** 
3298:FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3299:FreeRTOS/Source/tasks.c **** {
3300:FreeRTOS/Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
3301:FreeRTOS/Source/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3302:FreeRTOS/Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3303:FreeRTOS/Source/tasks.c **** }
3304:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS/Source/tasks.c **** 
3306:FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3307:FreeRTOS/Source/tasks.c ****                                  TickType_t * const pxTicksToWait )
3308:FreeRTOS/Source/tasks.c **** {
3309:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
3310:FreeRTOS/Source/tasks.c **** 
3311:FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
3312:FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
3313:FreeRTOS/Source/tasks.c **** 
3314:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
3315:FreeRTOS/Source/tasks.c ****     {
3316:FreeRTOS/Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3317:FreeRTOS/Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 65


3318:FreeRTOS/Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3319:FreeRTOS/Source/tasks.c **** 
3320:FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3321:FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3322:FreeRTOS/Source/tasks.c ****             {
3323:FreeRTOS/Source/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3324:FreeRTOS/Source/tasks.c ****                  * but has the same result. */
3325:FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3326:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
3327:FreeRTOS/Source/tasks.c ****             }
3328:FreeRTOS/Source/tasks.c ****             else
3329:FreeRTOS/Source/tasks.c ****         #endif
3330:FreeRTOS/Source/tasks.c **** 
3331:FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3332:FreeRTOS/Source/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3333:FreeRTOS/Source/tasks.c ****             {
3334:FreeRTOS/Source/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3335:FreeRTOS/Source/tasks.c ****                  * specified is the maximum block time then the task should block
3336:FreeRTOS/Source/tasks.c ****                  * indefinitely, and therefore never time out. */
3337:FreeRTOS/Source/tasks.c ****                 xReturn = pdFALSE;
3338:FreeRTOS/Source/tasks.c ****             }
3339:FreeRTOS/Source/tasks.c ****             else
3340:FreeRTOS/Source/tasks.c ****         #endif
3341:FreeRTOS/Source/tasks.c **** 
3342:FreeRTOS/Source/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3343:FreeRTOS/Source/tasks.c ****         {
3344:FreeRTOS/Source/tasks.c ****             /* The tick count is greater than the time at which
3345:FreeRTOS/Source/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3346:FreeRTOS/Source/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3347:FreeRTOS/Source/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3348:FreeRTOS/Source/tasks.c ****              * was called. */
3349:FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
3350:FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3351:FreeRTOS/Source/tasks.c ****         }
3352:FreeRTOS/Source/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3353:FreeRTOS/Source/tasks.c ****         {
3354:FreeRTOS/Source/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3355:FreeRTOS/Source/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3356:FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3357:FreeRTOS/Source/tasks.c ****             xReturn = pdFALSE;
3358:FreeRTOS/Source/tasks.c ****         }
3359:FreeRTOS/Source/tasks.c ****         else
3360:FreeRTOS/Source/tasks.c ****         {
3361:FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3362:FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
3363:FreeRTOS/Source/tasks.c ****         }
3364:FreeRTOS/Source/tasks.c ****     }
3365:FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
3366:FreeRTOS/Source/tasks.c **** 
3367:FreeRTOS/Source/tasks.c ****     return xReturn;
3368:FreeRTOS/Source/tasks.c **** }
3369:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3370:FreeRTOS/Source/tasks.c **** 
3371:FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3372:FreeRTOS/Source/tasks.c **** {
3373:FreeRTOS/Source/tasks.c ****     xYieldPending = pdTRUE;
3374:FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 66


3375:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3376:FreeRTOS/Source/tasks.c **** 
3377:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3378:FreeRTOS/Source/tasks.c **** 
3379:FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3380:FreeRTOS/Source/tasks.c ****     {
3381:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
3382:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
3383:FreeRTOS/Source/tasks.c **** 
3384:FreeRTOS/Source/tasks.c ****         if( xTask != NULL )
3385:FreeRTOS/Source/tasks.c ****         {
3386:FreeRTOS/Source/tasks.c ****             pxTCB = xTask;
3387:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3388:FreeRTOS/Source/tasks.c ****         }
3389:FreeRTOS/Source/tasks.c ****         else
3390:FreeRTOS/Source/tasks.c ****         {
3391:FreeRTOS/Source/tasks.c ****             uxReturn = 0U;
3392:FreeRTOS/Source/tasks.c ****         }
3393:FreeRTOS/Source/tasks.c **** 
3394:FreeRTOS/Source/tasks.c ****         return uxReturn;
3395:FreeRTOS/Source/tasks.c ****     }
3396:FreeRTOS/Source/tasks.c **** 
3397:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3398:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3399:FreeRTOS/Source/tasks.c **** 
3400:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3401:FreeRTOS/Source/tasks.c **** 
3402:FreeRTOS/Source/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3403:FreeRTOS/Source/tasks.c ****                              const UBaseType_t uxHandle )
3404:FreeRTOS/Source/tasks.c ****     {
3405:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3406:FreeRTOS/Source/tasks.c **** 
3407:FreeRTOS/Source/tasks.c ****         if( xTask != NULL )
3408:FreeRTOS/Source/tasks.c ****         {
3409:FreeRTOS/Source/tasks.c ****             pxTCB = xTask;
3410:FreeRTOS/Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3411:FreeRTOS/Source/tasks.c ****         }
3412:FreeRTOS/Source/tasks.c ****     }
3413:FreeRTOS/Source/tasks.c **** 
3414:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3415:FreeRTOS/Source/tasks.c **** 
3416:FreeRTOS/Source/tasks.c **** /*
3417:FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3418:FreeRTOS/Source/tasks.c ****  * The Idle task.
3419:FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3420:FreeRTOS/Source/tasks.c ****  *
3421:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3422:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3423:FreeRTOS/Source/tasks.c ****  *
3424:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3425:FreeRTOS/Source/tasks.c ****  *
3426:FreeRTOS/Source/tasks.c ****  */
3427:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3428:FreeRTOS/Source/tasks.c **** {
3429:FreeRTOS/Source/tasks.c ****     /* Stop warnings. */
3430:FreeRTOS/Source/tasks.c ****     ( void ) pvParameters;
3431:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 67


3432:FreeRTOS/Source/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3433:FreeRTOS/Source/tasks.c ****      * SCHEDULER IS STARTED. **/
3434:FreeRTOS/Source/tasks.c **** 
3435:FreeRTOS/Source/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3436:FreeRTOS/Source/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3437:FreeRTOS/Source/tasks.c ****      * any. */
3438:FreeRTOS/Source/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3439:FreeRTOS/Source/tasks.c **** 
3440:FreeRTOS/Source/tasks.c ****     for( ; ; )
3441:FreeRTOS/Source/tasks.c ****     {
3442:FreeRTOS/Source/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3443:FreeRTOS/Source/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3444:FreeRTOS/Source/tasks.c ****         prvCheckTasksWaitingTermination();
3445:FreeRTOS/Source/tasks.c **** 
3446:FreeRTOS/Source/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3447:FreeRTOS/Source/tasks.c ****         {
3448:FreeRTOS/Source/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
3449:FreeRTOS/Source/tasks.c ****              * see if any other task has become available.  If we are using
3450:FreeRTOS/Source/tasks.c ****              * preemption we don't need to do this as any task becoming available
3451:FreeRTOS/Source/tasks.c ****              * will automatically get the processor anyway. */
3452:FreeRTOS/Source/tasks.c ****             taskYIELD();
3453:FreeRTOS/Source/tasks.c ****         }
3454:FreeRTOS/Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
3455:FreeRTOS/Source/tasks.c **** 
3456:FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3457:FreeRTOS/Source/tasks.c ****         {
3458:FreeRTOS/Source/tasks.c ****             /* When using preemption tasks of equal priority will be
3459:FreeRTOS/Source/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3460:FreeRTOS/Source/tasks.c ****              * to run then the idle task should yield before the end of the
3461:FreeRTOS/Source/tasks.c ****              * timeslice.
3462:FreeRTOS/Source/tasks.c ****              *
3463:FreeRTOS/Source/tasks.c ****              * A critical region is not required here as we are just reading from
3464:FreeRTOS/Source/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3465:FreeRTOS/Source/tasks.c ****              * the ready list at the idle priority contains more than one task
3466:FreeRTOS/Source/tasks.c ****              * then a task other than the idle task is ready to execute. */
3467:FreeRTOS/Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3468:FreeRTOS/Source/tasks.c ****             {
3469:FreeRTOS/Source/tasks.c ****                 taskYIELD();
3470:FreeRTOS/Source/tasks.c ****             }
3471:FreeRTOS/Source/tasks.c ****             else
3472:FreeRTOS/Source/tasks.c ****             {
3473:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3474:FreeRTOS/Source/tasks.c ****             }
3475:FreeRTOS/Source/tasks.c ****         }
3476:FreeRTOS/Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3477:FreeRTOS/Source/tasks.c **** 
3478:FreeRTOS/Source/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3479:FreeRTOS/Source/tasks.c ****         {
3480:FreeRTOS/Source/tasks.c ****             extern void vApplicationIdleHook( void );
3481:FreeRTOS/Source/tasks.c **** 
3482:FreeRTOS/Source/tasks.c ****             /* Call the user defined function from within the idle task.  This
3483:FreeRTOS/Source/tasks.c ****              * allows the application designer to add background functionality
3484:FreeRTOS/Source/tasks.c ****              * without the overhead of a separate task.
3485:FreeRTOS/Source/tasks.c ****              * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3486:FreeRTOS/Source/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
3487:FreeRTOS/Source/tasks.c ****             vApplicationIdleHook();
3488:FreeRTOS/Source/tasks.c ****         }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 68


3489:FreeRTOS/Source/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3490:FreeRTOS/Source/tasks.c **** 
3491:FreeRTOS/Source/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3492:FreeRTOS/Source/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3493:FreeRTOS/Source/tasks.c ****          * user defined low power mode  implementations require
3494:FreeRTOS/Source/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3495:FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3496:FreeRTOS/Source/tasks.c ****         {
3497:FreeRTOS/Source/tasks.c ****             TickType_t xExpectedIdleTime;
3498:FreeRTOS/Source/tasks.c **** 
3499:FreeRTOS/Source/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3500:FreeRTOS/Source/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3501:FreeRTOS/Source/tasks.c ****              * test of the expected idle time is performed without the
3502:FreeRTOS/Source/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3503:FreeRTOS/Source/tasks.c ****              * valid. */
3504:FreeRTOS/Source/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3505:FreeRTOS/Source/tasks.c **** 
3506:FreeRTOS/Source/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3507:FreeRTOS/Source/tasks.c ****             {
3508:FreeRTOS/Source/tasks.c ****                 vTaskSuspendAll();
3509:FreeRTOS/Source/tasks.c ****                 {
3510:FreeRTOS/Source/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3511:FreeRTOS/Source/tasks.c ****                      * time can be sampled again, and this time its value can
3512:FreeRTOS/Source/tasks.c ****                      * be used. */
3513:FreeRTOS/Source/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3514:FreeRTOS/Source/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3515:FreeRTOS/Source/tasks.c **** 
3516:FreeRTOS/Source/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3517:FreeRTOS/Source/tasks.c ****                      * if the application does not want
3518:FreeRTOS/Source/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3519:FreeRTOS/Source/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3520:FreeRTOS/Source/tasks.c **** 
3521:FreeRTOS/Source/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3522:FreeRTOS/Source/tasks.c ****                     {
3523:FreeRTOS/Source/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3524:FreeRTOS/Source/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3525:FreeRTOS/Source/tasks.c ****                         traceLOW_POWER_IDLE_END();
3526:FreeRTOS/Source/tasks.c ****                     }
3527:FreeRTOS/Source/tasks.c ****                     else
3528:FreeRTOS/Source/tasks.c ****                     {
3529:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3530:FreeRTOS/Source/tasks.c ****                     }
3531:FreeRTOS/Source/tasks.c ****                 }
3532:FreeRTOS/Source/tasks.c ****                 ( void ) xTaskResumeAll();
3533:FreeRTOS/Source/tasks.c ****             }
3534:FreeRTOS/Source/tasks.c ****             else
3535:FreeRTOS/Source/tasks.c ****             {
3536:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3537:FreeRTOS/Source/tasks.c ****             }
3538:FreeRTOS/Source/tasks.c ****         }
3539:FreeRTOS/Source/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3540:FreeRTOS/Source/tasks.c ****     }
3541:FreeRTOS/Source/tasks.c **** }
3542:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3543:FreeRTOS/Source/tasks.c **** 
3544:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3545:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 69


3546:FreeRTOS/Source/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3547:FreeRTOS/Source/tasks.c ****     {
3548:FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3549:FreeRTOS/Source/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3550:FreeRTOS/Source/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
3551:FreeRTOS/Source/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3552:FreeRTOS/Source/tasks.c **** 
3553:FreeRTOS/Source/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3554:FreeRTOS/Source/tasks.c **** 
3555:FreeRTOS/Source/tasks.c ****         /* This function must be called from a critical section. */
3556:FreeRTOS/Source/tasks.c **** 
3557:FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3558:FreeRTOS/Source/tasks.c ****         {
3559:FreeRTOS/Source/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3560:FreeRTOS/Source/tasks.c ****             eReturn = eAbortSleep;
3561:FreeRTOS/Source/tasks.c ****         }
3562:FreeRTOS/Source/tasks.c ****         else if( xYieldPending != pdFALSE )
3563:FreeRTOS/Source/tasks.c ****         {
3564:FreeRTOS/Source/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3565:FreeRTOS/Source/tasks.c ****             eReturn = eAbortSleep;
3566:FreeRTOS/Source/tasks.c ****         }
3567:FreeRTOS/Source/tasks.c ****         else if( xPendedTicks != 0 )
3568:FreeRTOS/Source/tasks.c ****         {
3569:FreeRTOS/Source/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3570:FreeRTOS/Source/tasks.c ****              * because the scheduler is suspended. */
3571:FreeRTOS/Source/tasks.c ****             eReturn = eAbortSleep;
3572:FreeRTOS/Source/tasks.c ****         }
3573:FreeRTOS/Source/tasks.c **** 
3574:FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3575:FreeRTOS/Source/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3576:FreeRTOS/Source/tasks.c ****             {
3577:FreeRTOS/Source/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3578:FreeRTOS/Source/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3579:FreeRTOS/Source/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
3580:FreeRTOS/Source/tasks.c ****                  * interrupts. */
3581:FreeRTOS/Source/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3582:FreeRTOS/Source/tasks.c ****             }
3583:FreeRTOS/Source/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3584:FreeRTOS/Source/tasks.c ****         else
3585:FreeRTOS/Source/tasks.c ****         {
3586:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3587:FreeRTOS/Source/tasks.c ****         }
3588:FreeRTOS/Source/tasks.c **** 
3589:FreeRTOS/Source/tasks.c ****         return eReturn;
3590:FreeRTOS/Source/tasks.c ****     }
3591:FreeRTOS/Source/tasks.c **** 
3592:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3593:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3594:FreeRTOS/Source/tasks.c **** 
3595:FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3596:FreeRTOS/Source/tasks.c **** 
3597:FreeRTOS/Source/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3598:FreeRTOS/Source/tasks.c ****                                             BaseType_t xIndex,
3599:FreeRTOS/Source/tasks.c ****                                             void * pvValue )
3600:FreeRTOS/Source/tasks.c ****     {
3601:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3602:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 70


3603:FreeRTOS/Source/tasks.c ****         if( ( xIndex >= 0 ) &&
3604:FreeRTOS/Source/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3605:FreeRTOS/Source/tasks.c ****         {
3606:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3607:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB != NULL );
3608:FreeRTOS/Source/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3609:FreeRTOS/Source/tasks.c ****         }
3610:FreeRTOS/Source/tasks.c ****     }
3611:FreeRTOS/Source/tasks.c **** 
3612:FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3613:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3614:FreeRTOS/Source/tasks.c **** 
3615:FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3616:FreeRTOS/Source/tasks.c **** 
3617:FreeRTOS/Source/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3618:FreeRTOS/Source/tasks.c ****                                                BaseType_t xIndex )
3619:FreeRTOS/Source/tasks.c ****     {
3620:FreeRTOS/Source/tasks.c ****         void * pvReturn = NULL;
3621:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3622:FreeRTOS/Source/tasks.c **** 
3623:FreeRTOS/Source/tasks.c ****         if( ( xIndex >= 0 ) &&
3624:FreeRTOS/Source/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3625:FreeRTOS/Source/tasks.c ****         {
3626:FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3627:FreeRTOS/Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3628:FreeRTOS/Source/tasks.c ****         }
3629:FreeRTOS/Source/tasks.c ****         else
3630:FreeRTOS/Source/tasks.c ****         {
3631:FreeRTOS/Source/tasks.c ****             pvReturn = NULL;
3632:FreeRTOS/Source/tasks.c ****         }
3633:FreeRTOS/Source/tasks.c **** 
3634:FreeRTOS/Source/tasks.c ****         return pvReturn;
3635:FreeRTOS/Source/tasks.c ****     }
3636:FreeRTOS/Source/tasks.c **** 
3637:FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3638:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:FreeRTOS/Source/tasks.c **** 
3640:FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3641:FreeRTOS/Source/tasks.c **** 
3642:FreeRTOS/Source/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3643:FreeRTOS/Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3644:FreeRTOS/Source/tasks.c ****     {
3645:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3646:FreeRTOS/Source/tasks.c **** 
3647:FreeRTOS/Source/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3648:FreeRTOS/Source/tasks.c ****          * the calling task. */
3649:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3650:FreeRTOS/Source/tasks.c **** 
3651:FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3652:FreeRTOS/Source/tasks.c ****     }
3653:FreeRTOS/Source/tasks.c **** 
3654:FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3655:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3656:FreeRTOS/Source/tasks.c **** 
3657:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3658:FreeRTOS/Source/tasks.c **** {
3659:FreeRTOS/Source/tasks.c ****     UBaseType_t uxPriority;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 71


3660:FreeRTOS/Source/tasks.c **** 
3661:FreeRTOS/Source/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3662:FreeRTOS/Source/tasks.c ****     {
3663:FreeRTOS/Source/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3664:FreeRTOS/Source/tasks.c ****     }
3665:FreeRTOS/Source/tasks.c **** 
3666:FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3667:FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3668:FreeRTOS/Source/tasks.c ****     vListInitialise( &xPendingReadyList );
3669:FreeRTOS/Source/tasks.c **** 
3670:FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3671:FreeRTOS/Source/tasks.c ****     {
3672:FreeRTOS/Source/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
3673:FreeRTOS/Source/tasks.c ****     }
3674:FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3675:FreeRTOS/Source/tasks.c **** 
3676:FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3677:FreeRTOS/Source/tasks.c ****     {
3678:FreeRTOS/Source/tasks.c ****         vListInitialise( &xSuspendedTaskList );
3679:FreeRTOS/Source/tasks.c ****     }
3680:FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3681:FreeRTOS/Source/tasks.c **** 
3682:FreeRTOS/Source/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3683:FreeRTOS/Source/tasks.c ****      * using list2. */
3684:FreeRTOS/Source/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3685:FreeRTOS/Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3686:FreeRTOS/Source/tasks.c **** }
3687:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3688:FreeRTOS/Source/tasks.c **** 
3689:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3690:FreeRTOS/Source/tasks.c **** {
3691:FreeRTOS/Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3692:FreeRTOS/Source/tasks.c **** 
3693:FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3694:FreeRTOS/Source/tasks.c ****     {
3695:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3696:FreeRTOS/Source/tasks.c **** 
3697:FreeRTOS/Source/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3698:FreeRTOS/Source/tasks.c ****          * being called too often in the idle task. */
3699:FreeRTOS/Source/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3700:FreeRTOS/Source/tasks.c ****         {
3701:FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
3702:FreeRTOS/Source/tasks.c ****             {
3703:FreeRTOS/Source/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
3704:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3705:FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
3706:FreeRTOS/Source/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
3707:FreeRTOS/Source/tasks.c ****             }
3708:FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
3709:FreeRTOS/Source/tasks.c **** 
3710:FreeRTOS/Source/tasks.c ****             prvDeleteTCB( pxTCB );
3711:FreeRTOS/Source/tasks.c ****         }
3712:FreeRTOS/Source/tasks.c ****     }
3713:FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3714:FreeRTOS/Source/tasks.c **** }
3715:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3716:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 72


3717:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3718:FreeRTOS/Source/tasks.c **** 
3719:FreeRTOS/Source/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3720:FreeRTOS/Source/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3721:FreeRTOS/Source/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3722:FreeRTOS/Source/tasks.c ****                        eTaskState eState )
3723:FreeRTOS/Source/tasks.c ****     {
3724:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3725:FreeRTOS/Source/tasks.c **** 
3726:FreeRTOS/Source/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3727:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3728:FreeRTOS/Source/tasks.c **** 
3729:FreeRTOS/Source/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3730:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3731:FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3732:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3733:FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3734:FreeRTOS/Source/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3735:FreeRTOS/Source/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3736:FreeRTOS/Source/tasks.c ****         #endif
3737:FreeRTOS/Source/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3738:FreeRTOS/Source/tasks.c **** 
3739:FreeRTOS/Source/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3740:FreeRTOS/Source/tasks.c ****         {
3741:FreeRTOS/Source/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3742:FreeRTOS/Source/tasks.c ****         }
3743:FreeRTOS/Source/tasks.c ****         #else
3744:FreeRTOS/Source/tasks.c ****         {
3745:FreeRTOS/Source/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3746:FreeRTOS/Source/tasks.c ****         }
3747:FreeRTOS/Source/tasks.c ****         #endif
3748:FreeRTOS/Source/tasks.c **** 
3749:FreeRTOS/Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3750:FreeRTOS/Source/tasks.c ****         {
3751:FreeRTOS/Source/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3752:FreeRTOS/Source/tasks.c ****         }
3753:FreeRTOS/Source/tasks.c ****         #else
3754:FreeRTOS/Source/tasks.c ****         {
3755:FreeRTOS/Source/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3756:FreeRTOS/Source/tasks.c ****         }
3757:FreeRTOS/Source/tasks.c ****         #endif
3758:FreeRTOS/Source/tasks.c **** 
3759:FreeRTOS/Source/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3760:FreeRTOS/Source/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3761:FreeRTOS/Source/tasks.c ****          * state is just set to whatever is passed in. */
3762:FreeRTOS/Source/tasks.c ****         if( eState != eInvalid )
3763:FreeRTOS/Source/tasks.c ****         {
3764:FreeRTOS/Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
3765:FreeRTOS/Source/tasks.c ****             {
3766:FreeRTOS/Source/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3767:FreeRTOS/Source/tasks.c ****             }
3768:FreeRTOS/Source/tasks.c ****             else
3769:FreeRTOS/Source/tasks.c ****             {
3770:FreeRTOS/Source/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3771:FreeRTOS/Source/tasks.c **** 
3772:FreeRTOS/Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3773:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 73


3774:FreeRTOS/Source/tasks.c ****                     /* If the task is in the suspended list then there is a
3775:FreeRTOS/Source/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3776:FreeRTOS/Source/tasks.c ****                      *  it should be reported as being in the Blocked state. */
3777:FreeRTOS/Source/tasks.c ****                     if( eState == eSuspended )
3778:FreeRTOS/Source/tasks.c ****                     {
3779:FreeRTOS/Source/tasks.c ****                         vTaskSuspendAll();
3780:FreeRTOS/Source/tasks.c ****                         {
3781:FreeRTOS/Source/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3782:FreeRTOS/Source/tasks.c ****                             {
3783:FreeRTOS/Source/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
3784:FreeRTOS/Source/tasks.c ****                             }
3785:FreeRTOS/Source/tasks.c ****                         }
3786:FreeRTOS/Source/tasks.c ****                         ( void ) xTaskResumeAll();
3787:FreeRTOS/Source/tasks.c ****                     }
3788:FreeRTOS/Source/tasks.c ****                 }
3789:FreeRTOS/Source/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3790:FreeRTOS/Source/tasks.c ****             }
3791:FreeRTOS/Source/tasks.c ****         }
3792:FreeRTOS/Source/tasks.c ****         else
3793:FreeRTOS/Source/tasks.c ****         {
3794:FreeRTOS/Source/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3795:FreeRTOS/Source/tasks.c ****         }
3796:FreeRTOS/Source/tasks.c **** 
3797:FreeRTOS/Source/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3798:FreeRTOS/Source/tasks.c ****          * parameter is provided to allow it to be skipped. */
3799:FreeRTOS/Source/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3800:FreeRTOS/Source/tasks.c ****         {
3801:FreeRTOS/Source/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3802:FreeRTOS/Source/tasks.c ****             {
3803:FreeRTOS/Source/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3804:FreeRTOS/Source/tasks.c ****             }
3805:FreeRTOS/Source/tasks.c ****             #else
3806:FreeRTOS/Source/tasks.c ****             {
3807:FreeRTOS/Source/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3808:FreeRTOS/Source/tasks.c ****             }
3809:FreeRTOS/Source/tasks.c ****             #endif
3810:FreeRTOS/Source/tasks.c ****         }
3811:FreeRTOS/Source/tasks.c ****         else
3812:FreeRTOS/Source/tasks.c ****         {
3813:FreeRTOS/Source/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3814:FreeRTOS/Source/tasks.c ****         }
3815:FreeRTOS/Source/tasks.c ****     }
3816:FreeRTOS/Source/tasks.c **** 
3817:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3818:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3819:FreeRTOS/Source/tasks.c **** 
3820:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3821:FreeRTOS/Source/tasks.c **** 
3822:FreeRTOS/Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3823:FreeRTOS/Source/tasks.c ****                                                      List_t * pxList,
3824:FreeRTOS/Source/tasks.c ****                                                      eTaskState eState )
3825:FreeRTOS/Source/tasks.c ****     {
3826:FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3827:FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3828:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0;
3829:FreeRTOS/Source/tasks.c **** 
3830:FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 74


3831:FreeRTOS/Source/tasks.c ****         {
3832:FreeRTOS/Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3833:FreeRTOS/Source/tasks.c **** 
3834:FreeRTOS/Source/tasks.c ****             /* Populate an TaskStatus_t structure within the
3835:FreeRTOS/Source/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3836:FreeRTOS/Source/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3837:FreeRTOS/Source/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3838:FreeRTOS/Source/tasks.c ****             do
3839:FreeRTOS/Source/tasks.c ****             {
3840:FreeRTOS/Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3841:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3842:FreeRTOS/Source/tasks.c ****                 uxTask++;
3843:FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3844:FreeRTOS/Source/tasks.c ****         }
3845:FreeRTOS/Source/tasks.c ****         else
3846:FreeRTOS/Source/tasks.c ****         {
3847:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3848:FreeRTOS/Source/tasks.c ****         }
3849:FreeRTOS/Source/tasks.c **** 
3850:FreeRTOS/Source/tasks.c ****         return uxTask;
3851:FreeRTOS/Source/tasks.c ****     }
3852:FreeRTOS/Source/tasks.c **** 
3853:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3854:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3855:FreeRTOS/Source/tasks.c **** 
3856:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3857:FreeRTOS/Source/tasks.c **** 
3858:FreeRTOS/Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3859:FreeRTOS/Source/tasks.c ****     {
 128              		.loc 1 3859 5 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
3860:FreeRTOS/Source/tasks.c ****         uint32_t ulCount = 0U;
 133              		.loc 1 3860 9 view .LVU31
3861:FreeRTOS/Source/tasks.c **** 
3862:FreeRTOS/Source/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 134              		.loc 1 3862 9 view .LVU32
3860:FreeRTOS/Source/tasks.c ****         uint32_t ulCount = 0U;
 135              		.loc 1 3860 18 is_stmt 0 view .LVU33
 136 0000 0023     		movs	r3, #0
 137              		.loc 1 3862 14 view .LVU34
 138 0002 01E0     		b	.L13
 139              	.LVL10:
 140              	.L14:
3863:FreeRTOS/Source/tasks.c ****         {
3864:FreeRTOS/Source/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 141              		.loc 1 3864 13 is_stmt 1 view .LVU35
 142              		.loc 1 3864 26 is_stmt 0 view .LVU36
 143 0004 0130     		adds	r0, r0, #1
 144              	.LVL11:
3865:FreeRTOS/Source/tasks.c ****             ulCount++;
 145              		.loc 1 3865 13 is_stmt 1 view .LVU37
 146              		.loc 1 3865 20 is_stmt 0 view .LVU38
 147 0006 0133     		adds	r3, r3, #1
 148              	.LVL12:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 75


 149              	.L13:
3862:FreeRTOS/Source/tasks.c ****         {
 150              		.loc 1 3862 30 is_stmt 1 view .LVU39
3862:FreeRTOS/Source/tasks.c ****         {
 151              		.loc 1 3862 16 is_stmt 0 view .LVU40
 152 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
3862:FreeRTOS/Source/tasks.c ****         {
 153              		.loc 1 3862 30 view .LVU41
 154 000a A52A     		cmp	r2, #165
 155 000c FAD0     		beq	.L14
3866:FreeRTOS/Source/tasks.c ****         }
3867:FreeRTOS/Source/tasks.c **** 
3868:FreeRTOS/Source/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 156              		.loc 1 3868 9 is_stmt 1 view .LVU42
 157              	.LVL13:
3869:FreeRTOS/Source/tasks.c **** 
3870:FreeRTOS/Source/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 158              		.loc 1 3870 9 view .LVU43
3871:FreeRTOS/Source/tasks.c ****     }
 159              		.loc 1 3871 5 is_stmt 0 view .LVU44
 160 000e C3F38F00 		ubfx	r0, r3, #2, #16
 161              	.LVL14:
 162              		.loc 1 3871 5 view .LVU45
 163 0012 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE47:
 167              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 168              		.align	1
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 173              	prvResetNextTaskUnblockTime:
 174              	.LFB49:
3872:FreeRTOS/Source/tasks.c **** 
3873:FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3874:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3875:FreeRTOS/Source/tasks.c **** 
3876:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3877:FreeRTOS/Source/tasks.c **** 
3878:FreeRTOS/Source/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3879:FreeRTOS/Source/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3880:FreeRTOS/Source/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3881:FreeRTOS/Source/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3882:FreeRTOS/Source/tasks.c ****  * applications that expect an 8-bit return type. */
3883:FreeRTOS/Source/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3884:FreeRTOS/Source/tasks.c ****     {
3885:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3886:FreeRTOS/Source/tasks.c ****         uint8_t * pucEndOfStack;
3887:FreeRTOS/Source/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3888:FreeRTOS/Source/tasks.c **** 
3889:FreeRTOS/Source/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3890:FreeRTOS/Source/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3891:FreeRTOS/Source/tasks.c ****          * allows the user to determine the return type.  It gets around the
3892:FreeRTOS/Source/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3893:FreeRTOS/Source/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3894:FreeRTOS/Source/tasks.c ****          * type. */
3895:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 76


3896:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3897:FreeRTOS/Source/tasks.c **** 
3898:FreeRTOS/Source/tasks.c ****         #if portSTACK_GROWTH < 0
3899:FreeRTOS/Source/tasks.c ****         {
3900:FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3901:FreeRTOS/Source/tasks.c ****         }
3902:FreeRTOS/Source/tasks.c ****         #else
3903:FreeRTOS/Source/tasks.c ****         {
3904:FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3905:FreeRTOS/Source/tasks.c ****         }
3906:FreeRTOS/Source/tasks.c ****         #endif
3907:FreeRTOS/Source/tasks.c **** 
3908:FreeRTOS/Source/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3909:FreeRTOS/Source/tasks.c **** 
3910:FreeRTOS/Source/tasks.c ****         return uxReturn;
3911:FreeRTOS/Source/tasks.c ****     }
3912:FreeRTOS/Source/tasks.c **** 
3913:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3914:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3915:FreeRTOS/Source/tasks.c **** 
3916:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3917:FreeRTOS/Source/tasks.c **** 
3918:FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3919:FreeRTOS/Source/tasks.c ****     {
3920:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3921:FreeRTOS/Source/tasks.c ****         uint8_t * pucEndOfStack;
3922:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
3923:FreeRTOS/Source/tasks.c **** 
3924:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3925:FreeRTOS/Source/tasks.c **** 
3926:FreeRTOS/Source/tasks.c ****         #if portSTACK_GROWTH < 0
3927:FreeRTOS/Source/tasks.c ****         {
3928:FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3929:FreeRTOS/Source/tasks.c ****         }
3930:FreeRTOS/Source/tasks.c ****         #else
3931:FreeRTOS/Source/tasks.c ****         {
3932:FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3933:FreeRTOS/Source/tasks.c ****         }
3934:FreeRTOS/Source/tasks.c ****         #endif
3935:FreeRTOS/Source/tasks.c **** 
3936:FreeRTOS/Source/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3937:FreeRTOS/Source/tasks.c **** 
3938:FreeRTOS/Source/tasks.c ****         return uxReturn;
3939:FreeRTOS/Source/tasks.c ****     }
3940:FreeRTOS/Source/tasks.c **** 
3941:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3942:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3943:FreeRTOS/Source/tasks.c **** 
3944:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3945:FreeRTOS/Source/tasks.c **** 
3946:FreeRTOS/Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3947:FreeRTOS/Source/tasks.c ****     {
3948:FreeRTOS/Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3949:FreeRTOS/Source/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3950:FreeRTOS/Source/tasks.c ****          * want to allocate and clean RAM statically. */
3951:FreeRTOS/Source/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3952:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 77


3953:FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3954:FreeRTOS/Source/tasks.c ****         {
3955:FreeRTOS/Source/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
3956:FreeRTOS/Source/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3957:FreeRTOS/Source/tasks.c ****         }
3958:FreeRTOS/Source/tasks.c ****         #endif
3959:FreeRTOS/Source/tasks.c **** 
3960:FreeRTOS/Source/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3961:FreeRTOS/Source/tasks.c ****         {
3962:FreeRTOS/Source/tasks.c ****             /* The task can only have been allocated dynamically - free both
3963:FreeRTOS/Source/tasks.c ****              * the stack and TCB. */
3964:FreeRTOS/Source/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
3965:FreeRTOS/Source/tasks.c ****             vPortFree( pxTCB );
3966:FreeRTOS/Source/tasks.c ****         }
3967:FreeRTOS/Source/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3968:FreeRTOS/Source/tasks.c ****         {
3969:FreeRTOS/Source/tasks.c ****             /* The task could have been allocated statically or dynamically, so
3970:FreeRTOS/Source/tasks.c ****              * check what was statically allocated before trying to free the
3971:FreeRTOS/Source/tasks.c ****              * memory. */
3972:FreeRTOS/Source/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3973:FreeRTOS/Source/tasks.c ****             {
3974:FreeRTOS/Source/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
3975:FreeRTOS/Source/tasks.c ****                  * must be freed. */
3976:FreeRTOS/Source/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
3977:FreeRTOS/Source/tasks.c ****                 vPortFree( pxTCB );
3978:FreeRTOS/Source/tasks.c ****             }
3979:FreeRTOS/Source/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3980:FreeRTOS/Source/tasks.c ****             {
3981:FreeRTOS/Source/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
3982:FreeRTOS/Source/tasks.c ****                  * only memory that must be freed. */
3983:FreeRTOS/Source/tasks.c ****                 vPortFree( pxTCB );
3984:FreeRTOS/Source/tasks.c ****             }
3985:FreeRTOS/Source/tasks.c ****             else
3986:FreeRTOS/Source/tasks.c ****             {
3987:FreeRTOS/Source/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
3988:FreeRTOS/Source/tasks.c ****                  * nothing needs to be freed. */
3989:FreeRTOS/Source/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
3990:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3991:FreeRTOS/Source/tasks.c ****             }
3992:FreeRTOS/Source/tasks.c ****         }
3993:FreeRTOS/Source/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3994:FreeRTOS/Source/tasks.c ****     }
3995:FreeRTOS/Source/tasks.c **** 
3996:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3997:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3998:FreeRTOS/Source/tasks.c **** 
3999:FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4000:FreeRTOS/Source/tasks.c **** {
 175              		.loc 1 4000 1 is_stmt 1 view -0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
4001:FreeRTOS/Source/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 180              		.loc 1 4001 5 view .LVU47
 181              		.loc 1 4001 9 is_stmt 0 view .LVU48
 182 0000 074B     		ldr	r3, .L18
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 78


 183 0002 1B68     		ldr	r3, [r3]
 184 0004 1B68     		ldr	r3, [r3]
 185              		.loc 1 4001 7 view .LVU49
 186 0006 23B9     		cbnz	r3, .L16
4002:FreeRTOS/Source/tasks.c ****     {
4003:FreeRTOS/Source/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4004:FreeRTOS/Source/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4005:FreeRTOS/Source/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4006:FreeRTOS/Source/tasks.c ****          * there is an item in the delayed list. */
4007:FreeRTOS/Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 187              		.loc 1 4007 9 is_stmt 1 view .LVU50
 188              		.loc 1 4007 30 is_stmt 0 view .LVU51
 189 0008 064B     		ldr	r3, .L18+4
 190 000a 4FF0FF32 		mov	r2, #-1
 191 000e 1A60     		str	r2, [r3]
 192 0010 7047     		bx	lr
 193              	.L16:
4008:FreeRTOS/Source/tasks.c ****     }
4009:FreeRTOS/Source/tasks.c ****     else
4010:FreeRTOS/Source/tasks.c ****     {
4011:FreeRTOS/Source/tasks.c ****         /* The new current delayed list is not empty, get the value of
4012:FreeRTOS/Source/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4013:FreeRTOS/Source/tasks.c ****          * which the task at the head of the delayed list should be removed
4014:FreeRTOS/Source/tasks.c ****          * from the Blocked state. */
4015:FreeRTOS/Source/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 194              		.loc 1 4015 9 is_stmt 1 view .LVU52
 195              		.loc 1 4015 32 is_stmt 0 view .LVU53
 196 0012 034B     		ldr	r3, .L18
 197 0014 1B68     		ldr	r3, [r3]
 198 0016 DB68     		ldr	r3, [r3, #12]
 199 0018 1A68     		ldr	r2, [r3]
 200              		.loc 1 4015 30 view .LVU54
 201 001a 024B     		ldr	r3, .L18+4
 202 001c 1A60     		str	r2, [r3]
4016:FreeRTOS/Source/tasks.c ****     }
4017:FreeRTOS/Source/tasks.c **** }
 203              		.loc 1 4017 1 view .LVU55
 204 001e 7047     		bx	lr
 205              	.L19:
 206              		.align	2
 207              	.L18:
 208 0020 00000000 		.word	pxDelayedTaskList
 209 0024 00000000 		.word	xNextTaskUnblockTime
 210              		.cfi_endproc
 211              	.LFE49:
 213              		.section	.text.prvDeleteTCB,"ax",%progbits
 214              		.align	1
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 219              	prvDeleteTCB:
 220              	.LVL15:
 221              	.LFB48:
3947:FreeRTOS/Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 222              		.loc 1 3947 5 is_stmt 1 view -0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 79


 225              		@ frame_needed = 0, uses_anonymous_args = 0
3947:FreeRTOS/Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 226              		.loc 1 3947 5 is_stmt 0 view .LVU57
 227 0000 10B5     		push	{r4, lr}
 228              	.LCFI0:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 4, -8
 231              		.cfi_offset 14, -4
 232 0002 0446     		mov	r4, r0
3951:FreeRTOS/Source/tasks.c **** 
 233              		.loc 1 3951 9 is_stmt 1 view .LVU58
3964:FreeRTOS/Source/tasks.c ****             vPortFree( pxTCB );
 234              		.loc 1 3964 13 view .LVU59
 235 0004 006B     		ldr	r0, [r0, #48]
 236              	.LVL16:
3964:FreeRTOS/Source/tasks.c ****             vPortFree( pxTCB );
 237              		.loc 1 3964 13 is_stmt 0 view .LVU60
 238 0006 FFF7FEFF 		bl	vPortFree
 239              	.LVL17:
3965:FreeRTOS/Source/tasks.c ****         }
 240              		.loc 1 3965 13 is_stmt 1 view .LVU61
 241 000a 2046     		mov	r0, r4
 242 000c FFF7FEFF 		bl	vPortFree
 243              	.LVL18:
3994:FreeRTOS/Source/tasks.c **** 
 244              		.loc 1 3994 5 is_stmt 0 view .LVU62
 245 0010 10BD     		pop	{r4, pc}
3994:FreeRTOS/Source/tasks.c **** 
 246              		.loc 1 3994 5 view .LVU63
 247              		.cfi_endproc
 248              	.LFE48:
 250              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 251              		.align	1
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	prvInitialiseNewTask:
 257              	.LVL19:
 258              	.LFB6:
 824:FreeRTOS/Source/tasks.c ****     StackType_t * pxTopOfStack;
 259              		.loc 1 824 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 16, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 824:FreeRTOS/Source/tasks.c ****     StackType_t * pxTopOfStack;
 263              		.loc 1 824 1 is_stmt 0 view .LVU65
 264 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 265              	.LCFI1:
 266              		.cfi_def_cfa_offset 32
 267              		.cfi_offset 3, -32
 268              		.cfi_offset 4, -28
 269              		.cfi_offset 5, -24
 270              		.cfi_offset 6, -20
 271              		.cfi_offset 7, -16
 272              		.cfi_offset 8, -12
 273              		.cfi_offset 9, -8
 274              		.cfi_offset 14, -4
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 80


 275 0004 8046     		mov	r8, r0
 276 0006 0D46     		mov	r5, r1
 277 0008 1646     		mov	r6, r2
 278 000a 9946     		mov	r9, r3
 279 000c 089F     		ldr	r7, [sp, #32]
 280 000e 0A9C     		ldr	r4, [sp, #40]
 825:FreeRTOS/Source/tasks.c ****     UBaseType_t x;
 281              		.loc 1 825 5 is_stmt 1 view .LVU66
 826:FreeRTOS/Source/tasks.c **** 
 282              		.loc 1 826 5 view .LVU67
 847:FreeRTOS/Source/tasks.c ****     }
 283              		.loc 1 847 9 view .LVU68
 847:FreeRTOS/Source/tasks.c ****     }
 284              		.loc 1 847 18 is_stmt 0 view .LVU69
 285 0010 9200     		lsls	r2, r2, #2
 286              	.LVL20:
 847:FreeRTOS/Source/tasks.c ****     }
 287              		.loc 1 847 18 view .LVU70
 288 0012 A521     		movs	r1, #165
 289              	.LVL21:
 847:FreeRTOS/Source/tasks.c ****     }
 290              		.loc 1 847 18 view .LVU71
 291 0014 206B     		ldr	r0, [r4, #48]
 292              	.LVL22:
 847:FreeRTOS/Source/tasks.c ****     }
 293              		.loc 1 847 18 view .LVU72
 294 0016 FFF7FEFF 		bl	memset
 295              	.LVL23:
 857:FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 296              		.loc 1 857 9 is_stmt 1 view .LVU73
 857:FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 297              		.loc 1 857 35 is_stmt 0 view .LVU74
 298 001a 226B     		ldr	r2, [r4, #48]
 857:FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 299              		.loc 1 857 44 view .LVU75
 300 001c 06F18043 		add	r3, r6, #1073741824
 301 0020 013B     		subs	r3, r3, #1
 857:FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 302              		.loc 1 857 22 view .LVU76
 303 0022 02EB8302 		add	r2, r2, r3, lsl #2
 304              	.LVL24:
 858:FreeRTOS/Source/tasks.c **** 
 305              		.loc 1 858 9 is_stmt 1 view .LVU77
 858:FreeRTOS/Source/tasks.c **** 
 306              		.loc 1 858 87 is_stmt 0 view .LVU78
 307 0026 22F00706 		bic	r6, r2, #7
 308              	.LVL25:
 861:FreeRTOS/Source/tasks.c **** 
 309              		.loc 1 861 9 is_stmt 1 view .LVU79
 861:FreeRTOS/Source/tasks.c **** 
 310              		.loc 1 861 130 view .LVU80
 885:FreeRTOS/Source/tasks.c ****     {
 311              		.loc 1 885 5 view .LVU81
 885:FreeRTOS/Source/tasks.c ****     {
 312              		.loc 1 885 7 is_stmt 0 view .LVU82
 313 002a 65B1     		cbz	r5, .L24
 887:FreeRTOS/Source/tasks.c ****         {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 81


 314              		.loc 1 887 16 view .LVU83
 315 002c 0022     		movs	r2, #0
 316              	.LVL26:
 317              	.L23:
 887:FreeRTOS/Source/tasks.c ****         {
 318              		.loc 1 887 39 is_stmt 1 discriminator 1 view .LVU84
 319 002e 092A     		cmp	r2, #9
 320 0030 06D8     		bhi	.L25
 889:FreeRTOS/Source/tasks.c **** 
 321              		.loc 1 889 13 view .LVU85
 889:FreeRTOS/Source/tasks.c **** 
 322              		.loc 1 889 47 is_stmt 0 view .LVU86
 323 0032 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 889:FreeRTOS/Source/tasks.c **** 
 324              		.loc 1 889 39 view .LVU87
 325 0034 A118     		adds	r1, r4, r2
 326 0036 81F83430 		strb	r3, [r1, #52]
 894:FreeRTOS/Source/tasks.c ****             {
 327              		.loc 1 894 13 is_stmt 1 view .LVU88
 894:FreeRTOS/Source/tasks.c ****             {
 328              		.loc 1 894 15 is_stmt 0 view .LVU89
 329 003a 0BB1     		cbz	r3, .L25
 900:FreeRTOS/Source/tasks.c ****             }
 330              		.loc 1 900 41 is_stmt 1 discriminator 2 view .LVU90
 887:FreeRTOS/Source/tasks.c ****         {
 331              		.loc 1 887 83 discriminator 2 view .LVU91
 332 003c 0132     		adds	r2, r2, #1
 333              	.LVL27:
 887:FreeRTOS/Source/tasks.c ****         {
 334              		.loc 1 887 83 is_stmt 0 discriminator 2 view .LVU92
 335 003e F6E7     		b	.L23
 336              	.L25:
 906:FreeRTOS/Source/tasks.c ****     }
 337              		.loc 1 906 9 is_stmt 1 view .LVU93
 906:FreeRTOS/Source/tasks.c ****     }
 338              		.loc 1 906 61 is_stmt 0 view .LVU94
 339 0040 0023     		movs	r3, #0
 340 0042 84F83D30 		strb	r3, [r4, #61]
 341              	.LVL28:
 342              	.L24:
 910:FreeRTOS/Source/tasks.c ****     }
 343              		.loc 1 910 33 is_stmt 1 view .LVU95
 914:FreeRTOS/Source/tasks.c **** 
 344              		.loc 1 914 5 view .LVU96
 345 0046 042F     		cmp	r7, #4
 346 0048 08D9     		bls	.L27
 914:FreeRTOS/Source/tasks.c **** 
 347              		.loc 1 914 5 view .LVU97
 348              	.LBB157:
 349              	.LBI157:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 350              		.loc 2 194 34 view .LVU98
 351              	.LBB158:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 352              		.loc 2 196 9 view .LVU99
 353              		.loc 2 198 9 view .LVU100
 354              		.syntax unified
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 82


 355              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 356 004a 4FF05003 			mov r3, #80												
 357 004e 83F31188 		msr basepri, r3											
 358 0052 BFF36F8F 		isb														
 359 0056 BFF34F8F 		dsb														
 360              	
 361              	@ 0 "" 2
 362              	.LVL29:
 363              		.thumb
 364              		.syntax unified
 365              	.L28:
 366              		.loc 2 198 9 is_stmt 0 view .LVU101
 367              	.LBE158:
 368              	.LBE157:
 914:FreeRTOS/Source/tasks.c **** 
 369              		.loc 1 914 5 is_stmt 1 discriminator 2 view .LVU102
 914:FreeRTOS/Source/tasks.c **** 
 370              		.loc 1 914 5 discriminator 2 view .LVU103
 371 005a FEE7     		b	.L28
 372              	.L27:
 914:FreeRTOS/Source/tasks.c **** 
 373              		.loc 1 914 54 view .LVU104
 916:FreeRTOS/Source/tasks.c ****     {
 374              		.loc 1 916 5 view .LVU105
 375              	.LVL30:
 922:FreeRTOS/Source/tasks.c ****     }
 376              		.loc 1 922 33 view .LVU106
 925:FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 377              		.loc 1 925 5 view .LVU107
 925:FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 378              		.loc 1 925 26 is_stmt 0 view .LVU108
 379 005c E762     		str	r7, [r4, #44]
 928:FreeRTOS/Source/tasks.c ****     }
 380              		.loc 1 928 9 is_stmt 1 view .LVU109
 928:FreeRTOS/Source/tasks.c ****     }
 381              		.loc 1 928 34 is_stmt 0 view .LVU110
 382 005e A764     		str	r7, [r4, #72]
 932:FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 383              		.loc 1 932 5 is_stmt 1 view .LVU111
 384 0060 201D     		adds	r0, r4, #4
 385 0062 FFF7FEFF 		bl	vListInitialiseItem
 386              	.LVL31:
 933:FreeRTOS/Source/tasks.c **** 
 387              		.loc 1 933 5 view .LVU112
 388 0066 04F11800 		add	r0, r4, #24
 389 006a FFF7FEFF 		bl	vListInitialiseItem
 390              	.LVL32:
 937:FreeRTOS/Source/tasks.c **** 
 391              		.loc 1 937 5 view .LVU113
 392 006e 2461     		str	r4, [r4, #16]
 940:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 393              		.loc 1 940 5 view .LVU114
 394 0070 C7F10507 		rsb	r7, r7, #5
 395              	.LVL33:
 940:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 396              		.loc 1 940 5 is_stmt 0 view .LVU115
 397 0074 A761     		str	r7, [r4, #24]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 83


 941:FreeRTOS/Source/tasks.c **** 
 398              		.loc 1 941 5 is_stmt 1 view .LVU116
 399 0076 6462     		str	r4, [r4, #36]
 950:FreeRTOS/Source/tasks.c ****     }
 400              		.loc 1 950 9 view .LVU117
1007:FreeRTOS/Source/tasks.c ****         }
 401              		.loc 1 1007 13 view .LVU118
1007:FreeRTOS/Source/tasks.c ****         }
 402              		.loc 1 1007 38 is_stmt 0 view .LVU119
 403 0078 4A46     		mov	r2, r9
 404 007a 4146     		mov	r1, r8
 405 007c 3046     		mov	r0, r6
 406 007e FFF7FEFF 		bl	pxPortInitialiseStack
 407              	.LVL34:
1007:FreeRTOS/Source/tasks.c ****         }
 408              		.loc 1 1007 36 view .LVU120
 409 0082 2060     		str	r0, [r4]
1013:FreeRTOS/Source/tasks.c ****     {
 410              		.loc 1 1013 5 is_stmt 1 view .LVU121
1013:FreeRTOS/Source/tasks.c ****     {
 411              		.loc 1 1013 7 is_stmt 0 view .LVU122
 412 0084 099B     		ldr	r3, [sp, #36]
 413 0086 03B1     		cbz	r3, .L22
1017:FreeRTOS/Source/tasks.c ****     }
 414              		.loc 1 1017 9 is_stmt 1 view .LVU123
1017:FreeRTOS/Source/tasks.c ****     }
 415              		.loc 1 1017 24 is_stmt 0 view .LVU124
 416 0088 1C60     		str	r4, [r3]
1021:FreeRTOS/Source/tasks.c ****     }
 417              		.loc 1 1021 33 is_stmt 1 view .LVU125
 418              	.L22:
1023:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 419              		.loc 1 1023 1 is_stmt 0 view .LVU126
 420 008a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
1023:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 421              		.loc 1 1023 1 view .LVU127
 422              		.cfi_endproc
 423              	.LFE6:
 425              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 426              		.align	1
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 431              	prvInitialiseTaskLists:
 432              	.LFB43:
3658:FreeRTOS/Source/tasks.c ****     UBaseType_t uxPriority;
 433              		.loc 1 3658 1 is_stmt 1 view -0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437 0000 38B5     		push	{r3, r4, r5, lr}
 438              	.LCFI2:
 439              		.cfi_def_cfa_offset 16
 440              		.cfi_offset 3, -16
 441              		.cfi_offset 4, -12
 442              		.cfi_offset 5, -8
 443              		.cfi_offset 14, -4
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 84


3659:FreeRTOS/Source/tasks.c **** 
 444              		.loc 1 3659 5 view .LVU129
3661:FreeRTOS/Source/tasks.c ****     {
 445              		.loc 1 3661 5 view .LVU130
 446              	.LVL35:
3661:FreeRTOS/Source/tasks.c ****     {
 447              		.loc 1 3661 21 is_stmt 0 view .LVU131
 448 0002 0024     		movs	r4, #0
3661:FreeRTOS/Source/tasks.c ****     {
 449              		.loc 1 3661 5 view .LVU132
 450 0004 07E0     		b	.L33
 451              	.LVL36:
 452              	.L34:
3663:FreeRTOS/Source/tasks.c ****     }
 453              		.loc 1 3663 9 is_stmt 1 discriminator 3 view .LVU133
 454 0006 04EB8402 		add	r2, r4, r4, lsl #2
 455 000a 9300     		lsls	r3, r2, #2
 456 000c 0E48     		ldr	r0, .L36
 457 000e 1844     		add	r0, r0, r3
 458 0010 FFF7FEFF 		bl	vListInitialise
 459              	.LVL37:
3661:FreeRTOS/Source/tasks.c ****     {
 460              		.loc 1 3661 104 discriminator 3 view .LVU134
 461 0014 0134     		adds	r4, r4, #1
 462              	.LVL38:
 463              	.L33:
3661:FreeRTOS/Source/tasks.c ****     {
 464              		.loc 1 3661 54 discriminator 1 view .LVU135
 465 0016 042C     		cmp	r4, #4
 466 0018 F5D9     		bls	.L34
3666:FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 467              		.loc 1 3666 5 view .LVU136
 468 001a 0C4D     		ldr	r5, .L36+4
 469 001c 2846     		mov	r0, r5
 470 001e FFF7FEFF 		bl	vListInitialise
 471              	.LVL39:
3667:FreeRTOS/Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 472              		.loc 1 3667 5 view .LVU137
 473 0022 0B4C     		ldr	r4, .L36+8
 474              	.LVL40:
3667:FreeRTOS/Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 475              		.loc 1 3667 5 is_stmt 0 view .LVU138
 476 0024 2046     		mov	r0, r4
 477 0026 FFF7FEFF 		bl	vListInitialise
 478              	.LVL41:
3668:FreeRTOS/Source/tasks.c **** 
 479              		.loc 1 3668 5 is_stmt 1 view .LVU139
 480 002a 0A48     		ldr	r0, .L36+12
 481 002c FFF7FEFF 		bl	vListInitialise
 482              	.LVL42:
3672:FreeRTOS/Source/tasks.c ****     }
 483              		.loc 1 3672 9 view .LVU140
 484 0030 0948     		ldr	r0, .L36+16
 485 0032 FFF7FEFF 		bl	vListInitialise
 486              	.LVL43:
3678:FreeRTOS/Source/tasks.c ****     }
 487              		.loc 1 3678 9 view .LVU141
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 85


 488 0036 0948     		ldr	r0, .L36+20
 489 0038 FFF7FEFF 		bl	vListInitialise
 490              	.LVL44:
3684:FreeRTOS/Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 491              		.loc 1 3684 5 view .LVU142
3684:FreeRTOS/Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 492              		.loc 1 3684 23 is_stmt 0 view .LVU143
 493 003c 084B     		ldr	r3, .L36+24
 494 003e 1D60     		str	r5, [r3]
3685:FreeRTOS/Source/tasks.c **** }
 495              		.loc 1 3685 5 is_stmt 1 view .LVU144
3685:FreeRTOS/Source/tasks.c **** }
 496              		.loc 1 3685 31 is_stmt 0 view .LVU145
 497 0040 084B     		ldr	r3, .L36+28
 498 0042 1C60     		str	r4, [r3]
3686:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 499              		.loc 1 3686 1 view .LVU146
 500 0044 38BD     		pop	{r3, r4, r5, pc}
 501              	.L37:
 502 0046 00BF     		.align	2
 503              	.L36:
 504 0048 00000000 		.word	pxReadyTasksLists
 505 004c 00000000 		.word	xDelayedTaskList1
 506 0050 00000000 		.word	xDelayedTaskList2
 507 0054 00000000 		.word	xPendingReadyList
 508 0058 00000000 		.word	xTasksWaitingTermination
 509 005c 00000000 		.word	xSuspendedTaskList
 510 0060 00000000 		.word	pxDelayedTaskList
 511 0064 00000000 		.word	pxOverflowDelayedTaskList
 512              		.cfi_endproc
 513              	.LFE43:
 515              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 516              		.align	1
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 521              	prvAddNewTaskToReadyList:
 522              	.LVL45:
 523              	.LFB7:
1027:FreeRTOS/Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 524              		.loc 1 1027 1 is_stmt 1 view -0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
1027:FreeRTOS/Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 528              		.loc 1 1027 1 is_stmt 0 view .LVU148
 529 0000 10B5     		push	{r4, lr}
 530              	.LCFI3:
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 4, -8
 533              		.cfi_offset 14, -4
 534 0002 0446     		mov	r4, r0
1030:FreeRTOS/Source/tasks.c ****     {
 535              		.loc 1 1030 5 is_stmt 1 view .LVU149
 536 0004 FFF7FEFF 		bl	vPortEnterCritical
 537              	.LVL46:
1032:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 86


 538              		.loc 1 1032 9 view .LVU150
1032:FreeRTOS/Source/tasks.c **** 
 539              		.loc 1 1032 31 is_stmt 0 view .LVU151
 540 0008 294A     		ldr	r2, .L45
 541 000a 1368     		ldr	r3, [r2]
 542 000c 0133     		adds	r3, r3, #1
 543 000e 1360     		str	r3, [r2]
1034:FreeRTOS/Source/tasks.c ****         {
 544              		.loc 1 1034 9 is_stmt 1 view .LVU152
1034:FreeRTOS/Source/tasks.c ****         {
 545              		.loc 1 1034 26 is_stmt 0 view .LVU153
 546 0010 284B     		ldr	r3, .L45+4
 547 0012 1B68     		ldr	r3, [r3]
1034:FreeRTOS/Source/tasks.c ****         {
 548              		.loc 1 1034 11 view .LVU154
 549 0014 5BB1     		cbz	r3, .L43
1057:FreeRTOS/Source/tasks.c ****             {
 550              		.loc 1 1057 13 is_stmt 1 view .LVU155
1057:FreeRTOS/Source/tasks.c ****             {
 551              		.loc 1 1057 35 is_stmt 0 view .LVU156
 552 0016 284B     		ldr	r3, .L45+8
 553 0018 1B68     		ldr	r3, [r3]
1057:FreeRTOS/Source/tasks.c ****             {
 554              		.loc 1 1057 15 view .LVU157
 555 001a 6BB9     		cbnz	r3, .L40
1059:FreeRTOS/Source/tasks.c ****                 {
 556              		.loc 1 1059 17 is_stmt 1 view .LVU158
1059:FreeRTOS/Source/tasks.c ****                 {
 557              		.loc 1 1059 33 is_stmt 0 view .LVU159
 558 001c 254B     		ldr	r3, .L45+4
 559 001e 1B68     		ldr	r3, [r3]
 560 0020 DA6A     		ldr	r2, [r3, #44]
1059:FreeRTOS/Source/tasks.c ****                 {
 561              		.loc 1 1059 57 view .LVU160
 562 0022 E36A     		ldr	r3, [r4, #44]
1059:FreeRTOS/Source/tasks.c ****                 {
 563              		.loc 1 1059 19 view .LVU161
 564 0024 9A42     		cmp	r2, r3
 565 0026 07D8     		bhi	.L40
1061:FreeRTOS/Source/tasks.c ****                 }
 566              		.loc 1 1061 21 is_stmt 1 view .LVU162
1061:FreeRTOS/Source/tasks.c ****                 }
 567              		.loc 1 1061 34 is_stmt 0 view .LVU163
 568 0028 224B     		ldr	r3, .L45+4
 569 002a 1C60     		str	r4, [r3]
 570 002c 04E0     		b	.L40
 571              	.L43:
1038:FreeRTOS/Source/tasks.c **** 
 572              		.loc 1 1038 13 is_stmt 1 view .LVU164
1038:FreeRTOS/Source/tasks.c **** 
 573              		.loc 1 1038 26 is_stmt 0 view .LVU165
 574 002e 214B     		ldr	r3, .L45+4
 575 0030 1C60     		str	r4, [r3]
1040:FreeRTOS/Source/tasks.c ****             {
 576              		.loc 1 1040 13 is_stmt 1 view .LVU166
1040:FreeRTOS/Source/tasks.c ****             {
 577              		.loc 1 1040 40 is_stmt 0 view .LVU167
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 87


 578 0032 1368     		ldr	r3, [r2]
1040:FreeRTOS/Source/tasks.c ****             {
 579              		.loc 1 1040 15 view .LVU168
 580 0034 012B     		cmp	r3, #1
 581 0036 37D0     		beq	.L44
 582              	.L40:
1070:FreeRTOS/Source/tasks.c ****             }
 583              		.loc 1 1070 41 is_stmt 1 view .LVU169
1074:FreeRTOS/Source/tasks.c **** 
 584              		.loc 1 1074 9 view .LVU170
1074:FreeRTOS/Source/tasks.c **** 
 585              		.loc 1 1074 21 is_stmt 0 view .LVU171
 586 0038 204A     		ldr	r2, .L45+12
 587 003a 1368     		ldr	r3, [r2]
 588 003c 0133     		adds	r3, r3, #1
 589 003e 1360     		str	r3, [r2]
1079:FreeRTOS/Source/tasks.c ****         }
 590              		.loc 1 1079 13 is_stmt 1 view .LVU172
1079:FreeRTOS/Source/tasks.c ****         }
 591              		.loc 1 1079 35 is_stmt 0 view .LVU173
 592 0040 2364     		str	r3, [r4, #64]
1082:FreeRTOS/Source/tasks.c **** 
 593              		.loc 1 1082 37 is_stmt 1 view .LVU174
1084:FreeRTOS/Source/tasks.c **** 
 594              		.loc 1 1084 9 view .LVU175
1084:FreeRTOS/Source/tasks.c **** 
 595              		.loc 1 1084 9 view .LVU176
 596 0042 E36A     		ldr	r3, [r4, #44]
 597 0044 0122     		movs	r2, #1
 598 0046 9A40     		lsls	r2, r2, r3
 599 0048 1D49     		ldr	r1, .L45+16
 600 004a 0868     		ldr	r0, [r1]
 601 004c 0243     		orrs	r2, r2, r0
 602 004e 0A60     		str	r2, [r1]
 603              	.LBB159:
1084:FreeRTOS/Source/tasks.c **** 
 604              		.loc 1 1084 9 view .LVU177
 605 0050 1C4A     		ldr	r2, .L45+20
 606 0052 03EB8303 		add	r3, r3, r3, lsl #2
 607 0056 02EB8303 		add	r3, r2, r3, lsl #2
 608 005a 5B68     		ldr	r3, [r3, #4]
 609              	.LVL47:
1084:FreeRTOS/Source/tasks.c **** 
 610              		.loc 1 1084 9 view .LVU178
1084:FreeRTOS/Source/tasks.c **** 
 611              		.loc 1 1084 9 view .LVU179
1084:FreeRTOS/Source/tasks.c **** 
 612              		.loc 1 1084 9 view .LVU180
 613 005c A360     		str	r3, [r4, #8]
1084:FreeRTOS/Source/tasks.c **** 
 614              		.loc 1 1084 9 view .LVU181
 615 005e 9868     		ldr	r0, [r3, #8]
 616 0060 E060     		str	r0, [r4, #12]
1084:FreeRTOS/Source/tasks.c **** 
 617              		.loc 1 1084 9 view .LVU182
 618 0062 211D     		adds	r1, r4, #4
 619 0064 4160     		str	r1, [r0, #4]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 88


1084:FreeRTOS/Source/tasks.c **** 
 620              		.loc 1 1084 9 view .LVU183
 621 0066 9960     		str	r1, [r3, #8]
1084:FreeRTOS/Source/tasks.c **** 
 622              		.loc 1 1084 9 view .LVU184
 623 0068 E36A     		ldr	r3, [r4, #44]
 624              	.LVL48:
1084:FreeRTOS/Source/tasks.c **** 
 625              		.loc 1 1084 9 is_stmt 0 view .LVU185
 626 006a 03EB8301 		add	r1, r3, r3, lsl #2
 627 006e 8800     		lsls	r0, r1, #2
 628 0070 02EB8101 		add	r1, r2, r1, lsl #2
 629 0074 6161     		str	r1, [r4, #20]
1084:FreeRTOS/Source/tasks.c **** 
 630              		.loc 1 1084 9 is_stmt 1 view .LVU186
 631 0076 1158     		ldr	r1, [r2, r0]
 632 0078 0131     		adds	r1, r1, #1
 633 007a 1150     		str	r1, [r2, r0]
 634              	.LBE159:
1084:FreeRTOS/Source/tasks.c **** 
 635              		.loc 1 1084 9 view .LVU187
1084:FreeRTOS/Source/tasks.c **** 
 636              		.loc 1 1084 42 view .LVU188
1086:FreeRTOS/Source/tasks.c ****     }
 637              		.loc 1 1086 9 view .LVU189
1088:FreeRTOS/Source/tasks.c **** 
 638              		.loc 1 1088 5 view .LVU190
 639 007c FFF7FEFF 		bl	vPortExitCritical
 640              	.LVL49:
1090:FreeRTOS/Source/tasks.c ****     {
 641              		.loc 1 1090 5 view .LVU191
1090:FreeRTOS/Source/tasks.c ****     {
 642              		.loc 1 1090 27 is_stmt 0 view .LVU192
 643 0080 0D4B     		ldr	r3, .L45+8
 644 0082 1B68     		ldr	r3, [r3]
1090:FreeRTOS/Source/tasks.c ****     {
 645              		.loc 1 1090 7 view .LVU193
 646 0084 7BB1     		cbz	r3, .L38
1094:FreeRTOS/Source/tasks.c ****         {
 647              		.loc 1 1094 9 is_stmt 1 view .LVU194
1094:FreeRTOS/Source/tasks.c ****         {
 648              		.loc 1 1094 25 is_stmt 0 view .LVU195
 649 0086 0B4B     		ldr	r3, .L45+4
 650 0088 1B68     		ldr	r3, [r3]
 651 008a DA6A     		ldr	r2, [r3, #44]
1094:FreeRTOS/Source/tasks.c ****         {
 652              		.loc 1 1094 48 view .LVU196
 653 008c E36A     		ldr	r3, [r4, #44]
1094:FreeRTOS/Source/tasks.c ****         {
 654              		.loc 1 1094 11 view .LVU197
 655 008e 9A42     		cmp	r2, r3
 656 0090 09D2     		bcs	.L38
1096:FreeRTOS/Source/tasks.c ****         }
 657              		.loc 1 1096 13 is_stmt 1 view .LVU198
 658 0092 4FF0E023 		mov	r3, #-536813568
 659 0096 4FF08052 		mov	r2, #268435456
 660 009a C3F8042D 		str	r2, [r3, #3332]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 89


1096:FreeRTOS/Source/tasks.c ****         }
 661              		.loc 1 1096 13 view .LVU199
 662              		.syntax unified
 663              	@ 1096 "FreeRTOS/Source/tasks.c" 1
 664 009e BFF34F8F 		dsb
 665              	@ 0 "" 2
1096:FreeRTOS/Source/tasks.c ****         }
 666              		.loc 1 1096 13 view .LVU200
 667              	@ 1096 "FreeRTOS/Source/tasks.c" 1
 668 00a2 BFF36F8F 		isb
 669              	@ 0 "" 2
1096:FreeRTOS/Source/tasks.c ****         }
 670              		.loc 1 1096 44 view .LVU201
1105:FreeRTOS/Source/tasks.c ****     }
 671              		.loc 1 1105 33 view .LVU202
 672              		.thumb
 673              		.syntax unified
 674              	.L38:
1107:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 675              		.loc 1 1107 1 is_stmt 0 view .LVU203
 676 00a6 10BD     		pop	{r4, pc}
 677              	.LVL50:
 678              	.L44:
1045:FreeRTOS/Source/tasks.c ****             }
 679              		.loc 1 1045 17 is_stmt 1 view .LVU204
 680 00a8 FFF7FEFF 		bl	prvInitialiseTaskLists
 681              	.LVL51:
 682 00ac C4E7     		b	.L40
 683              	.L46:
 684 00ae 00BF     		.align	2
 685              	.L45:
 686 00b0 00000000 		.word	uxCurrentNumberOfTasks
 687 00b4 00000000 		.word	pxCurrentTCB
 688 00b8 00000000 		.word	xSchedulerRunning
 689 00bc 00000000 		.word	uxTaskNumber
 690 00c0 00000000 		.word	uxTopReadyPriority
 691 00c4 00000000 		.word	pxReadyTasksLists
 692              		.cfi_endproc
 693              	.LFE7:
 695              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 696              		.align	1
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 701              	prvCheckTasksWaitingTermination:
 702              	.LFB44:
3690:FreeRTOS/Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 703              		.loc 1 3690 1 view -0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              	.LBB160:
3695:FreeRTOS/Source/tasks.c **** 
 708              		.loc 1 3695 9 view .LVU206
3699:FreeRTOS/Source/tasks.c ****         {
 709              		.loc 1 3699 9 view .LVU207
3699:FreeRTOS/Source/tasks.c ****         {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 90


 710              		.loc 1 3699 45 view .LVU208
 711 0000 0F4B     		ldr	r3, .L54
 712 0002 1B68     		ldr	r3, [r3]
 713 0004 D3B1     		cbz	r3, .L53
 714              	.LBE160:
3690:FreeRTOS/Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 715              		.loc 1 3690 1 is_stmt 0 view .LVU209
 716 0006 10B5     		push	{r4, lr}
 717              	.LCFI4:
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 4, -8
 720              		.cfi_offset 14, -4
 721              	.L49:
 722              	.LBB161:
3701:FreeRTOS/Source/tasks.c ****             {
 723              		.loc 1 3701 13 is_stmt 1 view .LVU210
 724 0008 FFF7FEFF 		bl	vPortEnterCritical
 725              	.LVL52:
3703:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 726              		.loc 1 3703 17 view .LVU211
3703:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 727              		.loc 1 3703 25 is_stmt 0 view .LVU212
 728 000c 0D4B     		ldr	r3, .L54+4
 729 000e DB68     		ldr	r3, [r3, #12]
3703:FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 730              		.loc 1 3703 23 view .LVU213
 731 0010 DC68     		ldr	r4, [r3, #12]
 732              	.LVL53:
3704:FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
 733              		.loc 1 3704 17 is_stmt 1 view .LVU214
3704:FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
 734              		.loc 1 3704 26 is_stmt 0 view .LVU215
 735 0012 201D     		adds	r0, r4, #4
 736 0014 FFF7FEFF 		bl	uxListRemove
 737              	.LVL54:
3705:FreeRTOS/Source/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
 738              		.loc 1 3705 17 is_stmt 1 view .LVU216
 739 0018 0B4A     		ldr	r2, .L54+8
 740 001a 1368     		ldr	r3, [r2]
 741 001c 013B     		subs	r3, r3, #1
 742 001e 1360     		str	r3, [r2]
3706:FreeRTOS/Source/tasks.c ****             }
 743              		.loc 1 3706 17 view .LVU217
 744 0020 074A     		ldr	r2, .L54
 745 0022 1368     		ldr	r3, [r2]
 746 0024 013B     		subs	r3, r3, #1
 747 0026 1360     		str	r3, [r2]
3708:FreeRTOS/Source/tasks.c **** 
 748              		.loc 1 3708 13 view .LVU218
 749 0028 FFF7FEFF 		bl	vPortExitCritical
 750              	.LVL55:
3710:FreeRTOS/Source/tasks.c ****         }
 751              		.loc 1 3710 13 view .LVU219
 752 002c 2046     		mov	r0, r4
 753 002e FFF7FEFF 		bl	prvDeleteTCB
 754              	.LVL56:
3699:FreeRTOS/Source/tasks.c ****         {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 91


 755              		.loc 1 3699 45 view .LVU220
 756 0032 034B     		ldr	r3, .L54
 757 0034 1B68     		ldr	r3, [r3]
 758 0036 002B     		cmp	r3, #0
 759 0038 E6D1     		bne	.L49
 760              	.LBE161:
3714:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 761              		.loc 1 3714 1 is_stmt 0 view .LVU221
 762 003a 10BD     		pop	{r4, pc}
 763              	.LVL57:
 764              	.L53:
 765              	.LCFI5:
 766              		.cfi_def_cfa_offset 0
 767              		.cfi_restore 4
 768              		.cfi_restore 14
3714:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 769              		.loc 1 3714 1 view .LVU222
 770 003c 7047     		bx	lr
 771              	.L55:
 772 003e 00BF     		.align	2
 773              	.L54:
 774 0040 00000000 		.word	uxDeletedTasksWaitingCleanUp
 775 0044 00000000 		.word	xTasksWaitingTermination
 776 0048 00000000 		.word	uxCurrentNumberOfTasks
 777              		.cfi_endproc
 778              	.LFE44:
 780              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 781              		.align	1
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 786              	prvAddCurrentTaskToDelayedList:
 787              	.LVL58:
 788              	.LFB64:
4018:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4019:FreeRTOS/Source/tasks.c **** 
4020:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4021:FreeRTOS/Source/tasks.c **** 
4022:FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4023:FreeRTOS/Source/tasks.c ****     {
4024:FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
4025:FreeRTOS/Source/tasks.c **** 
4026:FreeRTOS/Source/tasks.c ****         /* A critical section is not required as this is not called from
4027:FreeRTOS/Source/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4028:FreeRTOS/Source/tasks.c ****          * individual execution thread. */
4029:FreeRTOS/Source/tasks.c ****         xReturn = pxCurrentTCB;
4030:FreeRTOS/Source/tasks.c **** 
4031:FreeRTOS/Source/tasks.c ****         return xReturn;
4032:FreeRTOS/Source/tasks.c ****     }
4033:FreeRTOS/Source/tasks.c **** 
4034:FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4035:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4036:FreeRTOS/Source/tasks.c **** 
4037:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4038:FreeRTOS/Source/tasks.c **** 
4039:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4040:FreeRTOS/Source/tasks.c ****     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 92


4041:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
4042:FreeRTOS/Source/tasks.c **** 
4043:FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4044:FreeRTOS/Source/tasks.c ****         {
4045:FreeRTOS/Source/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4046:FreeRTOS/Source/tasks.c ****         }
4047:FreeRTOS/Source/tasks.c ****         else
4048:FreeRTOS/Source/tasks.c ****         {
4049:FreeRTOS/Source/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4050:FreeRTOS/Source/tasks.c ****             {
4051:FreeRTOS/Source/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4052:FreeRTOS/Source/tasks.c ****             }
4053:FreeRTOS/Source/tasks.c ****             else
4054:FreeRTOS/Source/tasks.c ****             {
4055:FreeRTOS/Source/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4056:FreeRTOS/Source/tasks.c ****             }
4057:FreeRTOS/Source/tasks.c ****         }
4058:FreeRTOS/Source/tasks.c **** 
4059:FreeRTOS/Source/tasks.c ****         return xReturn;
4060:FreeRTOS/Source/tasks.c ****     }
4061:FreeRTOS/Source/tasks.c **** 
4062:FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4063:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4064:FreeRTOS/Source/tasks.c **** 
4065:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4066:FreeRTOS/Source/tasks.c **** 
4067:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4068:FreeRTOS/Source/tasks.c ****     {
4069:FreeRTOS/Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4070:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4071:FreeRTOS/Source/tasks.c **** 
4072:FreeRTOS/Source/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4073:FreeRTOS/Source/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4074:FreeRTOS/Source/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4075:FreeRTOS/Source/tasks.c ****         if( pxMutexHolder != NULL )
4076:FreeRTOS/Source/tasks.c ****         {
4077:FreeRTOS/Source/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4078:FreeRTOS/Source/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4079:FreeRTOS/Source/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4080:FreeRTOS/Source/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4081:FreeRTOS/Source/tasks.c ****             {
4082:FreeRTOS/Source/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4083:FreeRTOS/Source/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4084:FreeRTOS/Source/tasks.c ****                  * not being used for anything else. */
4085:FreeRTOS/Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4086:FreeRTOS/Source/tasks.c ****                 {
4087:FreeRTOS/Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4088:FreeRTOS/Source/tasks.c ****                 }
4089:FreeRTOS/Source/tasks.c ****                 else
4090:FreeRTOS/Source/tasks.c ****                 {
4091:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4092:FreeRTOS/Source/tasks.c ****                 }
4093:FreeRTOS/Source/tasks.c **** 
4094:FreeRTOS/Source/tasks.c ****                 /* If the task being modified is in the ready state it will need
4095:FreeRTOS/Source/tasks.c ****                  * to be moved into a new list. */
4096:FreeRTOS/Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4097:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 93


4098:FreeRTOS/Source/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4099:FreeRTOS/Source/tasks.c ****                     {
4100:FreeRTOS/Source/tasks.c ****                         /* It is known that the task is in its ready list so
4101:FreeRTOS/Source/tasks.c ****                          * there is no need to check again and the port level
4102:FreeRTOS/Source/tasks.c ****                          * reset macro can be called directly. */
4103:FreeRTOS/Source/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4104:FreeRTOS/Source/tasks.c ****                     }
4105:FreeRTOS/Source/tasks.c ****                     else
4106:FreeRTOS/Source/tasks.c ****                     {
4107:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4108:FreeRTOS/Source/tasks.c ****                     }
4109:FreeRTOS/Source/tasks.c **** 
4110:FreeRTOS/Source/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4111:FreeRTOS/Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4112:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4113:FreeRTOS/Source/tasks.c ****                 }
4114:FreeRTOS/Source/tasks.c ****                 else
4115:FreeRTOS/Source/tasks.c ****                 {
4116:FreeRTOS/Source/tasks.c ****                     /* Just inherit the priority. */
4117:FreeRTOS/Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4118:FreeRTOS/Source/tasks.c ****                 }
4119:FreeRTOS/Source/tasks.c **** 
4120:FreeRTOS/Source/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4121:FreeRTOS/Source/tasks.c **** 
4122:FreeRTOS/Source/tasks.c ****                 /* Inheritance occurred. */
4123:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
4124:FreeRTOS/Source/tasks.c ****             }
4125:FreeRTOS/Source/tasks.c ****             else
4126:FreeRTOS/Source/tasks.c ****             {
4127:FreeRTOS/Source/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4128:FreeRTOS/Source/tasks.c ****                 {
4129:FreeRTOS/Source/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4130:FreeRTOS/Source/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4131:FreeRTOS/Source/tasks.c ****                      * current priority of the mutex holder is not lower than the
4132:FreeRTOS/Source/tasks.c ****                      * priority of the task attempting to take the mutex.
4133:FreeRTOS/Source/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4134:FreeRTOS/Source/tasks.c ****                      * priority, but inheritance would have occurred if that had
4135:FreeRTOS/Source/tasks.c ****                      * not been the case. */
4136:FreeRTOS/Source/tasks.c ****                     xReturn = pdTRUE;
4137:FreeRTOS/Source/tasks.c ****                 }
4138:FreeRTOS/Source/tasks.c ****                 else
4139:FreeRTOS/Source/tasks.c ****                 {
4140:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4141:FreeRTOS/Source/tasks.c ****                 }
4142:FreeRTOS/Source/tasks.c ****             }
4143:FreeRTOS/Source/tasks.c ****         }
4144:FreeRTOS/Source/tasks.c ****         else
4145:FreeRTOS/Source/tasks.c ****         {
4146:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4147:FreeRTOS/Source/tasks.c ****         }
4148:FreeRTOS/Source/tasks.c **** 
4149:FreeRTOS/Source/tasks.c ****         return xReturn;
4150:FreeRTOS/Source/tasks.c ****     }
4151:FreeRTOS/Source/tasks.c **** 
4152:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4153:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4154:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 94


4155:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4156:FreeRTOS/Source/tasks.c **** 
4157:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4158:FreeRTOS/Source/tasks.c ****     {
4159:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4160:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4161:FreeRTOS/Source/tasks.c **** 
4162:FreeRTOS/Source/tasks.c ****         if( pxMutexHolder != NULL )
4163:FreeRTOS/Source/tasks.c ****         {
4164:FreeRTOS/Source/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4165:FreeRTOS/Source/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4166:FreeRTOS/Source/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4167:FreeRTOS/Source/tasks.c ****              * be the running state task. */
4168:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4169:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4170:FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4171:FreeRTOS/Source/tasks.c **** 
4172:FreeRTOS/Source/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4173:FreeRTOS/Source/tasks.c ****              * task? */
4174:FreeRTOS/Source/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4175:FreeRTOS/Source/tasks.c ****             {
4176:FreeRTOS/Source/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4177:FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4178:FreeRTOS/Source/tasks.c ****                 {
4179:FreeRTOS/Source/tasks.c ****                     /* A task can only have an inherited priority if it holds
4180:FreeRTOS/Source/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4181:FreeRTOS/Source/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4182:FreeRTOS/Source/tasks.c ****                      * holding task then it must be the running state task.  Remove
4183:FreeRTOS/Source/tasks.c ****                      * the holding task from the ready list. */
4184:FreeRTOS/Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4185:FreeRTOS/Source/tasks.c ****                     {
4186:FreeRTOS/Source/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4187:FreeRTOS/Source/tasks.c ****                     }
4188:FreeRTOS/Source/tasks.c ****                     else
4189:FreeRTOS/Source/tasks.c ****                     {
4190:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4191:FreeRTOS/Source/tasks.c ****                     }
4192:FreeRTOS/Source/tasks.c **** 
4193:FreeRTOS/Source/tasks.c ****                     /* Disinherit the priority before adding the task into the
4194:FreeRTOS/Source/tasks.c ****                      * new  ready list. */
4195:FreeRTOS/Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4196:FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4197:FreeRTOS/Source/tasks.c **** 
4198:FreeRTOS/Source/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4199:FreeRTOS/Source/tasks.c ****                      * any other purpose if this task is running, and it must be
4200:FreeRTOS/Source/tasks.c ****                      * running to give back the mutex. */
4201:FreeRTOS/Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4202:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4203:FreeRTOS/Source/tasks.c **** 
4204:FreeRTOS/Source/tasks.c ****                     /* Return true to indicate that a context switch is required.
4205:FreeRTOS/Source/tasks.c ****                      * This is only actually required in the corner case whereby
4206:FreeRTOS/Source/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4207:FreeRTOS/Source/tasks.c ****                      * in an order different to that in which they were taken.
4208:FreeRTOS/Source/tasks.c ****                      * If a context switch did not occur when the first mutex was
4209:FreeRTOS/Source/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4210:FreeRTOS/Source/tasks.c ****                      * switch should occur when the last mutex is returned whether
4211:FreeRTOS/Source/tasks.c ****                      * a task is waiting on it or not. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 95


4212:FreeRTOS/Source/tasks.c ****                     xReturn = pdTRUE;
4213:FreeRTOS/Source/tasks.c ****                 }
4214:FreeRTOS/Source/tasks.c ****                 else
4215:FreeRTOS/Source/tasks.c ****                 {
4216:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4217:FreeRTOS/Source/tasks.c ****                 }
4218:FreeRTOS/Source/tasks.c ****             }
4219:FreeRTOS/Source/tasks.c ****             else
4220:FreeRTOS/Source/tasks.c ****             {
4221:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4222:FreeRTOS/Source/tasks.c ****             }
4223:FreeRTOS/Source/tasks.c ****         }
4224:FreeRTOS/Source/tasks.c ****         else
4225:FreeRTOS/Source/tasks.c ****         {
4226:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4227:FreeRTOS/Source/tasks.c ****         }
4228:FreeRTOS/Source/tasks.c **** 
4229:FreeRTOS/Source/tasks.c ****         return xReturn;
4230:FreeRTOS/Source/tasks.c ****     }
4231:FreeRTOS/Source/tasks.c **** 
4232:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4233:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4234:FreeRTOS/Source/tasks.c **** 
4235:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4236:FreeRTOS/Source/tasks.c **** 
4237:FreeRTOS/Source/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4238:FreeRTOS/Source/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4239:FreeRTOS/Source/tasks.c ****     {
4240:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4241:FreeRTOS/Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4242:FreeRTOS/Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4243:FreeRTOS/Source/tasks.c **** 
4244:FreeRTOS/Source/tasks.c ****         if( pxMutexHolder != NULL )
4245:FreeRTOS/Source/tasks.c ****         {
4246:FreeRTOS/Source/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4247:FreeRTOS/Source/tasks.c ****              * one mutex. */
4248:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4249:FreeRTOS/Source/tasks.c **** 
4250:FreeRTOS/Source/tasks.c ****             /* Determine the priority to which the priority of the task that
4251:FreeRTOS/Source/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4252:FreeRTOS/Source/tasks.c ****              * holding task's base priority and the priority of the highest
4253:FreeRTOS/Source/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4254:FreeRTOS/Source/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4255:FreeRTOS/Source/tasks.c ****             {
4256:FreeRTOS/Source/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4257:FreeRTOS/Source/tasks.c ****             }
4258:FreeRTOS/Source/tasks.c ****             else
4259:FreeRTOS/Source/tasks.c ****             {
4260:FreeRTOS/Source/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4261:FreeRTOS/Source/tasks.c ****             }
4262:FreeRTOS/Source/tasks.c **** 
4263:FreeRTOS/Source/tasks.c ****             /* Does the priority need to change? */
4264:FreeRTOS/Source/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4265:FreeRTOS/Source/tasks.c ****             {
4266:FreeRTOS/Source/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4267:FreeRTOS/Source/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4268:FreeRTOS/Source/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 96


4269:FreeRTOS/Source/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4270:FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4271:FreeRTOS/Source/tasks.c ****                 {
4272:FreeRTOS/Source/tasks.c ****                     /* If a task has timed out because it already holds the
4273:FreeRTOS/Source/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4274:FreeRTOS/Source/tasks.c ****                      * its own priority. */
4275:FreeRTOS/Source/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4276:FreeRTOS/Source/tasks.c **** 
4277:FreeRTOS/Source/tasks.c ****                     /* Disinherit the priority, remembering the previous
4278:FreeRTOS/Source/tasks.c ****                      * priority to facilitate determining the subject task's
4279:FreeRTOS/Source/tasks.c ****                      * state. */
4280:FreeRTOS/Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4281:FreeRTOS/Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4282:FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4283:FreeRTOS/Source/tasks.c **** 
4284:FreeRTOS/Source/tasks.c ****                     /* Only reset the event list item value if the value is not
4285:FreeRTOS/Source/tasks.c ****                      * being used for anything else. */
4286:FreeRTOS/Source/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4287:FreeRTOS/Source/tasks.c ****                     {
4288:FreeRTOS/Source/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4289:FreeRTOS/Source/tasks.c ****                     }
4290:FreeRTOS/Source/tasks.c ****                     else
4291:FreeRTOS/Source/tasks.c ****                     {
4292:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4293:FreeRTOS/Source/tasks.c ****                     }
4294:FreeRTOS/Source/tasks.c **** 
4295:FreeRTOS/Source/tasks.c ****                     /* If the running task is not the task that holds the mutex
4296:FreeRTOS/Source/tasks.c ****                      * then the task that holds the mutex could be in either the
4297:FreeRTOS/Source/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4298:FreeRTOS/Source/tasks.c ****                      * from its current state list if it is in the Ready state as
4299:FreeRTOS/Source/tasks.c ****                      * the task's priority is going to change and there is one
4300:FreeRTOS/Source/tasks.c ****                      * Ready list per priority. */
4301:FreeRTOS/Source/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4302:FreeRTOS/Source/tasks.c ****                     {
4303:FreeRTOS/Source/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4304:FreeRTOS/Source/tasks.c ****                         {
4305:FreeRTOS/Source/tasks.c ****                             /* It is known that the task is in its ready list so
4306:FreeRTOS/Source/tasks.c ****                              * there is no need to check again and the port level
4307:FreeRTOS/Source/tasks.c ****                              * reset macro can be called directly. */
4308:FreeRTOS/Source/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4309:FreeRTOS/Source/tasks.c ****                         }
4310:FreeRTOS/Source/tasks.c ****                         else
4311:FreeRTOS/Source/tasks.c ****                         {
4312:FreeRTOS/Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4313:FreeRTOS/Source/tasks.c ****                         }
4314:FreeRTOS/Source/tasks.c **** 
4315:FreeRTOS/Source/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4316:FreeRTOS/Source/tasks.c ****                     }
4317:FreeRTOS/Source/tasks.c ****                     else
4318:FreeRTOS/Source/tasks.c ****                     {
4319:FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4320:FreeRTOS/Source/tasks.c ****                     }
4321:FreeRTOS/Source/tasks.c ****                 }
4322:FreeRTOS/Source/tasks.c ****                 else
4323:FreeRTOS/Source/tasks.c ****                 {
4324:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4325:FreeRTOS/Source/tasks.c ****                 }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 97


4326:FreeRTOS/Source/tasks.c ****             }
4327:FreeRTOS/Source/tasks.c ****             else
4328:FreeRTOS/Source/tasks.c ****             {
4329:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4330:FreeRTOS/Source/tasks.c ****             }
4331:FreeRTOS/Source/tasks.c ****         }
4332:FreeRTOS/Source/tasks.c ****         else
4333:FreeRTOS/Source/tasks.c ****         {
4334:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4335:FreeRTOS/Source/tasks.c ****         }
4336:FreeRTOS/Source/tasks.c ****     }
4337:FreeRTOS/Source/tasks.c **** 
4338:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4339:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:FreeRTOS/Source/tasks.c **** 
4341:FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4342:FreeRTOS/Source/tasks.c **** 
4343:FreeRTOS/Source/tasks.c ****     void vTaskEnterCritical( void )
4344:FreeRTOS/Source/tasks.c ****     {
4345:FreeRTOS/Source/tasks.c ****         portDISABLE_INTERRUPTS();
4346:FreeRTOS/Source/tasks.c **** 
4347:FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4348:FreeRTOS/Source/tasks.c ****         {
4349:FreeRTOS/Source/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4350:FreeRTOS/Source/tasks.c **** 
4351:FreeRTOS/Source/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4352:FreeRTOS/Source/tasks.c ****              * function so  assert() if it is being called from an interrupt
4353:FreeRTOS/Source/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4354:FreeRTOS/Source/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4355:FreeRTOS/Source/tasks.c ****              * protect against recursive calls if the assert function also uses a
4356:FreeRTOS/Source/tasks.c ****              * critical section. */
4357:FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4358:FreeRTOS/Source/tasks.c ****             {
4359:FreeRTOS/Source/tasks.c ****                 portASSERT_IF_IN_ISR();
4360:FreeRTOS/Source/tasks.c ****             }
4361:FreeRTOS/Source/tasks.c ****         }
4362:FreeRTOS/Source/tasks.c ****         else
4363:FreeRTOS/Source/tasks.c ****         {
4364:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4365:FreeRTOS/Source/tasks.c ****         }
4366:FreeRTOS/Source/tasks.c ****     }
4367:FreeRTOS/Source/tasks.c **** 
4368:FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4369:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4370:FreeRTOS/Source/tasks.c **** 
4371:FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4372:FreeRTOS/Source/tasks.c **** 
4373:FreeRTOS/Source/tasks.c ****     void vTaskExitCritical( void )
4374:FreeRTOS/Source/tasks.c ****     {
4375:FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4376:FreeRTOS/Source/tasks.c ****         {
4377:FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4378:FreeRTOS/Source/tasks.c ****             {
4379:FreeRTOS/Source/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4380:FreeRTOS/Source/tasks.c **** 
4381:FreeRTOS/Source/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4382:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 98


4383:FreeRTOS/Source/tasks.c ****                     portENABLE_INTERRUPTS();
4384:FreeRTOS/Source/tasks.c ****                 }
4385:FreeRTOS/Source/tasks.c ****                 else
4386:FreeRTOS/Source/tasks.c ****                 {
4387:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4388:FreeRTOS/Source/tasks.c ****                 }
4389:FreeRTOS/Source/tasks.c ****             }
4390:FreeRTOS/Source/tasks.c ****             else
4391:FreeRTOS/Source/tasks.c ****             {
4392:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4393:FreeRTOS/Source/tasks.c ****             }
4394:FreeRTOS/Source/tasks.c ****         }
4395:FreeRTOS/Source/tasks.c ****         else
4396:FreeRTOS/Source/tasks.c ****         {
4397:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4398:FreeRTOS/Source/tasks.c ****         }
4399:FreeRTOS/Source/tasks.c ****     }
4400:FreeRTOS/Source/tasks.c **** 
4401:FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4402:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4403:FreeRTOS/Source/tasks.c **** 
4404:FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4405:FreeRTOS/Source/tasks.c **** 
4406:FreeRTOS/Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4407:FreeRTOS/Source/tasks.c ****                                         const char * pcTaskName )
4408:FreeRTOS/Source/tasks.c ****     {
4409:FreeRTOS/Source/tasks.c ****         size_t x;
4410:FreeRTOS/Source/tasks.c **** 
4411:FreeRTOS/Source/tasks.c ****         /* Start by copying the entire string. */
4412:FreeRTOS/Source/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4413:FreeRTOS/Source/tasks.c **** 
4414:FreeRTOS/Source/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4415:FreeRTOS/Source/tasks.c ****          * printed out. */
4416:FreeRTOS/Source/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4417:FreeRTOS/Source/tasks.c ****         {
4418:FreeRTOS/Source/tasks.c ****             pcBuffer[ x ] = ' ';
4419:FreeRTOS/Source/tasks.c ****         }
4420:FreeRTOS/Source/tasks.c **** 
4421:FreeRTOS/Source/tasks.c ****         /* Terminate. */
4422:FreeRTOS/Source/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4423:FreeRTOS/Source/tasks.c **** 
4424:FreeRTOS/Source/tasks.c ****         /* Return the new end of string. */
4425:FreeRTOS/Source/tasks.c ****         return &( pcBuffer[ x ] );
4426:FreeRTOS/Source/tasks.c ****     }
4427:FreeRTOS/Source/tasks.c **** 
4428:FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4429:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4430:FreeRTOS/Source/tasks.c **** 
4431:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4432:FreeRTOS/Source/tasks.c **** 
4433:FreeRTOS/Source/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4434:FreeRTOS/Source/tasks.c ****     {
4435:FreeRTOS/Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4436:FreeRTOS/Source/tasks.c ****         UBaseType_t uxArraySize, x;
4437:FreeRTOS/Source/tasks.c ****         char cStatus;
4438:FreeRTOS/Source/tasks.c **** 
4439:FreeRTOS/Source/tasks.c ****         /*
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 99


4440:FreeRTOS/Source/tasks.c ****          * PLEASE NOTE:
4441:FreeRTOS/Source/tasks.c ****          *
4442:FreeRTOS/Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4443:FreeRTOS/Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4444:FreeRTOS/Source/tasks.c ****          * scheduler.
4445:FreeRTOS/Source/tasks.c ****          *
4446:FreeRTOS/Source/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4447:FreeRTOS/Source/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4448:FreeRTOS/Source/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4449:FreeRTOS/Source/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4450:FreeRTOS/Source/tasks.c ****          * on top of stack - not the number of bytes.
4451:FreeRTOS/Source/tasks.c ****          *
4452:FreeRTOS/Source/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4453:FreeRTOS/Source/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4454:FreeRTOS/Source/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4455:FreeRTOS/Source/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4456:FreeRTOS/Source/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4457:FreeRTOS/Source/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4458:FreeRTOS/Source/tasks.c ****          * snprintf() implementation!).
4459:FreeRTOS/Source/tasks.c ****          *
4460:FreeRTOS/Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4461:FreeRTOS/Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4462:FreeRTOS/Source/tasks.c ****          * through a call to vTaskList().
4463:FreeRTOS/Source/tasks.c ****          */
4464:FreeRTOS/Source/tasks.c **** 
4465:FreeRTOS/Source/tasks.c **** 
4466:FreeRTOS/Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4467:FreeRTOS/Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4468:FreeRTOS/Source/tasks.c **** 
4469:FreeRTOS/Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4470:FreeRTOS/Source/tasks.c ****          * function is executing. */
4471:FreeRTOS/Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4472:FreeRTOS/Source/tasks.c **** 
4473:FreeRTOS/Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4474:FreeRTOS/Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4475:FreeRTOS/Source/tasks.c ****          * equate to NULL. */
4476:FreeRTOS/Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4477:FreeRTOS/Source/tasks.c **** 
4478:FreeRTOS/Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4479:FreeRTOS/Source/tasks.c ****         {
4480:FreeRTOS/Source/tasks.c ****             /* Generate the (binary) data. */
4481:FreeRTOS/Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4482:FreeRTOS/Source/tasks.c **** 
4483:FreeRTOS/Source/tasks.c ****             /* Create a human readable table from the binary data. */
4484:FreeRTOS/Source/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4485:FreeRTOS/Source/tasks.c ****             {
4486:FreeRTOS/Source/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4487:FreeRTOS/Source/tasks.c ****                 {
4488:FreeRTOS/Source/tasks.c ****                     case eRunning:
4489:FreeRTOS/Source/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4490:FreeRTOS/Source/tasks.c ****                         break;
4491:FreeRTOS/Source/tasks.c **** 
4492:FreeRTOS/Source/tasks.c ****                     case eReady:
4493:FreeRTOS/Source/tasks.c ****                         cStatus = tskREADY_CHAR;
4494:FreeRTOS/Source/tasks.c ****                         break;
4495:FreeRTOS/Source/tasks.c **** 
4496:FreeRTOS/Source/tasks.c ****                     case eBlocked:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 100


4497:FreeRTOS/Source/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4498:FreeRTOS/Source/tasks.c ****                         break;
4499:FreeRTOS/Source/tasks.c **** 
4500:FreeRTOS/Source/tasks.c ****                     case eSuspended:
4501:FreeRTOS/Source/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4502:FreeRTOS/Source/tasks.c ****                         break;
4503:FreeRTOS/Source/tasks.c **** 
4504:FreeRTOS/Source/tasks.c ****                     case eDeleted:
4505:FreeRTOS/Source/tasks.c ****                         cStatus = tskDELETED_CHAR;
4506:FreeRTOS/Source/tasks.c ****                         break;
4507:FreeRTOS/Source/tasks.c **** 
4508:FreeRTOS/Source/tasks.c ****                     case eInvalid: /* Fall through. */
4509:FreeRTOS/Source/tasks.c ****                     default:       /* Should not get here, but it is included
4510:FreeRTOS/Source/tasks.c ****                                     * to prevent static checking errors. */
4511:FreeRTOS/Source/tasks.c ****                         cStatus = ( char ) 0x00;
4512:FreeRTOS/Source/tasks.c ****                         break;
4513:FreeRTOS/Source/tasks.c ****                 }
4514:FreeRTOS/Source/tasks.c **** 
4515:FreeRTOS/Source/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4516:FreeRTOS/Source/tasks.c ****                  * can be printed in tabular form more easily. */
4517:FreeRTOS/Source/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4518:FreeRTOS/Source/tasks.c **** 
4519:FreeRTOS/Source/tasks.c ****                 /* Write the rest of the string. */
4520:FreeRTOS/Source/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4521:FreeRTOS/Source/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4522:FreeRTOS/Source/tasks.c ****             }
4523:FreeRTOS/Source/tasks.c **** 
4524:FreeRTOS/Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4525:FreeRTOS/Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4526:FreeRTOS/Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4527:FreeRTOS/Source/tasks.c ****         }
4528:FreeRTOS/Source/tasks.c ****         else
4529:FreeRTOS/Source/tasks.c ****         {
4530:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4531:FreeRTOS/Source/tasks.c ****         }
4532:FreeRTOS/Source/tasks.c ****     }
4533:FreeRTOS/Source/tasks.c **** 
4534:FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4535:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4536:FreeRTOS/Source/tasks.c **** 
4537:FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4538:FreeRTOS/Source/tasks.c **** 
4539:FreeRTOS/Source/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4540:FreeRTOS/Source/tasks.c ****     {
4541:FreeRTOS/Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4542:FreeRTOS/Source/tasks.c ****         UBaseType_t uxArraySize, x;
4543:FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4544:FreeRTOS/Source/tasks.c **** 
4545:FreeRTOS/Source/tasks.c ****         /*
4546:FreeRTOS/Source/tasks.c ****          * PLEASE NOTE:
4547:FreeRTOS/Source/tasks.c ****          *
4548:FreeRTOS/Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4549:FreeRTOS/Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4550:FreeRTOS/Source/tasks.c ****          * scheduler.
4551:FreeRTOS/Source/tasks.c ****          *
4552:FreeRTOS/Source/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4553:FreeRTOS/Source/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 101


4554:FreeRTOS/Source/tasks.c ****          * displays the amount of time each task has spent in the Running state
4555:FreeRTOS/Source/tasks.c ****          * in both absolute and percentage terms.
4556:FreeRTOS/Source/tasks.c ****          *
4557:FreeRTOS/Source/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4558:FreeRTOS/Source/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4559:FreeRTOS/Source/tasks.c ****          * provide different results on different platforms.  An alternative,
4560:FreeRTOS/Source/tasks.c ****          * tiny, third party, and limited functionality implementation of
4561:FreeRTOS/Source/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4562:FreeRTOS/Source/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4563:FreeRTOS/Source/tasks.c ****          * a full snprintf() implementation!).
4564:FreeRTOS/Source/tasks.c ****          *
4565:FreeRTOS/Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4566:FreeRTOS/Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4567:FreeRTOS/Source/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4568:FreeRTOS/Source/tasks.c ****          */
4569:FreeRTOS/Source/tasks.c **** 
4570:FreeRTOS/Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4571:FreeRTOS/Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4572:FreeRTOS/Source/tasks.c **** 
4573:FreeRTOS/Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4574:FreeRTOS/Source/tasks.c ****          * function is executing. */
4575:FreeRTOS/Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4576:FreeRTOS/Source/tasks.c **** 
4577:FreeRTOS/Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4578:FreeRTOS/Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4579:FreeRTOS/Source/tasks.c ****          * equate to NULL. */
4580:FreeRTOS/Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4581:FreeRTOS/Source/tasks.c **** 
4582:FreeRTOS/Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4583:FreeRTOS/Source/tasks.c ****         {
4584:FreeRTOS/Source/tasks.c ****             /* Generate the (binary) data. */
4585:FreeRTOS/Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4586:FreeRTOS/Source/tasks.c **** 
4587:FreeRTOS/Source/tasks.c ****             /* For percentage calculations. */
4588:FreeRTOS/Source/tasks.c ****             ulTotalTime /= 100UL;
4589:FreeRTOS/Source/tasks.c **** 
4590:FreeRTOS/Source/tasks.c ****             /* Avoid divide by zero errors. */
4591:FreeRTOS/Source/tasks.c ****             if( ulTotalTime > 0UL )
4592:FreeRTOS/Source/tasks.c ****             {
4593:FreeRTOS/Source/tasks.c ****                 /* Create a human readable table from the binary data. */
4594:FreeRTOS/Source/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4595:FreeRTOS/Source/tasks.c ****                 {
4596:FreeRTOS/Source/tasks.c ****                     /* What percentage of the total run time has the task used?
4597:FreeRTOS/Source/tasks.c ****                      * This will always be rounded down to the nearest integer.
4598:FreeRTOS/Source/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4599:FreeRTOS/Source/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4600:FreeRTOS/Source/tasks.c **** 
4601:FreeRTOS/Source/tasks.c ****                     /* Write the task name to the string, padding with
4602:FreeRTOS/Source/tasks.c ****                      * spaces so it can be printed in tabular form more
4603:FreeRTOS/Source/tasks.c ****                      * easily. */
4604:FreeRTOS/Source/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4605:FreeRTOS/Source/tasks.c **** 
4606:FreeRTOS/Source/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4607:FreeRTOS/Source/tasks.c ****                     {
4608:FreeRTOS/Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4609:FreeRTOS/Source/tasks.c ****                         {
4610:FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 102


4611:FreeRTOS/Source/tasks.c ****                         }
4612:FreeRTOS/Source/tasks.c ****                         #else
4613:FreeRTOS/Source/tasks.c ****                         {
4614:FreeRTOS/Source/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4615:FreeRTOS/Source/tasks.c ****                              * printf() library can be used. */
4616:FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4617:FreeRTOS/Source/tasks.c ****                         }
4618:FreeRTOS/Source/tasks.c ****                         #endif
4619:FreeRTOS/Source/tasks.c ****                     }
4620:FreeRTOS/Source/tasks.c ****                     else
4621:FreeRTOS/Source/tasks.c ****                     {
4622:FreeRTOS/Source/tasks.c ****                         /* If the percentage is zero here then the task has
4623:FreeRTOS/Source/tasks.c ****                          * consumed less than 1% of the total run time. */
4624:FreeRTOS/Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4625:FreeRTOS/Source/tasks.c ****                         {
4626:FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4627:FreeRTOS/Source/tasks.c ****                         }
4628:FreeRTOS/Source/tasks.c ****                         #else
4629:FreeRTOS/Source/tasks.c ****                         {
4630:FreeRTOS/Source/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4631:FreeRTOS/Source/tasks.c ****                              * printf() library can be used. */
4632:FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4633:FreeRTOS/Source/tasks.c ****                         }
4634:FreeRTOS/Source/tasks.c ****                         #endif
4635:FreeRTOS/Source/tasks.c ****                     }
4636:FreeRTOS/Source/tasks.c **** 
4637:FreeRTOS/Source/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4638:FreeRTOS/Source/tasks.c ****                 }
4639:FreeRTOS/Source/tasks.c ****             }
4640:FreeRTOS/Source/tasks.c ****             else
4641:FreeRTOS/Source/tasks.c ****             {
4642:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4643:FreeRTOS/Source/tasks.c ****             }
4644:FreeRTOS/Source/tasks.c **** 
4645:FreeRTOS/Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4646:FreeRTOS/Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4647:FreeRTOS/Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4648:FreeRTOS/Source/tasks.c ****         }
4649:FreeRTOS/Source/tasks.c ****         else
4650:FreeRTOS/Source/tasks.c ****         {
4651:FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4652:FreeRTOS/Source/tasks.c ****         }
4653:FreeRTOS/Source/tasks.c ****     }
4654:FreeRTOS/Source/tasks.c **** 
4655:FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4656:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4657:FreeRTOS/Source/tasks.c **** 
4658:FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4659:FreeRTOS/Source/tasks.c **** {
4660:FreeRTOS/Source/tasks.c ****     TickType_t uxReturn;
4661:FreeRTOS/Source/tasks.c **** 
4662:FreeRTOS/Source/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4663:FreeRTOS/Source/tasks.c **** 
4664:FreeRTOS/Source/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4665:FreeRTOS/Source/tasks.c ****      * queues and semaphores. */
4666:FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4667:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 103


4668:FreeRTOS/Source/tasks.c ****     return uxReturn;
4669:FreeRTOS/Source/tasks.c **** }
4670:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4671:FreeRTOS/Source/tasks.c **** 
4672:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4673:FreeRTOS/Source/tasks.c **** 
4674:FreeRTOS/Source/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4675:FreeRTOS/Source/tasks.c ****     {
4676:FreeRTOS/Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4677:FreeRTOS/Source/tasks.c ****          * then pxCurrentTCB will be NULL. */
4678:FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB != NULL )
4679:FreeRTOS/Source/tasks.c ****         {
4680:FreeRTOS/Source/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4681:FreeRTOS/Source/tasks.c ****         }
4682:FreeRTOS/Source/tasks.c **** 
4683:FreeRTOS/Source/tasks.c ****         return pxCurrentTCB;
4684:FreeRTOS/Source/tasks.c ****     }
4685:FreeRTOS/Source/tasks.c **** 
4686:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4687:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4688:FreeRTOS/Source/tasks.c **** 
4689:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4690:FreeRTOS/Source/tasks.c **** 
4691:FreeRTOS/Source/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4692:FreeRTOS/Source/tasks.c ****                                       BaseType_t xClearCountOnExit,
4693:FreeRTOS/Source/tasks.c ****                                       TickType_t xTicksToWait )
4694:FreeRTOS/Source/tasks.c ****     {
4695:FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
4696:FreeRTOS/Source/tasks.c **** 
4697:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4698:FreeRTOS/Source/tasks.c **** 
4699:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4700:FreeRTOS/Source/tasks.c ****         {
4701:FreeRTOS/Source/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4702:FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4703:FreeRTOS/Source/tasks.c ****             {
4704:FreeRTOS/Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4705:FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4706:FreeRTOS/Source/tasks.c **** 
4707:FreeRTOS/Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4708:FreeRTOS/Source/tasks.c ****                 {
4709:FreeRTOS/Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4710:FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4711:FreeRTOS/Source/tasks.c **** 
4712:FreeRTOS/Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4713:FreeRTOS/Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4714:FreeRTOS/Source/tasks.c ****                      * critical section exits) - but it is not something that
4715:FreeRTOS/Source/tasks.c ****                      * application code should ever do. */
4716:FreeRTOS/Source/tasks.c ****                     portYIELD_WITHIN_API();
4717:FreeRTOS/Source/tasks.c ****                 }
4718:FreeRTOS/Source/tasks.c ****                 else
4719:FreeRTOS/Source/tasks.c ****                 {
4720:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4721:FreeRTOS/Source/tasks.c ****                 }
4722:FreeRTOS/Source/tasks.c ****             }
4723:FreeRTOS/Source/tasks.c ****             else
4724:FreeRTOS/Source/tasks.c ****             {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 104


4725:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:FreeRTOS/Source/tasks.c ****             }
4727:FreeRTOS/Source/tasks.c ****         }
4728:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4729:FreeRTOS/Source/tasks.c **** 
4730:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4731:FreeRTOS/Source/tasks.c ****         {
4732:FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4733:FreeRTOS/Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4734:FreeRTOS/Source/tasks.c **** 
4735:FreeRTOS/Source/tasks.c ****             if( ulReturn != 0UL )
4736:FreeRTOS/Source/tasks.c ****             {
4737:FreeRTOS/Source/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4738:FreeRTOS/Source/tasks.c ****                 {
4739:FreeRTOS/Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4740:FreeRTOS/Source/tasks.c ****                 }
4741:FreeRTOS/Source/tasks.c ****                 else
4742:FreeRTOS/Source/tasks.c ****                 {
4743:FreeRTOS/Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4744:FreeRTOS/Source/tasks.c ****                 }
4745:FreeRTOS/Source/tasks.c ****             }
4746:FreeRTOS/Source/tasks.c ****             else
4747:FreeRTOS/Source/tasks.c ****             {
4748:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4749:FreeRTOS/Source/tasks.c ****             }
4750:FreeRTOS/Source/tasks.c **** 
4751:FreeRTOS/Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4752:FreeRTOS/Source/tasks.c ****         }
4753:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4754:FreeRTOS/Source/tasks.c **** 
4755:FreeRTOS/Source/tasks.c ****         return ulReturn;
4756:FreeRTOS/Source/tasks.c ****     }
4757:FreeRTOS/Source/tasks.c **** 
4758:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4759:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4760:FreeRTOS/Source/tasks.c **** 
4761:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4762:FreeRTOS/Source/tasks.c **** 
4763:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4764:FreeRTOS/Source/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4765:FreeRTOS/Source/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4766:FreeRTOS/Source/tasks.c ****                                        uint32_t * pulNotificationValue,
4767:FreeRTOS/Source/tasks.c ****                                        TickType_t xTicksToWait )
4768:FreeRTOS/Source/tasks.c ****     {
4769:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
4770:FreeRTOS/Source/tasks.c **** 
4771:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4772:FreeRTOS/Source/tasks.c **** 
4773:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4774:FreeRTOS/Source/tasks.c ****         {
4775:FreeRTOS/Source/tasks.c ****             /* Only block if a notification is not already pending. */
4776:FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4777:FreeRTOS/Source/tasks.c ****             {
4778:FreeRTOS/Source/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4779:FreeRTOS/Source/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4780:FreeRTOS/Source/tasks.c ****                  * clear the value to zero. */
4781:FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 105


4782:FreeRTOS/Source/tasks.c **** 
4783:FreeRTOS/Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4784:FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4785:FreeRTOS/Source/tasks.c **** 
4786:FreeRTOS/Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4787:FreeRTOS/Source/tasks.c ****                 {
4788:FreeRTOS/Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4789:FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4790:FreeRTOS/Source/tasks.c **** 
4791:FreeRTOS/Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4792:FreeRTOS/Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4793:FreeRTOS/Source/tasks.c ****                      * critical section exits) - but it is not something that
4794:FreeRTOS/Source/tasks.c ****                      * application code should ever do. */
4795:FreeRTOS/Source/tasks.c ****                     portYIELD_WITHIN_API();
4796:FreeRTOS/Source/tasks.c ****                 }
4797:FreeRTOS/Source/tasks.c ****                 else
4798:FreeRTOS/Source/tasks.c ****                 {
4799:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4800:FreeRTOS/Source/tasks.c ****                 }
4801:FreeRTOS/Source/tasks.c ****             }
4802:FreeRTOS/Source/tasks.c ****             else
4803:FreeRTOS/Source/tasks.c ****             {
4804:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:FreeRTOS/Source/tasks.c ****             }
4806:FreeRTOS/Source/tasks.c ****         }
4807:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4808:FreeRTOS/Source/tasks.c **** 
4809:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4810:FreeRTOS/Source/tasks.c ****         {
4811:FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4812:FreeRTOS/Source/tasks.c **** 
4813:FreeRTOS/Source/tasks.c ****             if( pulNotificationValue != NULL )
4814:FreeRTOS/Source/tasks.c ****             {
4815:FreeRTOS/Source/tasks.c ****                 /* Output the current notification value, which may or may not
4816:FreeRTOS/Source/tasks.c ****                  * have changed. */
4817:FreeRTOS/Source/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4818:FreeRTOS/Source/tasks.c ****             }
4819:FreeRTOS/Source/tasks.c **** 
4820:FreeRTOS/Source/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4821:FreeRTOS/Source/tasks.c ****              * blocked state (because a notification was already pending) or the
4822:FreeRTOS/Source/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4823:FreeRTOS/Source/tasks.c ****              * unblocked because of a timeout. */
4824:FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4825:FreeRTOS/Source/tasks.c ****             {
4826:FreeRTOS/Source/tasks.c ****                 /* A notification was not received. */
4827:FreeRTOS/Source/tasks.c ****                 xReturn = pdFALSE;
4828:FreeRTOS/Source/tasks.c ****             }
4829:FreeRTOS/Source/tasks.c ****             else
4830:FreeRTOS/Source/tasks.c ****             {
4831:FreeRTOS/Source/tasks.c ****                 /* A notification was already pending or a notification was
4832:FreeRTOS/Source/tasks.c ****                  * received while the task was waiting. */
4833:FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4834:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
4835:FreeRTOS/Source/tasks.c ****             }
4836:FreeRTOS/Source/tasks.c **** 
4837:FreeRTOS/Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4838:FreeRTOS/Source/tasks.c ****         }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 106


4839:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4840:FreeRTOS/Source/tasks.c **** 
4841:FreeRTOS/Source/tasks.c ****         return xReturn;
4842:FreeRTOS/Source/tasks.c ****     }
4843:FreeRTOS/Source/tasks.c **** 
4844:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4845:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4846:FreeRTOS/Source/tasks.c **** 
4847:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4848:FreeRTOS/Source/tasks.c **** 
4849:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4850:FreeRTOS/Source/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4851:FreeRTOS/Source/tasks.c ****                                    uint32_t ulValue,
4852:FreeRTOS/Source/tasks.c ****                                    eNotifyAction eAction,
4853:FreeRTOS/Source/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4854:FreeRTOS/Source/tasks.c ****     {
4855:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
4856:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
4857:FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4858:FreeRTOS/Source/tasks.c **** 
4859:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4860:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
4861:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
4862:FreeRTOS/Source/tasks.c **** 
4863:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4864:FreeRTOS/Source/tasks.c ****         {
4865:FreeRTOS/Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4866:FreeRTOS/Source/tasks.c ****             {
4867:FreeRTOS/Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4868:FreeRTOS/Source/tasks.c ****             }
4869:FreeRTOS/Source/tasks.c **** 
4870:FreeRTOS/Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4871:FreeRTOS/Source/tasks.c **** 
4872:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4873:FreeRTOS/Source/tasks.c **** 
4874:FreeRTOS/Source/tasks.c ****             switch( eAction )
4875:FreeRTOS/Source/tasks.c ****             {
4876:FreeRTOS/Source/tasks.c ****                 case eSetBits:
4877:FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4878:FreeRTOS/Source/tasks.c ****                     break;
4879:FreeRTOS/Source/tasks.c **** 
4880:FreeRTOS/Source/tasks.c ****                 case eIncrement:
4881:FreeRTOS/Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4882:FreeRTOS/Source/tasks.c ****                     break;
4883:FreeRTOS/Source/tasks.c **** 
4884:FreeRTOS/Source/tasks.c ****                 case eSetValueWithOverwrite:
4885:FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4886:FreeRTOS/Source/tasks.c ****                     break;
4887:FreeRTOS/Source/tasks.c **** 
4888:FreeRTOS/Source/tasks.c ****                 case eSetValueWithoutOverwrite:
4889:FreeRTOS/Source/tasks.c **** 
4890:FreeRTOS/Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4891:FreeRTOS/Source/tasks.c ****                     {
4892:FreeRTOS/Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4893:FreeRTOS/Source/tasks.c ****                     }
4894:FreeRTOS/Source/tasks.c ****                     else
4895:FreeRTOS/Source/tasks.c ****                     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 107


4896:FreeRTOS/Source/tasks.c ****                         /* The value could not be written to the task. */
4897:FreeRTOS/Source/tasks.c ****                         xReturn = pdFAIL;
4898:FreeRTOS/Source/tasks.c ****                     }
4899:FreeRTOS/Source/tasks.c **** 
4900:FreeRTOS/Source/tasks.c ****                     break;
4901:FreeRTOS/Source/tasks.c **** 
4902:FreeRTOS/Source/tasks.c ****                 case eNoAction:
4903:FreeRTOS/Source/tasks.c **** 
4904:FreeRTOS/Source/tasks.c ****                     /* The task is being notified without its notify value being
4905:FreeRTOS/Source/tasks.c ****                      * updated. */
4906:FreeRTOS/Source/tasks.c ****                     break;
4907:FreeRTOS/Source/tasks.c **** 
4908:FreeRTOS/Source/tasks.c ****                 default:
4909:FreeRTOS/Source/tasks.c **** 
4910:FreeRTOS/Source/tasks.c ****                     /* Should not get here if all enums are handled.
4911:FreeRTOS/Source/tasks.c ****                      * Artificially force an assert by testing a value the
4912:FreeRTOS/Source/tasks.c ****                      * compiler can't assume is const. */
4913:FreeRTOS/Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4914:FreeRTOS/Source/tasks.c **** 
4915:FreeRTOS/Source/tasks.c ****                     break;
4916:FreeRTOS/Source/tasks.c ****             }
4917:FreeRTOS/Source/tasks.c **** 
4918:FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4919:FreeRTOS/Source/tasks.c **** 
4920:FreeRTOS/Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4921:FreeRTOS/Source/tasks.c ****              * notification then unblock it now. */
4922:FreeRTOS/Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4923:FreeRTOS/Source/tasks.c ****             {
4924:FreeRTOS/Source/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4925:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4926:FreeRTOS/Source/tasks.c **** 
4927:FreeRTOS/Source/tasks.c ****                 /* The task should not have been on an event list. */
4928:FreeRTOS/Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4929:FreeRTOS/Source/tasks.c **** 
4930:FreeRTOS/Source/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4931:FreeRTOS/Source/tasks.c ****                 {
4932:FreeRTOS/Source/tasks.c ****                     /* If a task is blocked waiting for a notification then
4933:FreeRTOS/Source/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
4934:FreeRTOS/Source/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
4935:FreeRTOS/Source/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
4936:FreeRTOS/Source/tasks.c ****                      * because it will automatically get reset to a new value when
4937:FreeRTOS/Source/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
4938:FreeRTOS/Source/tasks.c ****                      * tickless idling is used it might be more important to enter
4939:FreeRTOS/Source/tasks.c ****                      * sleep mode at the earliest possible time - so reset
4940:FreeRTOS/Source/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
4941:FreeRTOS/Source/tasks.c ****                      * earliest possible time. */
4942:FreeRTOS/Source/tasks.c ****                     prvResetNextTaskUnblockTime();
4943:FreeRTOS/Source/tasks.c ****                 }
4944:FreeRTOS/Source/tasks.c ****                 #endif
4945:FreeRTOS/Source/tasks.c **** 
4946:FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4947:FreeRTOS/Source/tasks.c ****                 {
4948:FreeRTOS/Source/tasks.c ****                     /* The notified task has a priority above the currently
4949:FreeRTOS/Source/tasks.c ****                      * executing task so a yield is required. */
4950:FreeRTOS/Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4951:FreeRTOS/Source/tasks.c ****                 }
4952:FreeRTOS/Source/tasks.c ****                 else
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 108


4953:FreeRTOS/Source/tasks.c ****                 {
4954:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4955:FreeRTOS/Source/tasks.c ****                 }
4956:FreeRTOS/Source/tasks.c ****             }
4957:FreeRTOS/Source/tasks.c ****             else
4958:FreeRTOS/Source/tasks.c ****             {
4959:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4960:FreeRTOS/Source/tasks.c ****             }
4961:FreeRTOS/Source/tasks.c ****         }
4962:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4963:FreeRTOS/Source/tasks.c **** 
4964:FreeRTOS/Source/tasks.c ****         return xReturn;
4965:FreeRTOS/Source/tasks.c ****     }
4966:FreeRTOS/Source/tasks.c **** 
4967:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4968:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4969:FreeRTOS/Source/tasks.c **** 
4970:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4971:FreeRTOS/Source/tasks.c **** 
4972:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4973:FreeRTOS/Source/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4974:FreeRTOS/Source/tasks.c ****                                           uint32_t ulValue,
4975:FreeRTOS/Source/tasks.c ****                                           eNotifyAction eAction,
4976:FreeRTOS/Source/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4977:FreeRTOS/Source/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4978:FreeRTOS/Source/tasks.c ****     {
4979:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
4980:FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4981:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
4982:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4983:FreeRTOS/Source/tasks.c **** 
4984:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
4985:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4986:FreeRTOS/Source/tasks.c **** 
4987:FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4988:FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4989:FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4990:FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4991:FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4992:FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
4993:FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4994:FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4995:FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
4996:FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4997:FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4998:FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4999:FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5000:FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5001:FreeRTOS/Source/tasks.c ****          * provided on the following link:
5002:FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5003:FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5004:FreeRTOS/Source/tasks.c **** 
5005:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
5006:FreeRTOS/Source/tasks.c **** 
5007:FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5008:FreeRTOS/Source/tasks.c ****         {
5009:FreeRTOS/Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 109


5010:FreeRTOS/Source/tasks.c ****             {
5011:FreeRTOS/Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5012:FreeRTOS/Source/tasks.c ****             }
5013:FreeRTOS/Source/tasks.c **** 
5014:FreeRTOS/Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5015:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5016:FreeRTOS/Source/tasks.c **** 
5017:FreeRTOS/Source/tasks.c ****             switch( eAction )
5018:FreeRTOS/Source/tasks.c ****             {
5019:FreeRTOS/Source/tasks.c ****                 case eSetBits:
5020:FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5021:FreeRTOS/Source/tasks.c ****                     break;
5022:FreeRTOS/Source/tasks.c **** 
5023:FreeRTOS/Source/tasks.c ****                 case eIncrement:
5024:FreeRTOS/Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5025:FreeRTOS/Source/tasks.c ****                     break;
5026:FreeRTOS/Source/tasks.c **** 
5027:FreeRTOS/Source/tasks.c ****                 case eSetValueWithOverwrite:
5028:FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5029:FreeRTOS/Source/tasks.c ****                     break;
5030:FreeRTOS/Source/tasks.c **** 
5031:FreeRTOS/Source/tasks.c ****                 case eSetValueWithoutOverwrite:
5032:FreeRTOS/Source/tasks.c **** 
5033:FreeRTOS/Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5034:FreeRTOS/Source/tasks.c ****                     {
5035:FreeRTOS/Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5036:FreeRTOS/Source/tasks.c ****                     }
5037:FreeRTOS/Source/tasks.c ****                     else
5038:FreeRTOS/Source/tasks.c ****                     {
5039:FreeRTOS/Source/tasks.c ****                         /* The value could not be written to the task. */
5040:FreeRTOS/Source/tasks.c ****                         xReturn = pdFAIL;
5041:FreeRTOS/Source/tasks.c ****                     }
5042:FreeRTOS/Source/tasks.c **** 
5043:FreeRTOS/Source/tasks.c ****                     break;
5044:FreeRTOS/Source/tasks.c **** 
5045:FreeRTOS/Source/tasks.c ****                 case eNoAction:
5046:FreeRTOS/Source/tasks.c **** 
5047:FreeRTOS/Source/tasks.c ****                     /* The task is being notified without its notify value being
5048:FreeRTOS/Source/tasks.c ****                      * updated. */
5049:FreeRTOS/Source/tasks.c ****                     break;
5050:FreeRTOS/Source/tasks.c **** 
5051:FreeRTOS/Source/tasks.c ****                 default:
5052:FreeRTOS/Source/tasks.c **** 
5053:FreeRTOS/Source/tasks.c ****                     /* Should not get here if all enums are handled.
5054:FreeRTOS/Source/tasks.c ****                      * Artificially force an assert by testing a value the
5055:FreeRTOS/Source/tasks.c ****                      * compiler can't assume is const. */
5056:FreeRTOS/Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5057:FreeRTOS/Source/tasks.c ****                     break;
5058:FreeRTOS/Source/tasks.c ****             }
5059:FreeRTOS/Source/tasks.c **** 
5060:FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5061:FreeRTOS/Source/tasks.c **** 
5062:FreeRTOS/Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5063:FreeRTOS/Source/tasks.c ****              * notification then unblock it now. */
5064:FreeRTOS/Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5065:FreeRTOS/Source/tasks.c ****             {
5066:FreeRTOS/Source/tasks.c ****                 /* The task should not have been on an event list. */
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 110


5067:FreeRTOS/Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5068:FreeRTOS/Source/tasks.c **** 
5069:FreeRTOS/Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5070:FreeRTOS/Source/tasks.c ****                 {
5071:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5072:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5073:FreeRTOS/Source/tasks.c ****                 }
5074:FreeRTOS/Source/tasks.c ****                 else
5075:FreeRTOS/Source/tasks.c ****                 {
5076:FreeRTOS/Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5077:FreeRTOS/Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5078:FreeRTOS/Source/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5079:FreeRTOS/Source/tasks.c ****                 }
5080:FreeRTOS/Source/tasks.c **** 
5081:FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5082:FreeRTOS/Source/tasks.c ****                 {
5083:FreeRTOS/Source/tasks.c ****                     /* The notified task has a priority above the currently
5084:FreeRTOS/Source/tasks.c ****                      * executing task so a yield is required. */
5085:FreeRTOS/Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5086:FreeRTOS/Source/tasks.c ****                     {
5087:FreeRTOS/Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5088:FreeRTOS/Source/tasks.c ****                     }
5089:FreeRTOS/Source/tasks.c **** 
5090:FreeRTOS/Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5091:FreeRTOS/Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5092:FreeRTOS/Source/tasks.c ****                      * safe FreeRTOS function. */
5093:FreeRTOS/Source/tasks.c ****                     xYieldPending = pdTRUE;
5094:FreeRTOS/Source/tasks.c ****                 }
5095:FreeRTOS/Source/tasks.c ****                 else
5096:FreeRTOS/Source/tasks.c ****                 {
5097:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5098:FreeRTOS/Source/tasks.c ****                 }
5099:FreeRTOS/Source/tasks.c ****             }
5100:FreeRTOS/Source/tasks.c ****         }
5101:FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5102:FreeRTOS/Source/tasks.c **** 
5103:FreeRTOS/Source/tasks.c ****         return xReturn;
5104:FreeRTOS/Source/tasks.c ****     }
5105:FreeRTOS/Source/tasks.c **** 
5106:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5107:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5108:FreeRTOS/Source/tasks.c **** 
5109:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5110:FreeRTOS/Source/tasks.c **** 
5111:FreeRTOS/Source/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5112:FreeRTOS/Source/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5113:FreeRTOS/Source/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5114:FreeRTOS/Source/tasks.c ****     {
5115:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5116:FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
5117:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5118:FreeRTOS/Source/tasks.c **** 
5119:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
5120:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5121:FreeRTOS/Source/tasks.c **** 
5122:FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5123:FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 111


5124:FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5125:FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5126:FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5127:FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
5128:FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5129:FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5130:FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
5131:FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5132:FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5133:FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5134:FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5135:FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5136:FreeRTOS/Source/tasks.c ****          * provided on the following link:
5137:FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5138:FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5139:FreeRTOS/Source/tasks.c **** 
5140:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
5141:FreeRTOS/Source/tasks.c **** 
5142:FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5143:FreeRTOS/Source/tasks.c ****         {
5144:FreeRTOS/Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5145:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5146:FreeRTOS/Source/tasks.c **** 
5147:FreeRTOS/Source/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5148:FreeRTOS/Source/tasks.c ****              * semaphore. */
5149:FreeRTOS/Source/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5150:FreeRTOS/Source/tasks.c **** 
5151:FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5152:FreeRTOS/Source/tasks.c **** 
5153:FreeRTOS/Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5154:FreeRTOS/Source/tasks.c ****              * notification then unblock it now. */
5155:FreeRTOS/Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5156:FreeRTOS/Source/tasks.c ****             {
5157:FreeRTOS/Source/tasks.c ****                 /* The task should not have been on an event list. */
5158:FreeRTOS/Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5159:FreeRTOS/Source/tasks.c **** 
5160:FreeRTOS/Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5161:FreeRTOS/Source/tasks.c ****                 {
5162:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5163:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5164:FreeRTOS/Source/tasks.c ****                 }
5165:FreeRTOS/Source/tasks.c ****                 else
5166:FreeRTOS/Source/tasks.c ****                 {
5167:FreeRTOS/Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5168:FreeRTOS/Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5169:FreeRTOS/Source/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5170:FreeRTOS/Source/tasks.c ****                 }
5171:FreeRTOS/Source/tasks.c **** 
5172:FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5173:FreeRTOS/Source/tasks.c ****                 {
5174:FreeRTOS/Source/tasks.c ****                     /* The notified task has a priority above the currently
5175:FreeRTOS/Source/tasks.c ****                      * executing task so a yield is required. */
5176:FreeRTOS/Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5177:FreeRTOS/Source/tasks.c ****                     {
5178:FreeRTOS/Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5179:FreeRTOS/Source/tasks.c ****                     }
5180:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 112


5181:FreeRTOS/Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5182:FreeRTOS/Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5183:FreeRTOS/Source/tasks.c ****                      * safe FreeRTOS function. */
5184:FreeRTOS/Source/tasks.c ****                     xYieldPending = pdTRUE;
5185:FreeRTOS/Source/tasks.c ****                 }
5186:FreeRTOS/Source/tasks.c ****                 else
5187:FreeRTOS/Source/tasks.c ****                 {
5188:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5189:FreeRTOS/Source/tasks.c ****                 }
5190:FreeRTOS/Source/tasks.c ****             }
5191:FreeRTOS/Source/tasks.c ****         }
5192:FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5193:FreeRTOS/Source/tasks.c ****     }
5194:FreeRTOS/Source/tasks.c **** 
5195:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5196:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5197:FreeRTOS/Source/tasks.c **** 
5198:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5199:FreeRTOS/Source/tasks.c **** 
5200:FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5201:FreeRTOS/Source/tasks.c ****                                              UBaseType_t uxIndexToClear )
5202:FreeRTOS/Source/tasks.c ****     {
5203:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5204:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
5205:FreeRTOS/Source/tasks.c **** 
5206:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5207:FreeRTOS/Source/tasks.c **** 
5208:FreeRTOS/Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5209:FreeRTOS/Source/tasks.c ****          * its notification state cleared. */
5210:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5211:FreeRTOS/Source/tasks.c **** 
5212:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
5213:FreeRTOS/Source/tasks.c ****         {
5214:FreeRTOS/Source/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5215:FreeRTOS/Source/tasks.c ****             {
5216:FreeRTOS/Source/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5217:FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
5218:FreeRTOS/Source/tasks.c ****             }
5219:FreeRTOS/Source/tasks.c ****             else
5220:FreeRTOS/Source/tasks.c ****             {
5221:FreeRTOS/Source/tasks.c ****                 xReturn = pdFAIL;
5222:FreeRTOS/Source/tasks.c ****             }
5223:FreeRTOS/Source/tasks.c ****         }
5224:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
5225:FreeRTOS/Source/tasks.c **** 
5226:FreeRTOS/Source/tasks.c ****         return xReturn;
5227:FreeRTOS/Source/tasks.c ****     }
5228:FreeRTOS/Source/tasks.c **** 
5229:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5230:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5231:FreeRTOS/Source/tasks.c **** 
5232:FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5233:FreeRTOS/Source/tasks.c **** 
5234:FreeRTOS/Source/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5235:FreeRTOS/Source/tasks.c ****                                             UBaseType_t uxIndexToClear,
5236:FreeRTOS/Source/tasks.c ****                                             uint32_t ulBitsToClear )
5237:FreeRTOS/Source/tasks.c ****     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 113


5238:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5239:FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
5240:FreeRTOS/Source/tasks.c **** 
5241:FreeRTOS/Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5242:FreeRTOS/Source/tasks.c ****          * its notification state cleared. */
5243:FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5244:FreeRTOS/Source/tasks.c **** 
5245:FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
5246:FreeRTOS/Source/tasks.c ****         {
5247:FreeRTOS/Source/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5248:FreeRTOS/Source/tasks.c ****              * then clear the bit mask. */
5249:FreeRTOS/Source/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5250:FreeRTOS/Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5251:FreeRTOS/Source/tasks.c ****         }
5252:FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
5253:FreeRTOS/Source/tasks.c **** 
5254:FreeRTOS/Source/tasks.c ****         return ulReturn;
5255:FreeRTOS/Source/tasks.c ****     }
5256:FreeRTOS/Source/tasks.c **** 
5257:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5258:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5259:FreeRTOS/Source/tasks.c **** 
5260:FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5261:FreeRTOS/Source/tasks.c **** 
5262:FreeRTOS/Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5263:FreeRTOS/Source/tasks.c ****     {
5264:FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5265:FreeRTOS/Source/tasks.c ****     }
5266:FreeRTOS/Source/tasks.c **** 
5267:FreeRTOS/Source/tasks.c **** #endif
5268:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5269:FreeRTOS/Source/tasks.c **** 
5270:FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5271:FreeRTOS/Source/tasks.c **** 
5272:FreeRTOS/Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5273:FreeRTOS/Source/tasks.c ****     {
5274:FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5275:FreeRTOS/Source/tasks.c **** 
5276:FreeRTOS/Source/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5277:FreeRTOS/Source/tasks.c **** 
5278:FreeRTOS/Source/tasks.c ****         /* For percentage calculations. */
5279:FreeRTOS/Source/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5280:FreeRTOS/Source/tasks.c **** 
5281:FreeRTOS/Source/tasks.c ****         /* Avoid divide by zero errors. */
5282:FreeRTOS/Source/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5283:FreeRTOS/Source/tasks.c ****         {
5284:FreeRTOS/Source/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5285:FreeRTOS/Source/tasks.c ****         }
5286:FreeRTOS/Source/tasks.c ****         else
5287:FreeRTOS/Source/tasks.c ****         {
5288:FreeRTOS/Source/tasks.c ****             ulReturn = 0;
5289:FreeRTOS/Source/tasks.c ****         }
5290:FreeRTOS/Source/tasks.c **** 
5291:FreeRTOS/Source/tasks.c ****         return ulReturn;
5292:FreeRTOS/Source/tasks.c ****     }
5293:FreeRTOS/Source/tasks.c **** 
5294:FreeRTOS/Source/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 114


5295:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5296:FreeRTOS/Source/tasks.c **** 
5297:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5298:FreeRTOS/Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5299:FreeRTOS/Source/tasks.c **** {
 789              		.loc 1 5299 1 is_stmt 1 view -0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              		.loc 1 5299 1 is_stmt 0 view .LVU224
 794 0000 70B5     		push	{r4, r5, r6, lr}
 795              	.LCFI6:
 796              		.cfi_def_cfa_offset 16
 797              		.cfi_offset 4, -16
 798              		.cfi_offset 5, -12
 799              		.cfi_offset 6, -8
 800              		.cfi_offset 14, -4
 801 0002 0446     		mov	r4, r0
 802 0004 0D46     		mov	r5, r1
5300:FreeRTOS/Source/tasks.c ****     TickType_t xTimeToWake;
 803              		.loc 1 5300 5 is_stmt 1 view .LVU225
5301:FreeRTOS/Source/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 804              		.loc 1 5301 5 view .LVU226
 805              		.loc 1 5301 22 is_stmt 0 view .LVU227
 806 0006 234B     		ldr	r3, .L63
 807 0008 1E68     		ldr	r6, [r3]
 808              	.LVL59:
5302:FreeRTOS/Source/tasks.c **** 
5303:FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5304:FreeRTOS/Source/tasks.c ****     {
5305:FreeRTOS/Source/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5306:FreeRTOS/Source/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5307:FreeRTOS/Source/tasks.c ****          * when the task leaves the Blocked state. */
5308:FreeRTOS/Source/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5309:FreeRTOS/Source/tasks.c ****     }
5310:FreeRTOS/Source/tasks.c ****     #endif
5311:FreeRTOS/Source/tasks.c **** 
5312:FreeRTOS/Source/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5313:FreeRTOS/Source/tasks.c ****      * as the same list item is used for both lists. */
5314:FreeRTOS/Source/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 809              		.loc 1 5314 5 is_stmt 1 view .LVU228
 810              		.loc 1 5314 38 is_stmt 0 view .LVU229
 811 000a 234B     		ldr	r3, .L63+4
 812 000c 1868     		ldr	r0, [r3]
 813              	.LVL60:
 814              		.loc 1 5314 9 view .LVU230
 815 000e 0430     		adds	r0, r0, #4
 816 0010 FFF7FEFF 		bl	uxListRemove
 817              	.LVL61:
 818              		.loc 1 5314 7 view .LVU231
 819 0014 48B9     		cbnz	r0, .L57
5315:FreeRTOS/Source/tasks.c ****     {
5316:FreeRTOS/Source/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5317:FreeRTOS/Source/tasks.c ****          * check, and the port reset macro can be called directly. */
5318:FreeRTOS/Source/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 820              		.loc 1 5318 9 is_stmt 1 view .LVU232
 821 0016 204B     		ldr	r3, .L63+4
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 115


 822 0018 1B68     		ldr	r3, [r3]
 823 001a DB6A     		ldr	r3, [r3, #44]
 824 001c 0122     		movs	r2, #1
 825 001e 9A40     		lsls	r2, r2, r3
 826 0020 1E49     		ldr	r1, .L63+8
 827 0022 0B68     		ldr	r3, [r1]
 828 0024 23EA0203 		bic	r3, r3, r2
 829 0028 0B60     		str	r3, [r1]
 830              	.L57:
5319:FreeRTOS/Source/tasks.c ****     }
5320:FreeRTOS/Source/tasks.c ****     else
5321:FreeRTOS/Source/tasks.c ****     {
5322:FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 831              		.loc 1 5322 33 view .LVU233
5323:FreeRTOS/Source/tasks.c ****     }
5324:FreeRTOS/Source/tasks.c **** 
5325:FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5326:FreeRTOS/Source/tasks.c ****     {
5327:FreeRTOS/Source/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 832              		.loc 1 5327 9 view .LVU234
 833              		.loc 1 5327 11 is_stmt 0 view .LVU235
 834 002a B4F1FF3F 		cmp	r4, #-1
 835 002e 0DD0     		beq	.L62
 836              	.L58:
5328:FreeRTOS/Source/tasks.c ****         {
5329:FreeRTOS/Source/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5330:FreeRTOS/Source/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5331:FreeRTOS/Source/tasks.c ****              * indefinitely. */
5332:FreeRTOS/Source/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5333:FreeRTOS/Source/tasks.c ****         }
5334:FreeRTOS/Source/tasks.c ****         else
5335:FreeRTOS/Source/tasks.c ****         {
5336:FreeRTOS/Source/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5337:FreeRTOS/Source/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5338:FreeRTOS/Source/tasks.c ****              * kernel will manage it correctly. */
5339:FreeRTOS/Source/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 837              		.loc 1 5339 13 is_stmt 1 view .LVU236
 838              		.loc 1 5339 25 is_stmt 0 view .LVU237
 839 0030 3444     		add	r4, r4, r6
 840              	.LVL62:
5340:FreeRTOS/Source/tasks.c **** 
5341:FreeRTOS/Source/tasks.c ****             /* The list item will be inserted in wake time order. */
5342:FreeRTOS/Source/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 841              		.loc 1 5342 13 is_stmt 1 view .LVU238
 842 0032 194B     		ldr	r3, .L63+4
 843 0034 1B68     		ldr	r3, [r3]
 844 0036 5C60     		str	r4, [r3, #4]
5343:FreeRTOS/Source/tasks.c **** 
5344:FreeRTOS/Source/tasks.c ****             if( xTimeToWake < xConstTickCount )
 845              		.loc 1 5344 13 view .LVU239
 846              		.loc 1 5344 15 is_stmt 0 view .LVU240
 847 0038 A642     		cmp	r6, r4
 848 003a 1DD9     		bls	.L60
5345:FreeRTOS/Source/tasks.c ****             {
5346:FreeRTOS/Source/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5347:FreeRTOS/Source/tasks.c ****                  * list. */
5348:FreeRTOS/Source/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 116


 849              		.loc 1 5348 17 is_stmt 1 view .LVU241
 850 003c 184B     		ldr	r3, .L63+12
 851 003e 1868     		ldr	r0, [r3]
 852              		.loc 1 5348 72 is_stmt 0 view .LVU242
 853 0040 154B     		ldr	r3, .L63+4
 854 0042 1968     		ldr	r1, [r3]
 855              		.loc 1 5348 17 view .LVU243
 856 0044 0431     		adds	r1, r1, #4
 857 0046 FFF7FEFF 		bl	vListInsert
 858              	.LVL63:
 859              	.L56:
5349:FreeRTOS/Source/tasks.c ****             }
5350:FreeRTOS/Source/tasks.c ****             else
5351:FreeRTOS/Source/tasks.c ****             {
5352:FreeRTOS/Source/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5353:FreeRTOS/Source/tasks.c ****                  * is used. */
5354:FreeRTOS/Source/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:FreeRTOS/Source/tasks.c **** 
5356:FreeRTOS/Source/tasks.c ****                 /* If the task entering the blocked state was placed at the
5357:FreeRTOS/Source/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5358:FreeRTOS/Source/tasks.c ****                  * needs to be updated too. */
5359:FreeRTOS/Source/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:FreeRTOS/Source/tasks.c ****                 {
5361:FreeRTOS/Source/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:FreeRTOS/Source/tasks.c ****                 }
5363:FreeRTOS/Source/tasks.c ****                 else
5364:FreeRTOS/Source/tasks.c ****                 {
5365:FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:FreeRTOS/Source/tasks.c ****                 }
5367:FreeRTOS/Source/tasks.c ****             }
5368:FreeRTOS/Source/tasks.c ****         }
5369:FreeRTOS/Source/tasks.c ****     }
5370:FreeRTOS/Source/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5371:FreeRTOS/Source/tasks.c ****     {
5372:FreeRTOS/Source/tasks.c ****         /* Calculate the time at which the task should be woken if the event
5373:FreeRTOS/Source/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
5374:FreeRTOS/Source/tasks.c ****          * will manage it correctly. */
5375:FreeRTOS/Source/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
5376:FreeRTOS/Source/tasks.c **** 
5377:FreeRTOS/Source/tasks.c ****         /* The list item will be inserted in wake time order. */
5378:FreeRTOS/Source/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5379:FreeRTOS/Source/tasks.c **** 
5380:FreeRTOS/Source/tasks.c ****         if( xTimeToWake < xConstTickCount )
5381:FreeRTOS/Source/tasks.c ****         {
5382:FreeRTOS/Source/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
5383:FreeRTOS/Source/tasks.c ****             vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5384:FreeRTOS/Source/tasks.c ****         }
5385:FreeRTOS/Source/tasks.c ****         else
5386:FreeRTOS/Source/tasks.c ****         {
5387:FreeRTOS/Source/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
5388:FreeRTOS/Source/tasks.c ****             vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5389:FreeRTOS/Source/tasks.c **** 
5390:FreeRTOS/Source/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
5391:FreeRTOS/Source/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5392:FreeRTOS/Source/tasks.c ****              * too. */
5393:FreeRTOS/Source/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
5394:FreeRTOS/Source/tasks.c ****             {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 117


5395:FreeRTOS/Source/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
5396:FreeRTOS/Source/tasks.c ****             }
5397:FreeRTOS/Source/tasks.c ****             else
5398:FreeRTOS/Source/tasks.c ****             {
5399:FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5400:FreeRTOS/Source/tasks.c ****             }
5401:FreeRTOS/Source/tasks.c ****         }
5402:FreeRTOS/Source/tasks.c **** 
5403:FreeRTOS/Source/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5404:FreeRTOS/Source/tasks.c ****         ( void ) xCanBlockIndefinitely;
5405:FreeRTOS/Source/tasks.c ****     }
5406:FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5407:FreeRTOS/Source/tasks.c **** }
 860              		.loc 1 5407 1 view .LVU244
 861 004a 70BD     		pop	{r4, r5, r6, pc}
 862              	.LVL64:
 863              	.L62:
5327:FreeRTOS/Source/tasks.c ****         {
 864              		.loc 1 5327 47 discriminator 1 view .LVU245
 865 004c 002D     		cmp	r5, #0
 866 004e EFD0     		beq	.L58
 867              	.LBB162:
5332:FreeRTOS/Source/tasks.c ****         }
 868              		.loc 1 5332 13 is_stmt 1 view .LVU246
 869 0050 144A     		ldr	r2, .L63+16
 870 0052 5168     		ldr	r1, [r2, #4]
 871              	.LVL65:
5332:FreeRTOS/Source/tasks.c ****         }
 872              		.loc 1 5332 13 view .LVU247
5332:FreeRTOS/Source/tasks.c ****         }
 873              		.loc 1 5332 13 view .LVU248
5332:FreeRTOS/Source/tasks.c ****         }
 874              		.loc 1 5332 13 view .LVU249
 875 0054 104B     		ldr	r3, .L63+4
 876 0056 1868     		ldr	r0, [r3]
 877 0058 8160     		str	r1, [r0, #8]
5332:FreeRTOS/Source/tasks.c ****         }
 878              		.loc 1 5332 13 view .LVU250
 879 005a 1868     		ldr	r0, [r3]
 880 005c 8C68     		ldr	r4, [r1, #8]
 881              	.LVL66:
5332:FreeRTOS/Source/tasks.c ****         }
 882              		.loc 1 5332 13 is_stmt 0 view .LVU251
 883 005e C460     		str	r4, [r0, #12]
5332:FreeRTOS/Source/tasks.c ****         }
 884              		.loc 1 5332 13 is_stmt 1 view .LVU252
 885 0060 1868     		ldr	r0, [r3]
 886 0062 0430     		adds	r0, r0, #4
 887 0064 6060     		str	r0, [r4, #4]
5332:FreeRTOS/Source/tasks.c ****         }
 888              		.loc 1 5332 13 view .LVU253
 889 0066 1868     		ldr	r0, [r3]
 890 0068 0430     		adds	r0, r0, #4
 891 006a 8860     		str	r0, [r1, #8]
5332:FreeRTOS/Source/tasks.c ****         }
 892              		.loc 1 5332 13 view .LVU254
 893 006c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 118


 894 006e 5A61     		str	r2, [r3, #20]
5332:FreeRTOS/Source/tasks.c ****         }
 895              		.loc 1 5332 13 view .LVU255
 896 0070 1368     		ldr	r3, [r2]
 897 0072 0133     		adds	r3, r3, #1
 898 0074 1360     		str	r3, [r2]
 899              	.LBE162:
5332:FreeRTOS/Source/tasks.c ****         }
 900              		.loc 1 5332 85 view .LVU256
5332:FreeRTOS/Source/tasks.c ****         }
 901              		.loc 1 5332 13 is_stmt 0 view .LVU257
 902 0076 E8E7     		b	.L56
 903              	.LVL67:
 904              	.L60:
5354:FreeRTOS/Source/tasks.c **** 
 905              		.loc 1 5354 17 is_stmt 1 view .LVU258
 906 0078 0B4B     		ldr	r3, .L63+20
 907 007a 1868     		ldr	r0, [r3]
5354:FreeRTOS/Source/tasks.c **** 
 908              		.loc 1 5354 64 is_stmt 0 view .LVU259
 909 007c 064B     		ldr	r3, .L63+4
 910 007e 1968     		ldr	r1, [r3]
5354:FreeRTOS/Source/tasks.c **** 
 911              		.loc 1 5354 17 view .LVU260
 912 0080 0431     		adds	r1, r1, #4
 913 0082 FFF7FEFF 		bl	vListInsert
 914              	.LVL68:
5359:FreeRTOS/Source/tasks.c ****                 {
 915              		.loc 1 5359 17 is_stmt 1 view .LVU261
5359:FreeRTOS/Source/tasks.c ****                 {
 916              		.loc 1 5359 33 is_stmt 0 view .LVU262
 917 0086 094B     		ldr	r3, .L63+24
 918 0088 1B68     		ldr	r3, [r3]
5359:FreeRTOS/Source/tasks.c ****                 {
 919              		.loc 1 5359 19 view .LVU263
 920 008a A342     		cmp	r3, r4
 921 008c DDD9     		bls	.L56
5361:FreeRTOS/Source/tasks.c ****                 }
 922              		.loc 1 5361 21 is_stmt 1 view .LVU264
5361:FreeRTOS/Source/tasks.c ****                 }
 923              		.loc 1 5361 42 is_stmt 0 view .LVU265
 924 008e 074B     		ldr	r3, .L63+24
 925 0090 1C60     		str	r4, [r3]
5365:FreeRTOS/Source/tasks.c ****                 }
 926              		.loc 1 5365 45 is_stmt 1 view .LVU266
 927              		.loc 1 5407 1 is_stmt 0 view .LVU267
 928 0092 DAE7     		b	.L56
 929              	.L64:
 930              		.align	2
 931              	.L63:
 932 0094 00000000 		.word	xTickCount
 933 0098 00000000 		.word	pxCurrentTCB
 934 009c 00000000 		.word	uxTopReadyPriority
 935 00a0 00000000 		.word	pxOverflowDelayedTaskList
 936 00a4 00000000 		.word	xSuspendedTaskList
 937 00a8 00000000 		.word	pxDelayedTaskList
 938 00ac 00000000 		.word	xNextTaskUnblockTime
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 119


 939              		.cfi_endproc
 940              	.LFE64:
 942              		.section	.text.prvIdleTask,"ax",%progbits
 943              		.align	1
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 948              	prvIdleTask:
 949              	.LFB42:
3428:FreeRTOS/Source/tasks.c ****     /* Stop warnings. */
 950              		.loc 1 3428 1 is_stmt 1 view -0
 951              		.cfi_startproc
 952              		@ Volatile: function does not return.
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              	.LVL69:
3428:FreeRTOS/Source/tasks.c ****     /* Stop warnings. */
 956              		.loc 1 3428 1 is_stmt 0 view .LVU269
 957 0000 08B5     		push	{r3, lr}
 958              	.LCFI7:
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 3, -8
 961              		.cfi_offset 14, -4
 962 0002 0BE0     		b	.L67
 963              	.LVL70:
 964              	.L69:
3469:FreeRTOS/Source/tasks.c ****             }
 965              		.loc 1 3469 17 is_stmt 1 view .LVU270
 966 0004 4FF0E023 		mov	r3, #-536813568
 967 0008 4FF08052 		mov	r2, #268435456
 968 000c C3F8042D 		str	r2, [r3, #3332]
3469:FreeRTOS/Source/tasks.c ****             }
 969              		.loc 1 3469 17 view .LVU271
 970              		.syntax unified
 971              	@ 3469 "FreeRTOS/Source/tasks.c" 1
 972 0010 BFF34F8F 		dsb
 973              	@ 0 "" 2
3469:FreeRTOS/Source/tasks.c ****             }
 974              		.loc 1 3469 17 view .LVU272
 975              	@ 3469 "FreeRTOS/Source/tasks.c" 1
 976 0014 BFF36F8F 		isb
 977              	@ 0 "" 2
3469:FreeRTOS/Source/tasks.c ****             }
 978              		.loc 1 3469 28 view .LVU273
 979              		.thumb
 980              		.syntax unified
 981              	.L66:
3473:FreeRTOS/Source/tasks.c ****             }
 982              		.loc 1 3473 41 view .LVU274
 983              	.LBB163:
3480:FreeRTOS/Source/tasks.c **** 
 984              		.loc 1 3480 13 view .LVU275
3487:FreeRTOS/Source/tasks.c ****         }
 985              		.loc 1 3487 13 view .LVU276
 986 0018 FFF7FEFF 		bl	vApplicationIdleHook
 987              	.LVL71:
 988              	.LBE163:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 120


3440:FreeRTOS/Source/tasks.c ****     {
 989              		.loc 1 3440 5 view .LVU277
 990              	.L67:
3430:FreeRTOS/Source/tasks.c **** 
 991              		.loc 1 3430 5 view .LVU278
3438:FreeRTOS/Source/tasks.c **** 
 992              		.loc 1 3438 67 view .LVU279
3440:FreeRTOS/Source/tasks.c ****     {
 993              		.loc 1 3440 5 view .LVU280
3444:FreeRTOS/Source/tasks.c **** 
 994              		.loc 1 3444 9 view .LVU281
 995 001c FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 996              	.LVL72:
3467:FreeRTOS/Source/tasks.c ****             {
 997              		.loc 1 3467 13 view .LVU282
3467:FreeRTOS/Source/tasks.c ****             {
 998              		.loc 1 3467 17 is_stmt 0 view .LVU283
 999 0020 024B     		ldr	r3, .L70
 1000 0022 1B68     		ldr	r3, [r3]
3467:FreeRTOS/Source/tasks.c ****             {
 1001              		.loc 1 3467 15 view .LVU284
 1002 0024 012B     		cmp	r3, #1
 1003 0026 EDD8     		bhi	.L69
 1004 0028 F6E7     		b	.L66
 1005              	.L71:
 1006 002a 00BF     		.align	2
 1007              	.L70:
 1008 002c 00000000 		.word	pxReadyTasksLists
 1009              		.cfi_endproc
 1010              	.LFE42:
 1012              		.section	.text.xTaskCreate,"ax",%progbits
 1013              		.align	1
 1014              		.global	xTaskCreate
 1015              		.syntax unified
 1016              		.thumb
 1017              		.thumb_func
 1019              	xTaskCreate:
 1020              	.LVL73:
 1021              	.LFB5:
 727:FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 1022              		.loc 1 727 5 is_stmt 1 view -0
 1023              		.cfi_startproc
 1024              		@ args = 8, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 727:FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 1026              		.loc 1 727 5 is_stmt 0 view .LVU286
 1027 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1028              	.LCFI8:
 1029              		.cfi_def_cfa_offset 28
 1030              		.cfi_offset 4, -28
 1031              		.cfi_offset 5, -24
 1032              		.cfi_offset 6, -20
 1033              		.cfi_offset 7, -16
 1034              		.cfi_offset 8, -12
 1035              		.cfi_offset 9, -8
 1036              		.cfi_offset 14, -4
 1037 0004 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 121


 1038              	.LCFI9:
 1039              		.cfi_def_cfa_offset 48
 1040 0006 0746     		mov	r7, r0
 1041 0008 8846     		mov	r8, r1
 1042 000a 1446     		mov	r4, r2
 1043 000c 1E46     		mov	r6, r3
 728:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 1044              		.loc 1 728 9 is_stmt 1 view .LVU287
 729:FreeRTOS/Source/tasks.c **** 
 1045              		.loc 1 729 9 view .LVU288
 1046              	.LBB164:
 760:FreeRTOS/Source/tasks.c **** 
 1047              		.loc 1 760 13 view .LVU289
 763:FreeRTOS/Source/tasks.c **** 
 1048              		.loc 1 763 13 view .LVU290
 763:FreeRTOS/Source/tasks.c **** 
 1049              		.loc 1 763 23 is_stmt 0 view .LVU291
 1050 000e 9000     		lsls	r0, r2, #2
 1051              	.LVL74:
 763:FreeRTOS/Source/tasks.c **** 
 1052              		.loc 1 763 23 view .LVU292
 1053 0010 FFF7FEFF 		bl	pvPortMalloc
 1054              	.LVL75:
 765:FreeRTOS/Source/tasks.c ****             {
 1055              		.loc 1 765 13 is_stmt 1 view .LVU293
 765:FreeRTOS/Source/tasks.c ****             {
 1056              		.loc 1 765 15 is_stmt 0 view .LVU294
 1057 0014 18B3     		cbz	r0, .L75
 1058 0016 8146     		mov	r9, r0
 768:FreeRTOS/Source/tasks.c **** 
 1059              		.loc 1 768 17 is_stmt 1 view .LVU295
 768:FreeRTOS/Source/tasks.c **** 
 1060              		.loc 1 768 40 is_stmt 0 view .LVU296
 1061 0018 5820     		movs	r0, #88
 1062              	.LVL76:
 768:FreeRTOS/Source/tasks.c **** 
 1063              		.loc 1 768 40 view .LVU297
 1064 001a FFF7FEFF 		bl	pvPortMalloc
 1065              	.LVL77:
 770:FreeRTOS/Source/tasks.c ****                 {
 1066              		.loc 1 770 17 is_stmt 1 view .LVU298
 770:FreeRTOS/Source/tasks.c ****                 {
 1067              		.loc 1 770 19 is_stmt 0 view .LVU299
 1068 001e 0546     		mov	r5, r0
 1069 0020 B8B1     		cbz	r0, .L74
 772:FreeRTOS/Source/tasks.c **** 
 1070              		.loc 1 772 21 is_stmt 1 view .LVU300
 1071 0022 5822     		movs	r2, #88
 1072 0024 0021     		movs	r1, #0
 1073 0026 FFF7FEFF 		bl	memset
 1074              	.LVL78:
 775:FreeRTOS/Source/tasks.c ****                 }
 1075              		.loc 1 775 21 view .LVU301
 775:FreeRTOS/Source/tasks.c ****                 }
 1076              		.loc 1 775 39 is_stmt 0 view .LVU302
 1077 002a C5F83090 		str	r9, [r5, #48]
 775:FreeRTOS/Source/tasks.c ****                 }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 122


 1078              		.loc 1 775 39 view .LVU303
 1079              	.LBE164:
 791:FreeRTOS/Source/tasks.c ****         {
 1080              		.loc 1 791 9 is_stmt 1 view .LVU304
 801:FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 1081              		.loc 1 801 13 view .LVU305
 1082 002e 0023     		movs	r3, #0
 1083 0030 0393     		str	r3, [sp, #12]
 1084 0032 0295     		str	r5, [sp, #8]
 1085 0034 0D9B     		ldr	r3, [sp, #52]
 1086 0036 0193     		str	r3, [sp, #4]
 1087 0038 0C9B     		ldr	r3, [sp, #48]
 1088 003a 0093     		str	r3, [sp]
 1089 003c 3346     		mov	r3, r6
 1090 003e 2246     		mov	r2, r4
 1091 0040 4146     		mov	r1, r8
 1092 0042 3846     		mov	r0, r7
 1093 0044 FFF7FEFF 		bl	prvInitialiseNewTask
 1094              	.LVL79:
 802:FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
 1095              		.loc 1 802 13 view .LVU306
 1096 0048 2846     		mov	r0, r5
 1097 004a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1098              	.LVL80:
 803:FreeRTOS/Source/tasks.c ****         }
 1099              		.loc 1 803 13 view .LVU307
 803:FreeRTOS/Source/tasks.c ****         }
 1100              		.loc 1 803 21 is_stmt 0 view .LVU308
 1101 004e 0120     		movs	r0, #1
 1102 0050 07E0     		b	.L72
 1103              	.LVL81:
 1104              	.L74:
 1105              	.LBB165:
 781:FreeRTOS/Source/tasks.c ****                 }
 1106              		.loc 1 781 21 is_stmt 1 view .LVU309
 1107 0052 4846     		mov	r0, r9
 1108              	.LVL82:
 781:FreeRTOS/Source/tasks.c ****                 }
 1109              		.loc 1 781 21 is_stmt 0 view .LVU310
 1110 0054 FFF7FEFF 		bl	vPortFree
 1111              	.LVL83:
 781:FreeRTOS/Source/tasks.c ****                 }
 1112              		.loc 1 781 21 view .LVU311
 1113              	.LBE165:
 791:FreeRTOS/Source/tasks.c ****         {
 1114              		.loc 1 791 9 is_stmt 1 view .LVU312
 807:FreeRTOS/Source/tasks.c ****         }
 1115              		.loc 1 807 21 is_stmt 0 view .LVU313
 1116 0058 4FF0FF30 		mov	r0, #-1
 1117 005c 01E0     		b	.L72
 1118              	.LVL84:
 1119              	.L75:
 807:FreeRTOS/Source/tasks.c ****         }
 1120              		.loc 1 807 21 view .LVU314
 1121 005e 4FF0FF30 		mov	r0, #-1
 1122              	.LVL85:
 810:FreeRTOS/Source/tasks.c ****     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 123


 1123              		.loc 1 810 9 is_stmt 1 view .LVU315
 1124              	.L72:
 811:FreeRTOS/Source/tasks.c **** 
 1125              		.loc 1 811 5 is_stmt 0 view .LVU316
 1126 0062 05B0     		add	sp, sp, #20
 1127              	.LCFI10:
 1128              		.cfi_def_cfa_offset 28
 1129              		@ sp needed
 1130 0064 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 811:FreeRTOS/Source/tasks.c **** 
 1131              		.loc 1 811 5 view .LVU317
 1132              		.cfi_endproc
 1133              	.LFE5:
 1135              		.section	.text.vTaskDelete,"ax",%progbits
 1136              		.align	1
 1137              		.global	vTaskDelete
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1142              	vTaskDelete:
 1143              	.LVL86:
 1144              	.LFB8:
1113:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1145              		.loc 1 1113 5 is_stmt 1 view -0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
1113:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1149              		.loc 1 1113 5 is_stmt 0 view .LVU319
 1150 0000 38B5     		push	{r3, r4, r5, lr}
 1151              	.LCFI11:
 1152              		.cfi_def_cfa_offset 16
 1153              		.cfi_offset 3, -16
 1154              		.cfi_offset 4, -12
 1155              		.cfi_offset 5, -8
 1156              		.cfi_offset 14, -4
 1157 0002 0446     		mov	r4, r0
1114:FreeRTOS/Source/tasks.c **** 
 1158              		.loc 1 1114 9 is_stmt 1 view .LVU320
1116:FreeRTOS/Source/tasks.c ****         {
 1159              		.loc 1 1116 9 view .LVU321
 1160 0004 FFF7FEFF 		bl	vPortEnterCritical
 1161              	.LVL87:
1120:FreeRTOS/Source/tasks.c **** 
 1162              		.loc 1 1120 13 view .LVU322
1120:FreeRTOS/Source/tasks.c **** 
 1163              		.loc 1 1120 21 is_stmt 0 view .LVU323
 1164 0008 002C     		cmp	r4, #0
 1165 000a 38D0     		beq	.L88
 1166              	.LVL88:
 1167              	.L78:
1123:FreeRTOS/Source/tasks.c ****             {
 1168              		.loc 1 1123 13 is_stmt 1 discriminator 4 view .LVU324
1123:FreeRTOS/Source/tasks.c ****             {
 1169              		.loc 1 1123 17 is_stmt 0 discriminator 4 view .LVU325
 1170 000c 251D     		adds	r5, r4, #4
 1171 000e 2846     		mov	r0, r5
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 124


 1172 0010 FFF7FEFF 		bl	uxListRemove
 1173              	.LVL89:
1123:FreeRTOS/Source/tasks.c ****             {
 1174              		.loc 1 1123 15 discriminator 4 view .LVU326
 1175 0014 70B9     		cbnz	r0, .L79
1125:FreeRTOS/Source/tasks.c ****             }
 1176              		.loc 1 1125 17 is_stmt 1 view .LVU327
 1177 0016 E26A     		ldr	r2, [r4, #44]
 1178 0018 02EB8203 		add	r3, r2, r2, lsl #2
 1179 001c 9B00     		lsls	r3, r3, #2
 1180 001e 2949     		ldr	r1, .L91
 1181 0020 CB58     		ldr	r3, [r1, r3]
 1182 0022 3BB9     		cbnz	r3, .L79
1125:FreeRTOS/Source/tasks.c ****             }
 1183              		.loc 1 1125 17 discriminator 1 view .LVU328
 1184 0024 0123     		movs	r3, #1
 1185 0026 03FA02F2 		lsl	r2, r3, r2
 1186 002a 2749     		ldr	r1, .L91+4
 1187 002c 0B68     		ldr	r3, [r1]
 1188 002e 23EA0203 		bic	r3, r3, r2
 1189 0032 0B60     		str	r3, [r1]
 1190              	.L79:
1129:FreeRTOS/Source/tasks.c ****             }
 1191              		.loc 1 1129 41 view .LVU329
1133:FreeRTOS/Source/tasks.c ****             {
 1192              		.loc 1 1133 13 view .LVU330
1133:FreeRTOS/Source/tasks.c ****             {
 1193              		.loc 1 1133 17 is_stmt 0 view .LVU331
 1194 0034 A36A     		ldr	r3, [r4, #40]
1133:FreeRTOS/Source/tasks.c ****             {
 1195              		.loc 1 1133 15 view .LVU332
 1196 0036 1BB1     		cbz	r3, .L80
1135:FreeRTOS/Source/tasks.c ****             }
 1197              		.loc 1 1135 17 is_stmt 1 view .LVU333
1135:FreeRTOS/Source/tasks.c ****             }
 1198              		.loc 1 1135 26 is_stmt 0 view .LVU334
 1199 0038 04F11800 		add	r0, r4, #24
 1200 003c FFF7FEFF 		bl	uxListRemove
 1201              	.LVL90:
 1202              	.L80:
1139:FreeRTOS/Source/tasks.c ****             }
 1203              		.loc 1 1139 41 is_stmt 1 view .LVU335
1146:FreeRTOS/Source/tasks.c **** 
 1204              		.loc 1 1146 13 view .LVU336
1146:FreeRTOS/Source/tasks.c **** 
 1205              		.loc 1 1146 25 is_stmt 0 view .LVU337
 1206 0040 224A     		ldr	r2, .L91+8
 1207 0042 1368     		ldr	r3, [r2]
 1208 0044 0133     		adds	r3, r3, #1
 1209 0046 1360     		str	r3, [r2]
1148:FreeRTOS/Source/tasks.c ****             {
 1210              		.loc 1 1148 13 is_stmt 1 view .LVU338
1148:FreeRTOS/Source/tasks.c ****             {
 1211              		.loc 1 1148 23 is_stmt 0 view .LVU339
 1212 0048 214B     		ldr	r3, .L91+12
 1213 004a 1B68     		ldr	r3, [r3]
1148:FreeRTOS/Source/tasks.c ****             {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 125


 1214              		.loc 1 1148 15 view .LVU340
 1215 004c A342     		cmp	r3, r4
 1216 004e 19D0     		beq	.L89
1175:FreeRTOS/Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1217              		.loc 1 1175 17 is_stmt 1 view .LVU341
 1218 0050 204A     		ldr	r2, .L91+16
 1219 0052 1368     		ldr	r3, [r2]
 1220 0054 013B     		subs	r3, r3, #1
 1221 0056 1360     		str	r3, [r2]
1176:FreeRTOS/Source/tasks.c **** 
 1222              		.loc 1 1176 42 view .LVU342
1180:FreeRTOS/Source/tasks.c ****             }
 1223              		.loc 1 1180 17 view .LVU343
 1224 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1225              	.LVL91:
 1226              	.L82:
1183:FreeRTOS/Source/tasks.c **** 
 1227              		.loc 1 1183 9 view .LVU344
 1228 005c FFF7FEFF 		bl	vPortExitCritical
 1229              	.LVL92:
1188:FreeRTOS/Source/tasks.c ****         {
 1230              		.loc 1 1188 9 view .LVU345
1188:FreeRTOS/Source/tasks.c ****         {
 1231              		.loc 1 1188 19 is_stmt 0 view .LVU346
 1232 0060 1B4B     		ldr	r3, .L91+12
 1233 0062 1B68     		ldr	r3, [r3]
1188:FreeRTOS/Source/tasks.c ****         {
 1234              		.loc 1 1188 11 view .LVU347
 1235 0064 A342     		cmp	r3, r4
 1236 0066 02D0     		beq	.L83
1190:FreeRTOS/Source/tasks.c ****         }
 1237              		.loc 1 1190 13 is_stmt 1 view .LVU348
 1238 0068 2046     		mov	r0, r4
 1239 006a FFF7FEFF 		bl	prvDeleteTCB
 1240              	.LVL93:
 1241              	.L83:
1195:FreeRTOS/Source/tasks.c ****         {
 1242              		.loc 1 1195 9 view .LVU349
1195:FreeRTOS/Source/tasks.c ****         {
 1243              		.loc 1 1195 31 is_stmt 0 view .LVU350
 1244 006e 1A4B     		ldr	r3, .L91+20
 1245 0070 1B68     		ldr	r3, [r3]
1195:FreeRTOS/Source/tasks.c ****         {
 1246              		.loc 1 1195 11 view .LVU351
 1247 0072 1BB1     		cbz	r3, .L77
1197:FreeRTOS/Source/tasks.c ****             {
 1248              		.loc 1 1197 13 is_stmt 1 view .LVU352
1197:FreeRTOS/Source/tasks.c ****             {
 1249              		.loc 1 1197 23 is_stmt 0 view .LVU353
 1250 0074 164B     		ldr	r3, .L91+12
 1251 0076 1B68     		ldr	r3, [r3]
1197:FreeRTOS/Source/tasks.c ****             {
 1252              		.loc 1 1197 15 view .LVU354
 1253 0078 A342     		cmp	r3, r4
 1254 007a 0CD0     		beq	.L90
 1255              	.L77:
1207:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 126


 1256              		.loc 1 1207 5 view .LVU355
 1257 007c 38BD     		pop	{r3, r4, r5, pc}
 1258              	.LVL94:
 1259              	.L88:
1120:FreeRTOS/Source/tasks.c **** 
 1260              		.loc 1 1120 21 discriminator 1 view .LVU356
 1261 007e 144B     		ldr	r3, .L91+12
 1262 0080 1C68     		ldr	r4, [r3]
 1263              	.LVL95:
1120:FreeRTOS/Source/tasks.c **** 
 1264              		.loc 1 1120 21 discriminator 1 view .LVU357
 1265 0082 C3E7     		b	.L78
 1266              	.LVL96:
 1267              	.L89:
1155:FreeRTOS/Source/tasks.c **** 
 1268              		.loc 1 1155 17 is_stmt 1 view .LVU358
 1269 0084 2946     		mov	r1, r5
 1270 0086 1548     		ldr	r0, .L91+24
 1271 0088 FFF7FEFF 		bl	vListInsertEnd
 1272              	.LVL97:
1160:FreeRTOS/Source/tasks.c **** 
 1273              		.loc 1 1160 17 view .LVU359
 1274 008c 144A     		ldr	r2, .L91+28
 1275 008e 1368     		ldr	r3, [r2]
 1276 0090 0133     		adds	r3, r3, #1
 1277 0092 1360     		str	r3, [r2]
1164:FreeRTOS/Source/tasks.c **** 
 1278              		.loc 1 1164 42 view .LVU360
1171:FreeRTOS/Source/tasks.c ****             }
 1279              		.loc 1 1171 66 view .LVU361
 1280 0094 E2E7     		b	.L82
 1281              	.L90:
1199:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1282              		.loc 1 1199 17 view .LVU362
 1283 0096 134B     		ldr	r3, .L91+32
 1284 0098 1B68     		ldr	r3, [r3]
 1285 009a 43B1     		cbz	r3, .L85
1199:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1286              		.loc 1 1199 17 view .LVU363
 1287              	.LBB166:
 1288              	.LBI166:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1289              		.loc 2 194 34 view .LVU364
 1290              	.LBB167:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1291              		.loc 2 196 9 view .LVU365
 1292              		.loc 2 198 9 view .LVU366
 1293              		.syntax unified
 1294              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1295 009c 4FF05003 			mov r3, #80												
 1296 00a0 83F31188 		msr basepri, r3											
 1297 00a4 BFF36F8F 		isb														
 1298 00a8 BFF34F8F 		dsb														
 1299              	
 1300              	@ 0 "" 2
 1301              	.LVL98:
 1302              		.thumb
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 127


 1303              		.syntax unified
 1304              	.L86:
 1305              		.loc 2 198 9 is_stmt 0 view .LVU367
 1306              	.LBE167:
 1307              	.LBE166:
1199:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1308              		.loc 1 1199 17 is_stmt 1 discriminator 1 view .LVU368
1199:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1309              		.loc 1 1199 17 discriminator 1 view .LVU369
 1310 00ac FEE7     		b	.L86
 1311              	.L85:
1199:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1312              		.loc 1 1199 58 discriminator 2 view .LVU370
1200:FreeRTOS/Source/tasks.c ****             }
 1313              		.loc 1 1200 17 discriminator 2 view .LVU371
 1314 00ae 4FF0E023 		mov	r3, #-536813568
 1315 00b2 4FF08052 		mov	r2, #268435456
 1316 00b6 C3F8042D 		str	r2, [r3, #3332]
1200:FreeRTOS/Source/tasks.c ****             }
 1317              		.loc 1 1200 17 discriminator 2 view .LVU372
 1318              		.syntax unified
 1319              	@ 1200 "FreeRTOS/Source/tasks.c" 1
 1320 00ba BFF34F8F 		dsb
 1321              	@ 0 "" 2
1200:FreeRTOS/Source/tasks.c ****             }
 1322              		.loc 1 1200 17 discriminator 2 view .LVU373
 1323              	@ 1200 "FreeRTOS/Source/tasks.c" 1
 1324 00be BFF36F8F 		isb
 1325              	@ 0 "" 2
1200:FreeRTOS/Source/tasks.c ****             }
 1326              		.loc 1 1200 39 discriminator 2 view .LVU374
1204:FreeRTOS/Source/tasks.c ****             }
 1327              		.loc 1 1204 41 discriminator 2 view .LVU375
1207:FreeRTOS/Source/tasks.c **** 
 1328              		.loc 1 1207 5 is_stmt 0 discriminator 2 view .LVU376
 1329              		.thumb
 1330              		.syntax unified
 1331 00c2 DBE7     		b	.L77
 1332              	.L92:
 1333              		.align	2
 1334              	.L91:
 1335 00c4 00000000 		.word	pxReadyTasksLists
 1336 00c8 00000000 		.word	uxTopReadyPriority
 1337 00cc 00000000 		.word	uxTaskNumber
 1338 00d0 00000000 		.word	pxCurrentTCB
 1339 00d4 00000000 		.word	uxCurrentNumberOfTasks
 1340 00d8 00000000 		.word	xSchedulerRunning
 1341 00dc 00000000 		.word	xTasksWaitingTermination
 1342 00e0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1343 00e4 00000000 		.word	uxSchedulerSuspended
 1344              		.cfi_endproc
 1345              	.LFE8:
 1347              		.section	.text.eTaskGetState,"ax",%progbits
 1348              		.align	1
 1349              		.global	eTaskGetState
 1350              		.syntax unified
 1351              		.thumb
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 128


 1352              		.thumb_func
 1354              	eTaskGetState:
 1355              	.LVL99:
 1356              	.LFB11:
1347:FreeRTOS/Source/tasks.c ****         eTaskState eReturn;
 1357              		.loc 1 1347 5 is_stmt 1 view -0
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 0
 1360              		@ frame_needed = 0, uses_anonymous_args = 0
1347:FreeRTOS/Source/tasks.c ****         eTaskState eReturn;
 1361              		.loc 1 1347 5 is_stmt 0 view .LVU378
 1362 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1363              	.LCFI12:
 1364              		.cfi_def_cfa_offset 24
 1365              		.cfi_offset 3, -24
 1366              		.cfi_offset 4, -20
 1367              		.cfi_offset 5, -16
 1368              		.cfi_offset 6, -12
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
1348:FreeRTOS/Source/tasks.c ****         List_t const * pxStateList;
 1371              		.loc 1 1348 9 is_stmt 1 view .LVU379
1349:FreeRTOS/Source/tasks.c ****         List_t const * pxDelayedList;
 1372              		.loc 1 1349 9 view .LVU380
1350:FreeRTOS/Source/tasks.c ****         List_t const * pxOverflowedDelayedList;
 1373              		.loc 1 1350 9 view .LVU381
1351:FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1374              		.loc 1 1351 9 view .LVU382
1352:FreeRTOS/Source/tasks.c **** 
 1375              		.loc 1 1352 9 view .LVU383
 1376              	.LVL100:
1354:FreeRTOS/Source/tasks.c **** 
 1377              		.loc 1 1354 9 view .LVU384
 1378 0002 D0B1     		cbz	r0, .L108
 1379 0004 0446     		mov	r4, r0
1354:FreeRTOS/Source/tasks.c **** 
 1380              		.loc 1 1354 30 discriminator 2 view .LVU385
1356:FreeRTOS/Source/tasks.c ****         {
 1381              		.loc 1 1356 9 discriminator 2 view .LVU386
1356:FreeRTOS/Source/tasks.c ****         {
 1382              		.loc 1 1356 19 is_stmt 0 discriminator 2 view .LVU387
 1383 0006 204B     		ldr	r3, .L111
 1384 0008 1B68     		ldr	r3, [r3]
1356:FreeRTOS/Source/tasks.c ****         {
 1385              		.loc 1 1356 11 discriminator 2 view .LVU388
 1386 000a 8342     		cmp	r3, r0
 1387 000c 31D0     		beq	.L100
1363:FreeRTOS/Source/tasks.c ****             {
 1388              		.loc 1 1363 13 is_stmt 1 view .LVU389
 1389 000e FFF7FEFF 		bl	vPortEnterCritical
 1390              	.LVL101:
1365:FreeRTOS/Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1391              		.loc 1 1365 17 view .LVU390
1365:FreeRTOS/Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1392              		.loc 1 1365 29 is_stmt 0 view .LVU391
 1393 0012 6569     		ldr	r5, [r4, #20]
 1394              	.LVL102:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 129


1366:FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1395              		.loc 1 1366 17 is_stmt 1 view .LVU392
1366:FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1396              		.loc 1 1366 31 is_stmt 0 view .LVU393
 1397 0014 1D4B     		ldr	r3, .L111+4
 1398 0016 1E68     		ldr	r6, [r3]
 1399              	.LVL103:
1367:FreeRTOS/Source/tasks.c ****             }
 1400              		.loc 1 1367 17 is_stmt 1 view .LVU394
1367:FreeRTOS/Source/tasks.c ****             }
 1401              		.loc 1 1367 41 is_stmt 0 view .LVU395
 1402 0018 1D4B     		ldr	r3, .L111+8
 1403 001a 1F68     		ldr	r7, [r3]
 1404              	.LVL104:
1369:FreeRTOS/Source/tasks.c **** 
 1405              		.loc 1 1369 13 is_stmt 1 view .LVU396
 1406 001c FFF7FEFF 		bl	vPortExitCritical
 1407              	.LVL105:
1371:FreeRTOS/Source/tasks.c ****             {
 1408              		.loc 1 1371 13 view .LVU397
1371:FreeRTOS/Source/tasks.c ****             {
 1409              		.loc 1 1371 15 is_stmt 0 view .LVU398
 1410 0020 B542     		cmp	r5, r6
 1411 0022 28D0     		beq	.L101
1371:FreeRTOS/Source/tasks.c ****             {
 1412              		.loc 1 1371 50 discriminator 1 view .LVU399
 1413 0024 BD42     		cmp	r5, r7
 1414 0026 28D0     		beq	.L102
1379:FreeRTOS/Source/tasks.c ****                 {
 1415              		.loc 1 1379 22 is_stmt 1 view .LVU400
1379:FreeRTOS/Source/tasks.c ****                 {
 1416              		.loc 1 1379 24 is_stmt 0 view .LVU401
 1417 0028 1A4B     		ldr	r3, .L111+12
 1418 002a 9D42     		cmp	r5, r3
 1419 002c 0ED0     		beq	.L109
1420:FreeRTOS/Source/tasks.c ****                 {
 1420              		.loc 1 1420 22 is_stmt 1 view .LVU402
1420:FreeRTOS/Source/tasks.c ****                 {
 1421              		.loc 1 1420 24 is_stmt 0 view .LVU403
 1422 002e 1A4B     		ldr	r3, .L111+16
 1423 0030 9D42     		cmp	r5, r3
 1424 0032 26D0     		beq	.L105
1420:FreeRTOS/Source/tasks.c ****                 {
 1425              		.loc 1 1420 71 discriminator 1 view .LVU404
 1426 0034 DDB1     		cbz	r5, .L110
1433:FreeRTOS/Source/tasks.c ****             }
 1427              		.loc 1 1433 25 view .LVU405
 1428 0036 0120     		movs	r0, #1
 1429 0038 1CE0     		b	.L96
 1430              	.LVL106:
 1431              	.L108:
1354:FreeRTOS/Source/tasks.c **** 
 1432              		.loc 1 1354 9 is_stmt 1 view .LVU406
 1433              	.LBB168:
 1434              	.LBI168:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1435              		.loc 2 194 34 view .LVU407
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 130


 1436              	.LBB169:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1437              		.loc 2 196 9 view .LVU408
 1438              		.loc 2 198 9 view .LVU409
 1439              		.syntax unified
 1440              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1441 003a 4FF05003 			mov r3, #80												
 1442 003e 83F31188 		msr basepri, r3											
 1443 0042 BFF36F8F 		isb														
 1444 0046 BFF34F8F 		dsb														
 1445              	
 1446              	@ 0 "" 2
 1447              	.LVL107:
 1448              		.thumb
 1449              		.syntax unified
 1450              	.L95:
 1451              		.loc 2 198 9 is_stmt 0 view .LVU410
 1452              	.LBE169:
 1453              	.LBE168:
1354:FreeRTOS/Source/tasks.c **** 
 1454              		.loc 1 1354 9 is_stmt 1 discriminator 1 view .LVU411
1354:FreeRTOS/Source/tasks.c **** 
 1455              		.loc 1 1354 9 discriminator 1 view .LVU412
 1456 004a FEE7     		b	.L95
 1457              	.LVL108:
 1458              	.L109:
1384:FreeRTOS/Source/tasks.c ****                     {
 1459              		.loc 1 1384 21 view .LVU413
1384:FreeRTOS/Source/tasks.c ****                     {
 1460              		.loc 1 1384 25 is_stmt 0 view .LVU414
 1461 004c A36A     		ldr	r3, [r4, #40]
1384:FreeRTOS/Source/tasks.c ****                     {
 1462              		.loc 1 1384 23 view .LVU415
 1463 004e 4BB1     		cbz	r3, .L103
1414:FreeRTOS/Source/tasks.c ****                     }
 1464              		.loc 1 1414 33 view .LVU416
 1465 0050 0220     		movs	r0, #2
 1466 0052 0FE0     		b	.L96
 1467              	.LVL109:
 1468              	.L99:
 1469              	.LBB170:
1399:FreeRTOS/Source/tasks.c ****                                 {
 1470              		.loc 1 1399 33 is_stmt 1 view .LVU417
1399:FreeRTOS/Source/tasks.c ****                                 {
 1471              		.loc 1 1399 57 is_stmt 0 view .LVU418
 1472 0054 E218     		adds	r2, r4, r3
 1473 0056 92F85420 		ldrb	r2, [r2, #84]	@ zero_extendqisi2
 1474 005a D2B2     		uxtb	r2, r2
1399:FreeRTOS/Source/tasks.c ****                                 {
 1475              		.loc 1 1399 35 view .LVU419
 1476 005c 012A     		cmp	r2, #1
 1477 005e 0ED0     		beq	.L104
1397:FreeRTOS/Source/tasks.c ****                             {
 1478              		.loc 1 1397 85 is_stmt 1 discriminator 2 view .LVU420
 1479 0060 0133     		adds	r3, r3, #1
 1480              	.LVL110:
1397:FreeRTOS/Source/tasks.c ****                             {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 131


 1481              		.loc 1 1397 85 is_stmt 0 discriminator 2 view .LVU421
 1482 0062 00E0     		b	.L98
 1483              	.LVL111:
 1484              	.L103:
1397:FreeRTOS/Source/tasks.c ****                             {
 1485              		.loc 1 1397 36 view .LVU422
 1486 0064 0023     		movs	r3, #0
 1487              	.L98:
 1488              	.LVL112:
1397:FreeRTOS/Source/tasks.c ****                             {
 1489              		.loc 1 1397 43 is_stmt 1 discriminator 1 view .LVU423
 1490 0066 002B     		cmp	r3, #0
 1491 0068 F4DD     		ble	.L99
1395:FreeRTOS/Source/tasks.c **** 
 1492              		.loc 1 1395 37 is_stmt 0 view .LVU424
 1493 006a 0320     		movs	r0, #3
 1494 006c 02E0     		b	.L96
 1495              	.LVL113:
 1496              	.L110:
1395:FreeRTOS/Source/tasks.c **** 
 1497              		.loc 1 1395 37 view .LVU425
 1498              	.LBE170:
1425:FreeRTOS/Source/tasks.c ****                 }
 1499              		.loc 1 1425 29 view .LVU426
 1500 006e 0420     		movs	r0, #4
 1501 0070 00E0     		b	.L96
 1502              	.LVL114:
 1503              	.L100:
1359:FreeRTOS/Source/tasks.c ****         }
 1504              		.loc 1 1359 21 view .LVU427
 1505 0072 0020     		movs	r0, #0
 1506              	.LVL115:
 1507              	.L96:
1437:FreeRTOS/Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1508              		.loc 1 1437 9 is_stmt 1 view .LVU428
1438:FreeRTOS/Source/tasks.c **** 
 1509              		.loc 1 1438 5 is_stmt 0 view .LVU429
 1510 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1511              	.LVL116:
 1512              	.L101:
1375:FreeRTOS/Source/tasks.c ****             }
 1513              		.loc 1 1375 25 view .LVU430
 1514 0076 0220     		movs	r0, #2
 1515 0078 FCE7     		b	.L96
 1516              	.L102:
 1517 007a 0220     		movs	r0, #2
 1518 007c FAE7     		b	.L96
 1519              	.LVL117:
 1520              	.L104:
 1521              	.LBB171:
1401:FreeRTOS/Source/tasks.c ****                                     break;
 1522              		.loc 1 1401 45 view .LVU431
 1523 007e 0220     		movs	r0, #2
 1524 0080 F8E7     		b	.L96
 1525              	.LVL118:
 1526              	.L105:
1401:FreeRTOS/Source/tasks.c ****                                     break;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 132


 1527              		.loc 1 1401 45 view .LVU432
 1528              	.LBE171:
1425:FreeRTOS/Source/tasks.c ****                 }
 1529              		.loc 1 1425 29 view .LVU433
 1530 0082 0420     		movs	r0, #4
 1531 0084 F6E7     		b	.L96
 1532              	.L112:
 1533 0086 00BF     		.align	2
 1534              	.L111:
 1535 0088 00000000 		.word	pxCurrentTCB
 1536 008c 00000000 		.word	pxDelayedTaskList
 1537 0090 00000000 		.word	pxOverflowDelayedTaskList
 1538 0094 00000000 		.word	xSuspendedTaskList
 1539 0098 00000000 		.word	xTasksWaitingTermination
 1540              		.cfi_endproc
 1541              	.LFE11:
 1543              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1544              		.align	1
 1545              		.global	uxTaskPriorityGet
 1546              		.syntax unified
 1547              		.thumb
 1548              		.thumb_func
 1550              	uxTaskPriorityGet:
 1551              	.LVL119:
 1552              	.LFB12:
1446:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1553              		.loc 1 1446 5 is_stmt 1 view -0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
1446:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1557              		.loc 1 1446 5 is_stmt 0 view .LVU435
 1558 0000 10B5     		push	{r4, lr}
 1559              	.LCFI13:
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 4, -8
 1562              		.cfi_offset 14, -4
 1563 0002 0446     		mov	r4, r0
1447:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
 1564              		.loc 1 1447 9 is_stmt 1 view .LVU436
1448:FreeRTOS/Source/tasks.c **** 
 1565              		.loc 1 1448 9 view .LVU437
1450:FreeRTOS/Source/tasks.c ****         {
 1566              		.loc 1 1450 9 view .LVU438
 1567 0004 FFF7FEFF 		bl	vPortEnterCritical
 1568              	.LVL120:
1454:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1569              		.loc 1 1454 13 view .LVU439
1454:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1570              		.loc 1 1454 21 is_stmt 0 view .LVU440
 1571 0008 24B1     		cbz	r4, .L116
 1572              	.LVL121:
 1573              	.L114:
1455:FreeRTOS/Source/tasks.c ****         }
 1574              		.loc 1 1455 13 is_stmt 1 discriminator 4 view .LVU441
1455:FreeRTOS/Source/tasks.c ****         }
 1575              		.loc 1 1455 22 is_stmt 0 discriminator 4 view .LVU442
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 133


 1576 000a E46A     		ldr	r4, [r4, #44]
 1577              	.LVL122:
1457:FreeRTOS/Source/tasks.c **** 
 1578              		.loc 1 1457 9 is_stmt 1 discriminator 4 view .LVU443
 1579 000c FFF7FEFF 		bl	vPortExitCritical
 1580              	.LVL123:
1459:FreeRTOS/Source/tasks.c ****     }
 1581              		.loc 1 1459 9 discriminator 4 view .LVU444
1460:FreeRTOS/Source/tasks.c **** 
 1582              		.loc 1 1460 5 is_stmt 0 discriminator 4 view .LVU445
 1583 0010 2046     		mov	r0, r4
 1584 0012 10BD     		pop	{r4, pc}
 1585              	.LVL124:
 1586              	.L116:
1454:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1587              		.loc 1 1454 21 discriminator 1 view .LVU446
 1588 0014 014B     		ldr	r3, .L117
 1589 0016 1C68     		ldr	r4, [r3]
 1590              	.LVL125:
1454:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1591              		.loc 1 1454 21 discriminator 1 view .LVU447
 1592 0018 F7E7     		b	.L114
 1593              	.L118:
 1594 001a 00BF     		.align	2
 1595              	.L117:
 1596 001c 00000000 		.word	pxCurrentTCB
 1597              		.cfi_endproc
 1598              	.LFE12:
 1600              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1601              		.align	1
 1602              		.global	uxTaskPriorityGetFromISR
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1607              	uxTaskPriorityGetFromISR:
 1608              	.LVL126:
 1609              	.LFB13:
1468:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1610              		.loc 1 1468 5 is_stmt 1 view -0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
1468:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1614              		.loc 1 1468 5 is_stmt 0 view .LVU449
 1615 0000 10B5     		push	{r4, lr}
 1616              	.LCFI14:
 1617              		.cfi_def_cfa_offset 8
 1618              		.cfi_offset 4, -8
 1619              		.cfi_offset 14, -4
 1620 0002 0446     		mov	r4, r0
1469:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
 1621              		.loc 1 1469 9 is_stmt 1 view .LVU450
1470:FreeRTOS/Source/tasks.c **** 
 1622              		.loc 1 1470 9 view .LVU451
1488:FreeRTOS/Source/tasks.c **** 
 1623              		.loc 1 1488 9 view .LVU452
 1624 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 134


 1625              	.LVL127:
1490:FreeRTOS/Source/tasks.c ****         {
 1626              		.loc 1 1490 9 view .LVU453
 1627              	.LBB172:
 1628              	.LBI172:
 199:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 207:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 209:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1629              		.loc 2 210 38 view .LVU454
 1630              	.LBB173:
 211:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1631              		.loc 2 212 9 view .LVU455
 213:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1632              		.loc 2 214 9 view .LVU456
 1633              		.syntax unified
 1634              	@ 214 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1635 0008 EFF31183 			mrs r3, basepri											
 1636 000c 4FF05002 		mov r2, #80												
 1637 0010 82F31188 		msr basepri, r2											
 1638 0014 BFF36F8F 		isb														
 1639 0018 BFF34F8F 		dsb														
 1640              	
 1641              	@ 0 "" 2
 1642              	.LVL128:
 215:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 216:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 218:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 219:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 220:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 221:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         );
 223:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 224:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1643              		.loc 2 226 9 view .LVU457
 1644              		.loc 2 226 9 is_stmt 0 view .LVU458
 1645              		.thumb
 1646              		.syntax unified
 1647              	.LBE173:
 1648              	.LBE172:
1494:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1649              		.loc 1 1494 13 is_stmt 1 view .LVU459
1494:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1650              		.loc 1 1494 21 is_stmt 0 view .LVU460
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 135


 1651 001c 1CB1     		cbz	r4, .L122
 1652              	.LVL129:
 1653              	.L120:
1495:FreeRTOS/Source/tasks.c ****         }
 1654              		.loc 1 1495 13 is_stmt 1 discriminator 4 view .LVU461
1495:FreeRTOS/Source/tasks.c ****         }
 1655              		.loc 1 1495 22 is_stmt 0 discriminator 4 view .LVU462
 1656 001e E06A     		ldr	r0, [r4, #44]
 1657              	.LVL130:
1497:FreeRTOS/Source/tasks.c **** 
 1658              		.loc 1 1497 9 is_stmt 1 discriminator 4 view .LVU463
 1659              	.LBB174:
 1660              	.LBI174:
 227:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 228:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 229:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1661              		.loc 2 230 34 discriminator 4 view .LVU464
 1662              	.LBB175:
 231:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 232:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1663              		.loc 2 232 9 discriminator 4 view .LVU465
 1664              		.syntax unified
 1665              	@ 232 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1666 0020 83F31188 			msr basepri, r3	
 1667              	@ 0 "" 2
 1668              		.thumb
 1669              		.syntax unified
 1670              	.LBE175:
 1671              	.LBE174:
1499:FreeRTOS/Source/tasks.c ****     }
 1672              		.loc 1 1499 9 discriminator 4 view .LVU466
1500:FreeRTOS/Source/tasks.c **** 
 1673              		.loc 1 1500 5 is_stmt 0 discriminator 4 view .LVU467
 1674 0024 10BD     		pop	{r4, pc}
 1675              	.LVL131:
 1676              	.L122:
1494:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1677              		.loc 1 1494 21 discriminator 1 view .LVU468
 1678 0026 014A     		ldr	r2, .L123
 1679 0028 1468     		ldr	r4, [r2]
 1680              	.LVL132:
1494:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1681              		.loc 1 1494 21 discriminator 1 view .LVU469
 1682 002a F8E7     		b	.L120
 1683              	.L124:
 1684              		.align	2
 1685              	.L123:
 1686 002c 00000000 		.word	pxCurrentTCB
 1687              		.cfi_endproc
 1688              	.LFE13:
 1690              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1691              		.align	1
 1692              		.global	vTaskPrioritySet
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 136


 1697              	vTaskPrioritySet:
 1698              	.LVL133:
 1699              	.LFB14:
1509:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1700              		.loc 1 1509 5 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1509:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1704              		.loc 1 1509 5 is_stmt 0 view .LVU471
 1705 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1706              	.LCFI15:
 1707              		.cfi_def_cfa_offset 24
 1708              		.cfi_offset 3, -24
 1709              		.cfi_offset 4, -20
 1710              		.cfi_offset 5, -16
 1711              		.cfi_offset 6, -12
 1712              		.cfi_offset 7, -8
 1713              		.cfi_offset 14, -4
1510:FreeRTOS/Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1714              		.loc 1 1510 9 is_stmt 1 view .LVU472
1511:FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1715              		.loc 1 1511 9 view .LVU473
1512:FreeRTOS/Source/tasks.c **** 
 1716              		.loc 1 1512 9 view .LVU474
 1717              	.LVL134:
1514:FreeRTOS/Source/tasks.c **** 
 1718              		.loc 1 1514 9 view .LVU475
 1719 0002 0429     		cmp	r1, #4
 1720 0004 08D9     		bls	.L126
1514:FreeRTOS/Source/tasks.c **** 
 1721              		.loc 1 1514 9 view .LVU476
 1722              	.LBB176:
 1723              	.LBI176:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1724              		.loc 2 194 34 view .LVU477
 1725              	.LBB177:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1726              		.loc 2 196 9 view .LVU478
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1727              		.loc 2 198 9 view .LVU479
 1728              		.syntax unified
 1729              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1730 0006 4FF05003 			mov r3, #80												
 1731 000a 83F31188 		msr basepri, r3											
 1732 000e BFF36F8F 		isb														
 1733 0012 BFF34F8F 		dsb														
 1734              	
 1735              	@ 0 "" 2
 1736              	.LVL135:
 1737              		.thumb
 1738              		.syntax unified
 1739              	.L127:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1740              		.loc 2 198 9 is_stmt 0 view .LVU480
 1741              	.LBE177:
 1742              	.LBE176:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 137


1514:FreeRTOS/Source/tasks.c **** 
 1743              		.loc 1 1514 9 is_stmt 1 discriminator 1 view .LVU481
1514:FreeRTOS/Source/tasks.c **** 
 1744              		.loc 1 1514 9 discriminator 1 view .LVU482
 1745 0016 FEE7     		b	.L127
 1746              	.L126:
 1747 0018 0446     		mov	r4, r0
 1748 001a 0D46     		mov	r5, r1
1514:FreeRTOS/Source/tasks.c **** 
 1749              		.loc 1 1514 61 view .LVU483
1517:FreeRTOS/Source/tasks.c ****         {
 1750              		.loc 1 1517 9 view .LVU484
 1751              	.LVL136:
1523:FreeRTOS/Source/tasks.c ****         }
 1752              		.loc 1 1523 37 view .LVU485
1526:FreeRTOS/Source/tasks.c ****         {
 1753              		.loc 1 1526 9 view .LVU486
 1754 001c FFF7FEFF 		bl	vPortEnterCritical
 1755              	.LVL137:
1530:FreeRTOS/Source/tasks.c **** 
 1756              		.loc 1 1530 13 view .LVU487
1530:FreeRTOS/Source/tasks.c **** 
 1757              		.loc 1 1530 21 is_stmt 0 view .LVU488
 1758 0020 74B1     		cbz	r4, .L140
 1759              	.LVL138:
 1760              	.L128:
1532:FreeRTOS/Source/tasks.c **** 
 1761              		.loc 1 1532 59 is_stmt 1 discriminator 4 view .LVU489
1536:FreeRTOS/Source/tasks.c ****             }
 1762              		.loc 1 1536 17 discriminator 4 view .LVU490
1536:FreeRTOS/Source/tasks.c ****             }
 1763              		.loc 1 1536 39 is_stmt 0 discriminator 4 view .LVU491
 1764 0022 A36C     		ldr	r3, [r4, #72]
 1765              	.LVL139:
1544:FreeRTOS/Source/tasks.c ****             {
 1766              		.loc 1 1544 13 is_stmt 1 discriminator 4 view .LVU492
1544:FreeRTOS/Source/tasks.c ****             {
 1767              		.loc 1 1544 15 is_stmt 0 discriminator 4 view .LVU493
 1768 0024 9D42     		cmp	r5, r3
 1769 0026 30D0     		beq	.L129
1548:FreeRTOS/Source/tasks.c ****                 {
 1770              		.loc 1 1548 17 is_stmt 1 view .LVU494
1548:FreeRTOS/Source/tasks.c ****                 {
 1771              		.loc 1 1548 19 is_stmt 0 view .LVU495
 1772 0028 0DD9     		bls	.L130
1550:FreeRTOS/Source/tasks.c ****                     {
 1773              		.loc 1 1550 21 is_stmt 1 view .LVU496
1550:FreeRTOS/Source/tasks.c ****                     {
 1774              		.loc 1 1550 31 is_stmt 0 view .LVU497
 1775 002a 324A     		ldr	r2, .L143
 1776 002c 1268     		ldr	r2, [r2]
1550:FreeRTOS/Source/tasks.c ****                     {
 1777              		.loc 1 1550 23 view .LVU498
 1778 002e A242     		cmp	r2, r4
 1779 0030 2ED0     		beq	.L136
1555:FreeRTOS/Source/tasks.c ****                         {
 1780              		.loc 1 1555 25 is_stmt 1 view .LVU499
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 138


1555:FreeRTOS/Source/tasks.c ****                         {
 1781              		.loc 1 1555 58 is_stmt 0 view .LVU500
 1782 0032 304A     		ldr	r2, .L143
 1783 0034 1268     		ldr	r2, [r2]
 1784 0036 D26A     		ldr	r2, [r2, #44]
1555:FreeRTOS/Source/tasks.c ****                         {
 1785              		.loc 1 1555 27 view .LVU501
 1786 0038 AA42     		cmp	r2, r5
 1787 003a 2BD9     		bls	.L137
1512:FreeRTOS/Source/tasks.c **** 
 1788              		.loc 1 1512 20 view .LVU502
 1789 003c 0027     		movs	r7, #0
 1790 003e 07E0     		b	.L131
 1791              	.LVL140:
 1792              	.L140:
1530:FreeRTOS/Source/tasks.c **** 
 1793              		.loc 1 1530 21 discriminator 1 view .LVU503
 1794 0040 2C4B     		ldr	r3, .L143
 1795 0042 1C68     		ldr	r4, [r3]
 1796              	.LVL141:
1530:FreeRTOS/Source/tasks.c **** 
 1797              		.loc 1 1530 21 discriminator 1 view .LVU504
 1798 0044 EDE7     		b	.L128
 1799              	.LVL142:
 1800              	.L130:
1571:FreeRTOS/Source/tasks.c ****                 {
 1801              		.loc 1 1571 22 is_stmt 1 view .LVU505
1571:FreeRTOS/Source/tasks.c ****                 {
 1802              		.loc 1 1571 32 is_stmt 0 view .LVU506
 1803 0046 2B4A     		ldr	r2, .L143
 1804 0048 1268     		ldr	r2, [r2]
1571:FreeRTOS/Source/tasks.c ****                 {
 1805              		.loc 1 1571 24 view .LVU507
 1806 004a A242     		cmp	r2, r4
 1807 004c 24D0     		beq	.L138
1512:FreeRTOS/Source/tasks.c **** 
 1808              		.loc 1 1512 20 view .LVU508
 1809 004e 0027     		movs	r7, #0
 1810              	.L131:
 1811              	.LVL143:
1583:FreeRTOS/Source/tasks.c **** 
 1812              		.loc 1 1583 17 is_stmt 1 view .LVU509
1588:FreeRTOS/Source/tasks.c **** 
 1813              		.loc 1 1588 17 view .LVU510
1588:FreeRTOS/Source/tasks.c **** 
 1814              		.loc 1 1588 39 is_stmt 0 view .LVU511
 1815 0050 E66A     		ldr	r6, [r4, #44]
 1816              	.LVL144:
1594:FreeRTOS/Source/tasks.c ****                     {
 1817              		.loc 1 1594 21 is_stmt 1 view .LVU512
1594:FreeRTOS/Source/tasks.c ****                     {
 1818              		.loc 1 1594 23 is_stmt 0 view .LVU513
 1819 0052 B342     		cmp	r3, r6
 1820 0054 22D0     		beq	.L141
 1821              	.L132:
1600:FreeRTOS/Source/tasks.c ****                     }
 1822              		.loc 1 1600 49 is_stmt 1 view .LVU514
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 139


1604:FreeRTOS/Source/tasks.c ****                 }
 1823              		.loc 1 1604 21 view .LVU515
1604:FreeRTOS/Source/tasks.c ****                 }
 1824              		.loc 1 1604 43 is_stmt 0 view .LVU516
 1825 0056 A564     		str	r5, [r4, #72]
1614:FreeRTOS/Source/tasks.c ****                 {
 1826              		.loc 1 1614 17 is_stmt 1 view .LVU517
1614:FreeRTOS/Source/tasks.c ****                 {
 1827              		.loc 1 1614 23 is_stmt 0 view .LVU518
 1828 0058 A369     		ldr	r3, [r4, #24]
 1829              	.LVL145:
1614:FreeRTOS/Source/tasks.c ****                 {
 1830              		.loc 1 1614 19 view .LVU519
 1831 005a 002B     		cmp	r3, #0
 1832 005c 02DB     		blt	.L133
1616:FreeRTOS/Source/tasks.c ****                 }
 1833              		.loc 1 1616 21 is_stmt 1 view .LVU520
 1834 005e C5F10505 		rsb	r5, r5, #5
 1835              	.LVL146:
1616:FreeRTOS/Source/tasks.c ****                 }
 1836              		.loc 1 1616 21 is_stmt 0 view .LVU521
 1837 0062 A561     		str	r5, [r4, #24]
 1838              	.L133:
1620:FreeRTOS/Source/tasks.c ****                 }
 1839              		.loc 1 1620 45 is_stmt 1 view .LVU522
1627:FreeRTOS/Source/tasks.c ****                 {
 1840              		.loc 1 1627 17 view .LVU523
1627:FreeRTOS/Source/tasks.c ****                 {
 1841              		.loc 1 1627 21 is_stmt 0 view .LVU524
 1842 0064 6169     		ldr	r1, [r4, #20]
 1843 0066 06EB8602 		add	r2, r6, r6, lsl #2
 1844 006a 234B     		ldr	r3, .L143+4
 1845 006c 03EB8203 		add	r3, r3, r2, lsl #2
1627:FreeRTOS/Source/tasks.c ****                 {
 1846              		.loc 1 1627 19 view .LVU525
 1847 0070 9942     		cmp	r1, r3
 1848 0072 15D0     		beq	.L142
 1849              	.LVL147:
 1850              	.L134:
1648:FreeRTOS/Source/tasks.c ****                 }
 1851              		.loc 1 1648 45 is_stmt 1 view .LVU526
1651:FreeRTOS/Source/tasks.c ****                 {
 1852              		.loc 1 1651 17 view .LVU527
1651:FreeRTOS/Source/tasks.c ****                 {
 1853              		.loc 1 1651 19 is_stmt 0 view .LVU528
 1854 0074 4FB1     		cbz	r7, .L129
1653:FreeRTOS/Source/tasks.c ****                 }
 1855              		.loc 1 1653 21 is_stmt 1 view .LVU529
 1856 0076 4FF0E023 		mov	r3, #-536813568
 1857 007a 4FF08052 		mov	r2, #268435456
 1858 007e C3F8042D 		str	r2, [r3, #3332]
1653:FreeRTOS/Source/tasks.c ****                 }
 1859              		.loc 1 1653 21 view .LVU530
 1860              		.syntax unified
 1861              	@ 1653 "FreeRTOS/Source/tasks.c" 1
 1862 0082 BFF34F8F 		dsb
 1863              	@ 0 "" 2
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 140


1653:FreeRTOS/Source/tasks.c ****                 }
 1864              		.loc 1 1653 21 view .LVU531
 1865              	@ 1653 "FreeRTOS/Source/tasks.c" 1
 1866 0086 BFF36F8F 		isb
 1867              	@ 0 "" 2
1653:FreeRTOS/Source/tasks.c ****                 }
 1868              		.loc 1 1653 52 view .LVU532
 1869              	.LVL148:
 1870              		.thumb
 1871              		.syntax unified
 1872              	.L129:
1657:FreeRTOS/Source/tasks.c ****                 }
 1873              		.loc 1 1657 45 view .LVU533
1662:FreeRTOS/Source/tasks.c ****             }
 1874              		.loc 1 1662 17 view .LVU534
1665:FreeRTOS/Source/tasks.c ****     }
 1875              		.loc 1 1665 9 view .LVU535
 1876 008a FFF7FEFF 		bl	vPortExitCritical
 1877              	.LVL149:
1666:FreeRTOS/Source/tasks.c **** 
 1878              		.loc 1 1666 5 is_stmt 0 view .LVU536
 1879 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1880              	.LVL150:
 1881              	.L136:
1512:FreeRTOS/Source/tasks.c **** 
 1882              		.loc 1 1512 20 view .LVU537
 1883 0090 0027     		movs	r7, #0
 1884 0092 DDE7     		b	.L131
 1885              	.L137:
1557:FreeRTOS/Source/tasks.c ****                         }
 1886              		.loc 1 1557 44 view .LVU538
 1887 0094 0127     		movs	r7, #1
 1888 0096 DBE7     		b	.L131
 1889              	.L138:
1576:FreeRTOS/Source/tasks.c ****                 }
 1890              		.loc 1 1576 36 view .LVU539
 1891 0098 0127     		movs	r7, #1
 1892 009a D9E7     		b	.L131
 1893              	.LVL151:
 1894              	.L141:
1596:FreeRTOS/Source/tasks.c ****                     }
 1895              		.loc 1 1596 25 is_stmt 1 view .LVU540
1596:FreeRTOS/Source/tasks.c ****                     }
 1896              		.loc 1 1596 43 is_stmt 0 view .LVU541
 1897 009c E562     		str	r5, [r4, #44]
 1898 009e DAE7     		b	.L132
 1899              	.LVL152:
 1900              	.L142:
1632:FreeRTOS/Source/tasks.c ****                     {
 1901              		.loc 1 1632 21 is_stmt 1 view .LVU542
1632:FreeRTOS/Source/tasks.c ****                     {
 1902              		.loc 1 1632 25 is_stmt 0 view .LVU543
 1903 00a0 251D     		adds	r5, r4, #4
 1904 00a2 2846     		mov	r0, r5
 1905 00a4 FFF7FEFF 		bl	uxListRemove
 1906              	.LVL153:
1632:FreeRTOS/Source/tasks.c ****                     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 141


 1907              		.loc 1 1632 23 view .LVU544
 1908 00a8 30B9     		cbnz	r0, .L135
1637:FreeRTOS/Source/tasks.c ****                     }
 1909              		.loc 1 1637 25 is_stmt 1 view .LVU545
 1910 00aa 0122     		movs	r2, #1
 1911 00ac B240     		lsls	r2, r2, r6
 1912 00ae 1349     		ldr	r1, .L143+8
 1913 00b0 0B68     		ldr	r3, [r1]
 1914 00b2 23EA0203 		bic	r3, r3, r2
 1915 00b6 0B60     		str	r3, [r1]
 1916              	.L135:
1641:FreeRTOS/Source/tasks.c ****                     }
 1917              		.loc 1 1641 49 view .LVU546
1644:FreeRTOS/Source/tasks.c ****                 }
 1918              		.loc 1 1644 21 view .LVU547
1644:FreeRTOS/Source/tasks.c ****                 }
 1919              		.loc 1 1644 21 view .LVU548
 1920 00b8 E36A     		ldr	r3, [r4, #44]
 1921 00ba 0122     		movs	r2, #1
 1922 00bc 9A40     		lsls	r2, r2, r3
 1923 00be 0F49     		ldr	r1, .L143+8
 1924 00c0 0868     		ldr	r0, [r1]
 1925 00c2 0243     		orrs	r2, r2, r0
 1926 00c4 0A60     		str	r2, [r1]
 1927              	.LBB178:
1644:FreeRTOS/Source/tasks.c ****                 }
 1928              		.loc 1 1644 21 view .LVU549
 1929 00c6 0C4A     		ldr	r2, .L143+4
 1930 00c8 03EB8303 		add	r3, r3, r3, lsl #2
 1931 00cc 02EB8303 		add	r3, r2, r3, lsl #2
 1932 00d0 5B68     		ldr	r3, [r3, #4]
 1933              	.LVL154:
1644:FreeRTOS/Source/tasks.c ****                 }
 1934              		.loc 1 1644 21 view .LVU550
1644:FreeRTOS/Source/tasks.c ****                 }
 1935              		.loc 1 1644 21 view .LVU551
1644:FreeRTOS/Source/tasks.c ****                 }
 1936              		.loc 1 1644 21 view .LVU552
 1937 00d2 A360     		str	r3, [r4, #8]
1644:FreeRTOS/Source/tasks.c ****                 }
 1938              		.loc 1 1644 21 view .LVU553
 1939 00d4 9968     		ldr	r1, [r3, #8]
 1940 00d6 E160     		str	r1, [r4, #12]
1644:FreeRTOS/Source/tasks.c ****                 }
 1941              		.loc 1 1644 21 view .LVU554
 1942 00d8 4D60     		str	r5, [r1, #4]
1644:FreeRTOS/Source/tasks.c ****                 }
 1943              		.loc 1 1644 21 view .LVU555
 1944 00da 9D60     		str	r5, [r3, #8]
1644:FreeRTOS/Source/tasks.c ****                 }
 1945              		.loc 1 1644 21 view .LVU556
 1946 00dc E36A     		ldr	r3, [r4, #44]
 1947              	.LVL155:
1644:FreeRTOS/Source/tasks.c ****                 }
 1948              		.loc 1 1644 21 is_stmt 0 view .LVU557
 1949 00de 03EB8301 		add	r1, r3, r3, lsl #2
 1950 00e2 8800     		lsls	r0, r1, #2
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 142


 1951 00e4 02EB8101 		add	r1, r2, r1, lsl #2
 1952 00e8 6161     		str	r1, [r4, #20]
1644:FreeRTOS/Source/tasks.c ****                 }
 1953              		.loc 1 1644 21 is_stmt 1 view .LVU558
 1954 00ea 1158     		ldr	r1, [r2, r0]
 1955 00ec 0131     		adds	r1, r1, #1
 1956 00ee 1150     		str	r1, [r2, r0]
 1957              	.LBE178:
1644:FreeRTOS/Source/tasks.c ****                 }
 1958              		.loc 1 1644 21 view .LVU559
1644:FreeRTOS/Source/tasks.c ****                 }
 1959              		.loc 1 1644 51 view .LVU560
 1960 00f0 C0E7     		b	.L134
 1961              	.L144:
 1962 00f2 00BF     		.align	2
 1963              	.L143:
 1964 00f4 00000000 		.word	pxCurrentTCB
 1965 00f8 00000000 		.word	pxReadyTasksLists
 1966 00fc 00000000 		.word	uxTopReadyPriority
 1967              		.cfi_endproc
 1968              	.LFE14:
 1970              		.section	.text.vTaskResume,"ax",%progbits
 1971              		.align	1
 1972              		.global	vTaskResume
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1977              	vTaskResume:
 1978              	.LVL156:
 1979              	.LFB17:
1826:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1980              		.loc 1 1826 5 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
1826:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1984              		.loc 1 1826 5 is_stmt 0 view .LVU562
 1985 0000 38B5     		push	{r3, r4, r5, lr}
 1986              	.LCFI16:
 1987              		.cfi_def_cfa_offset 16
 1988              		.cfi_offset 3, -16
 1989              		.cfi_offset 4, -12
 1990              		.cfi_offset 5, -8
 1991              		.cfi_offset 14, -4
1827:FreeRTOS/Source/tasks.c **** 
 1992              		.loc 1 1827 9 is_stmt 1 view .LVU563
 1993              	.LVL157:
1830:FreeRTOS/Source/tasks.c **** 
 1994              		.loc 1 1830 9 view .LVU564
 1995 0002 68B1     		cbz	r0, .L151
 1996 0004 0446     		mov	r4, r0
1830:FreeRTOS/Source/tasks.c **** 
 1997              		.loc 1 1830 38 discriminator 2 view .LVU565
1834:FreeRTOS/Source/tasks.c ****         {
 1998              		.loc 1 1834 9 discriminator 2 view .LVU566
1834:FreeRTOS/Source/tasks.c ****         {
 1999              		.loc 1 1834 21 is_stmt 0 discriminator 2 view .LVU567
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 143


 2000 0006 234B     		ldr	r3, .L153
 2001 0008 1B68     		ldr	r3, [r3]
1834:FreeRTOS/Source/tasks.c ****         {
 2002              		.loc 1 1834 11 discriminator 2 view .LVU568
 2003 000a 8342     		cmp	r3, r0
 2004 000c 07D0     		beq	.L145
1836:FreeRTOS/Source/tasks.c ****             {
 2005              		.loc 1 1836 13 is_stmt 1 view .LVU569
 2006 000e FFF7FEFF 		bl	vPortEnterCritical
 2007              	.LVL158:
1838:FreeRTOS/Source/tasks.c ****                 {
 2008              		.loc 1 1838 17 view .LVU570
1838:FreeRTOS/Source/tasks.c ****                 {
 2009              		.loc 1 1838 21 is_stmt 0 view .LVU571
 2010 0012 2046     		mov	r0, r4
 2011 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2012              	.LVL159:
1838:FreeRTOS/Source/tasks.c ****                 {
 2013              		.loc 1 1838 19 view .LVU572
 2014 0018 58B9     		cbnz	r0, .L152
 2015              	.L149:
1862:FreeRTOS/Source/tasks.c ****                 }
 2016              		.loc 1 1862 45 is_stmt 1 view .LVU573
1865:FreeRTOS/Source/tasks.c ****         }
 2017              		.loc 1 1865 13 view .LVU574
 2018 001a FFF7FEFF 		bl	vPortExitCritical
 2019              	.LVL160:
1869:FreeRTOS/Source/tasks.c ****         }
 2020              		.loc 1 1869 37 view .LVU575
 2021              	.L145:
1871:FreeRTOS/Source/tasks.c **** 
 2022              		.loc 1 1871 5 is_stmt 0 view .LVU576
 2023 001e 38BD     		pop	{r3, r4, r5, pc}
 2024              	.LVL161:
 2025              	.L151:
1830:FreeRTOS/Source/tasks.c **** 
 2026              		.loc 1 1830 9 is_stmt 1 view .LVU577
 2027              	.LBB179:
 2028              	.LBI179:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2029              		.loc 2 194 34 view .LVU578
 2030              	.LBB180:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2031              		.loc 2 196 9 view .LVU579
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2032              		.loc 2 198 9 view .LVU580
 2033              		.syntax unified
 2034              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2035 0020 4FF05003 			mov r3, #80												
 2036 0024 83F31188 		msr basepri, r3											
 2037 0028 BFF36F8F 		isb														
 2038 002c BFF34F8F 		dsb														
 2039              	
 2040              	@ 0 "" 2
 2041              	.LVL162:
 2042              		.thumb
 2043              		.syntax unified
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 144


 2044              	.L147:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2045              		.loc 2 198 9 is_stmt 0 view .LVU581
 2046              	.LBE180:
 2047              	.LBE179:
1830:FreeRTOS/Source/tasks.c **** 
 2048              		.loc 1 1830 9 is_stmt 1 discriminator 1 view .LVU582
1830:FreeRTOS/Source/tasks.c **** 
 2049              		.loc 1 1830 9 discriminator 1 view .LVU583
 2050 0030 FEE7     		b	.L147
 2051              	.LVL163:
 2052              	.L152:
1840:FreeRTOS/Source/tasks.c **** 
 2053              		.loc 1 1840 46 view .LVU584
1844:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2054              		.loc 1 1844 21 view .LVU585
1844:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2055              		.loc 1 1844 30 is_stmt 0 view .LVU586
 2056 0032 251D     		adds	r5, r4, #4
 2057 0034 2846     		mov	r0, r5
 2058 0036 FFF7FEFF 		bl	uxListRemove
 2059              	.LVL164:
1845:FreeRTOS/Source/tasks.c **** 
 2060              		.loc 1 1845 21 is_stmt 1 view .LVU587
1845:FreeRTOS/Source/tasks.c **** 
 2061              		.loc 1 1845 21 view .LVU588
 2062 003a E36A     		ldr	r3, [r4, #44]
 2063 003c 0122     		movs	r2, #1
 2064 003e 9A40     		lsls	r2, r2, r3
 2065 0040 1549     		ldr	r1, .L153+4
 2066 0042 0868     		ldr	r0, [r1]
 2067 0044 0243     		orrs	r2, r2, r0
 2068 0046 0A60     		str	r2, [r1]
 2069              	.LBB181:
1845:FreeRTOS/Source/tasks.c **** 
 2070              		.loc 1 1845 21 view .LVU589
 2071 0048 144A     		ldr	r2, .L153+8
 2072 004a 03EB8303 		add	r3, r3, r3, lsl #2
 2073 004e 02EB8303 		add	r3, r2, r3, lsl #2
 2074 0052 5B68     		ldr	r3, [r3, #4]
 2075              	.LVL165:
1845:FreeRTOS/Source/tasks.c **** 
 2076              		.loc 1 1845 21 view .LVU590
1845:FreeRTOS/Source/tasks.c **** 
 2077              		.loc 1 1845 21 view .LVU591
1845:FreeRTOS/Source/tasks.c **** 
 2078              		.loc 1 1845 21 view .LVU592
 2079 0054 A360     		str	r3, [r4, #8]
1845:FreeRTOS/Source/tasks.c **** 
 2080              		.loc 1 1845 21 view .LVU593
 2081 0056 9968     		ldr	r1, [r3, #8]
 2082 0058 E160     		str	r1, [r4, #12]
1845:FreeRTOS/Source/tasks.c **** 
 2083              		.loc 1 1845 21 view .LVU594
 2084 005a 4D60     		str	r5, [r1, #4]
1845:FreeRTOS/Source/tasks.c **** 
 2085              		.loc 1 1845 21 view .LVU595
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 145


 2086 005c 9D60     		str	r5, [r3, #8]
1845:FreeRTOS/Source/tasks.c **** 
 2087              		.loc 1 1845 21 view .LVU596
 2088 005e E36A     		ldr	r3, [r4, #44]
 2089              	.LVL166:
1845:FreeRTOS/Source/tasks.c **** 
 2090              		.loc 1 1845 21 is_stmt 0 view .LVU597
 2091 0060 03EB8301 		add	r1, r3, r3, lsl #2
 2092 0064 8800     		lsls	r0, r1, #2
 2093 0066 02EB8101 		add	r1, r2, r1, lsl #2
 2094 006a 6161     		str	r1, [r4, #20]
1845:FreeRTOS/Source/tasks.c **** 
 2095              		.loc 1 1845 21 is_stmt 1 view .LVU598
 2096 006c 1158     		ldr	r1, [r2, r0]
 2097 006e 0131     		adds	r1, r1, #1
 2098 0070 1150     		str	r1, [r2, r0]
 2099              	.LBE181:
1845:FreeRTOS/Source/tasks.c **** 
 2100              		.loc 1 1845 21 view .LVU599
1845:FreeRTOS/Source/tasks.c **** 
 2101              		.loc 1 1845 51 view .LVU600
1848:FreeRTOS/Source/tasks.c ****                     {
 2102              		.loc 1 1848 21 view .LVU601
1848:FreeRTOS/Source/tasks.c ****                     {
 2103              		.loc 1 1848 30 is_stmt 0 view .LVU602
 2104 0072 E26A     		ldr	r2, [r4, #44]
1848:FreeRTOS/Source/tasks.c ****                     {
 2105              		.loc 1 1848 58 view .LVU603
 2106 0074 074B     		ldr	r3, .L153
 2107 0076 1B68     		ldr	r3, [r3]
 2108 0078 DB6A     		ldr	r3, [r3, #44]
1848:FreeRTOS/Source/tasks.c ****                     {
 2109              		.loc 1 1848 23 view .LVU604
 2110 007a 9A42     		cmp	r2, r3
 2111 007c CDD3     		bcc	.L149
1853:FreeRTOS/Source/tasks.c ****                     }
 2112              		.loc 1 1853 25 is_stmt 1 view .LVU605
 2113 007e 4FF0E023 		mov	r3, #-536813568
 2114 0082 4FF08052 		mov	r2, #268435456
 2115 0086 C3F8042D 		str	r2, [r3, #3332]
1853:FreeRTOS/Source/tasks.c ****                     }
 2116              		.loc 1 1853 25 view .LVU606
 2117              		.syntax unified
 2118              	@ 1853 "FreeRTOS/Source/tasks.c" 1
 2119 008a BFF34F8F 		dsb
 2120              	@ 0 "" 2
1853:FreeRTOS/Source/tasks.c ****                     }
 2121              		.loc 1 1853 25 view .LVU607
 2122              	@ 1853 "FreeRTOS/Source/tasks.c" 1
 2123 008e BFF36F8F 		isb
 2124              	@ 0 "" 2
1853:FreeRTOS/Source/tasks.c ****                     }
 2125              		.loc 1 1853 56 view .LVU608
 2126              		.thumb
 2127              		.syntax unified
 2128 0092 C2E7     		b	.L149
 2129              	.L154:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 146


 2130              		.align	2
 2131              	.L153:
 2132 0094 00000000 		.word	pxCurrentTCB
 2133 0098 00000000 		.word	uxTopReadyPriority
 2134 009c 00000000 		.word	pxReadyTasksLists
 2135              		.cfi_endproc
 2136              	.LFE17:
 2138              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2139              		.align	1
 2140              		.global	xTaskResumeFromISR
 2141              		.syntax unified
 2142              		.thumb
 2143              		.thumb_func
 2145              	xTaskResumeFromISR:
 2146              	.LVL167:
 2147              	.LFB18:
1880:FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2148              		.loc 1 1880 5 view -0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
1880:FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2152              		.loc 1 1880 5 is_stmt 0 view .LVU610
 2153 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2154              	.LCFI17:
 2155              		.cfi_def_cfa_offset 24
 2156              		.cfi_offset 3, -24
 2157              		.cfi_offset 4, -20
 2158              		.cfi_offset 5, -16
 2159              		.cfi_offset 6, -12
 2160              		.cfi_offset 7, -8
 2161              		.cfi_offset 14, -4
1881:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2162              		.loc 1 1881 9 is_stmt 1 view .LVU611
 2163              	.LVL168:
1882:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 2164              		.loc 1 1882 9 view .LVU612
1883:FreeRTOS/Source/tasks.c **** 
 2165              		.loc 1 1883 9 view .LVU613
1885:FreeRTOS/Source/tasks.c **** 
 2166              		.loc 1 1885 9 view .LVU614
 2167 0002 0028     		cmp	r0, #0
 2168 0004 43D0     		beq	.L163
 2169 0006 0446     		mov	r4, r0
1885:FreeRTOS/Source/tasks.c **** 
 2170              		.loc 1 1885 38 discriminator 2 view .LVU615
1903:FreeRTOS/Source/tasks.c **** 
 2171              		.loc 1 1903 9 discriminator 2 view .LVU616
 2172 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2173              	.LVL169:
1905:FreeRTOS/Source/tasks.c ****         {
 2174              		.loc 1 1905 9 discriminator 2 view .LVU617
 2175              	.LBB182:
 2176              	.LBI182:
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2177              		.loc 2 210 38 discriminator 2 view .LVU618
 2178              	.LBB183:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 147


 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2179              		.loc 2 212 9 discriminator 2 view .LVU619
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2180              		.loc 2 214 9 discriminator 2 view .LVU620
 2181              		.syntax unified
 2182              	@ 214 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2183 000c EFF31185 			mrs r5, basepri											
 2184 0010 4FF05003 		mov r3, #80												
 2185 0014 83F31188 		msr basepri, r3											
 2186 0018 BFF36F8F 		isb														
 2187 001c BFF34F8F 		dsb														
 2188              	
 2189              	@ 0 "" 2
 2190              	.LVL170:
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 2191              		.loc 2 226 9 discriminator 2 view .LVU621
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 2192              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU622
 2193              		.thumb
 2194              		.syntax unified
 2195              	.LBE183:
 2196              	.LBE182:
1907:FreeRTOS/Source/tasks.c ****             {
 2197              		.loc 1 1907 13 is_stmt 1 discriminator 2 view .LVU623
1907:FreeRTOS/Source/tasks.c ****             {
 2198              		.loc 1 1907 17 is_stmt 0 discriminator 2 view .LVU624
 2199 0020 2046     		mov	r0, r4
 2200 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2201              	.LVL171:
1907:FreeRTOS/Source/tasks.c ****             {
 2202              		.loc 1 1907 15 discriminator 2 view .LVU625
 2203 0026 0646     		mov	r6, r0
 2204 0028 0028     		cmp	r0, #0
 2205 002a 2CD0     		beq	.L158
1909:FreeRTOS/Source/tasks.c **** 
 2206              		.loc 1 1909 51 is_stmt 1 view .LVU626
1912:FreeRTOS/Source/tasks.c ****                 {
 2207              		.loc 1 1912 17 view .LVU627
1912:FreeRTOS/Source/tasks.c ****                 {
 2208              		.loc 1 1912 42 is_stmt 0 view .LVU628
 2209 002c 214B     		ldr	r3, .L164
 2210 002e 1B68     		ldr	r3, [r3]
1912:FreeRTOS/Source/tasks.c ****                 {
 2211              		.loc 1 1912 19 view .LVU629
 2212 0030 002B     		cmp	r3, #0
 2213 0032 37D1     		bne	.L159
1916:FreeRTOS/Source/tasks.c ****                     {
 2214              		.loc 1 1916 21 is_stmt 1 view .LVU630
1916:FreeRTOS/Source/tasks.c ****                     {
 2215              		.loc 1 1916 30 is_stmt 0 view .LVU631
 2216 0034 E26A     		ldr	r2, [r4, #44]
1916:FreeRTOS/Source/tasks.c ****                     {
 2217              		.loc 1 1916 58 view .LVU632
 2218 0036 204B     		ldr	r3, .L164+4
 2219 0038 1B68     		ldr	r3, [r3]
 2220 003a DB6A     		ldr	r3, [r3, #44]
1916:FreeRTOS/Source/tasks.c ****                     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 148


 2221              		.loc 1 1916 23 view .LVU633
 2222 003c 9A42     		cmp	r2, r3
 2223 003e 2FD3     		bcc	.L161
1918:FreeRTOS/Source/tasks.c **** 
 2224              		.loc 1 1918 25 is_stmt 1 view .LVU634
 2225              	.LVL172:
1923:FreeRTOS/Source/tasks.c ****                     }
 2226              		.loc 1 1923 25 view .LVU635
1923:FreeRTOS/Source/tasks.c ****                     }
 2227              		.loc 1 1923 39 is_stmt 0 view .LVU636
 2228 0040 0126     		movs	r6, #1
 2229 0042 1E4B     		ldr	r3, .L164+8
 2230 0044 1E60     		str	r6, [r3]
 2231              	.LVL173:
 2232              	.L160:
1927:FreeRTOS/Source/tasks.c ****                     }
 2233              		.loc 1 1927 49 is_stmt 1 view .LVU637
1930:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2234              		.loc 1 1930 21 view .LVU638
1930:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2235              		.loc 1 1930 30 is_stmt 0 view .LVU639
 2236 0046 271D     		adds	r7, r4, #4
 2237 0048 3846     		mov	r0, r7
 2238 004a FFF7FEFF 		bl	uxListRemove
 2239              	.LVL174:
1931:FreeRTOS/Source/tasks.c ****                 }
 2240              		.loc 1 1931 21 is_stmt 1 view .LVU640
1931:FreeRTOS/Source/tasks.c ****                 }
 2241              		.loc 1 1931 21 view .LVU641
 2242 004e E36A     		ldr	r3, [r4, #44]
 2243 0050 0122     		movs	r2, #1
 2244 0052 9A40     		lsls	r2, r2, r3
 2245 0054 1A49     		ldr	r1, .L164+12
 2246 0056 0868     		ldr	r0, [r1]
 2247 0058 0243     		orrs	r2, r2, r0
 2248 005a 0A60     		str	r2, [r1]
 2249              	.LBB184:
1931:FreeRTOS/Source/tasks.c ****                 }
 2250              		.loc 1 1931 21 view .LVU642
 2251 005c 194A     		ldr	r2, .L164+16
 2252 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2253 0062 02EB8303 		add	r3, r2, r3, lsl #2
 2254 0066 5B68     		ldr	r3, [r3, #4]
 2255              	.LVL175:
1931:FreeRTOS/Source/tasks.c ****                 }
 2256              		.loc 1 1931 21 view .LVU643
1931:FreeRTOS/Source/tasks.c ****                 }
 2257              		.loc 1 1931 21 view .LVU644
1931:FreeRTOS/Source/tasks.c ****                 }
 2258              		.loc 1 1931 21 view .LVU645
 2259 0068 A360     		str	r3, [r4, #8]
1931:FreeRTOS/Source/tasks.c ****                 }
 2260              		.loc 1 1931 21 view .LVU646
 2261 006a 9968     		ldr	r1, [r3, #8]
 2262 006c E160     		str	r1, [r4, #12]
1931:FreeRTOS/Source/tasks.c ****                 }
 2263              		.loc 1 1931 21 view .LVU647
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 149


 2264 006e 4F60     		str	r7, [r1, #4]
1931:FreeRTOS/Source/tasks.c ****                 }
 2265              		.loc 1 1931 21 view .LVU648
 2266 0070 9F60     		str	r7, [r3, #8]
1931:FreeRTOS/Source/tasks.c ****                 }
 2267              		.loc 1 1931 21 view .LVU649
 2268 0072 E36A     		ldr	r3, [r4, #44]
 2269              	.LVL176:
1931:FreeRTOS/Source/tasks.c ****                 }
 2270              		.loc 1 1931 21 is_stmt 0 view .LVU650
 2271 0074 03EB8301 		add	r1, r3, r3, lsl #2
 2272 0078 8800     		lsls	r0, r1, #2
 2273 007a 02EB8101 		add	r1, r2, r1, lsl #2
 2274 007e 6161     		str	r1, [r4, #20]
1931:FreeRTOS/Source/tasks.c ****                 }
 2275              		.loc 1 1931 21 is_stmt 1 view .LVU651
 2276 0080 1158     		ldr	r1, [r2, r0]
 2277 0082 0131     		adds	r1, r1, #1
 2278 0084 1150     		str	r1, [r2, r0]
 2279              	.LBE184:
1931:FreeRTOS/Source/tasks.c ****                 }
 2280              		.loc 1 1931 21 view .LVU652
1931:FreeRTOS/Source/tasks.c ****                 }
 2281              		.loc 1 1931 51 view .LVU653
 2282              	.LVL177:
 2283              	.L158:
1943:FreeRTOS/Source/tasks.c ****             }
 2284              		.loc 1 1943 41 view .LVU654
1946:FreeRTOS/Source/tasks.c **** 
 2285              		.loc 1 1946 9 view .LVU655
 2286              	.LBB185:
 2287              	.LBI185:
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2288              		.loc 2 230 34 view .LVU656
 2289              	.LBB186:
 2290              		.loc 2 232 9 view .LVU657
 2291              		.syntax unified
 2292              	@ 232 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2293 0086 85F31188 			msr basepri, r5	
 2294              	@ 0 "" 2
 2295              		.thumb
 2296              		.syntax unified
 2297              	.LBE186:
 2298              	.LBE185:
1948:FreeRTOS/Source/tasks.c ****     }
 2299              		.loc 1 1948 9 view .LVU658
1949:FreeRTOS/Source/tasks.c **** 
 2300              		.loc 1 1949 5 is_stmt 0 view .LVU659
 2301 008a 3046     		mov	r0, r6
 2302 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2303              	.LVL178:
 2304              	.L163:
1885:FreeRTOS/Source/tasks.c **** 
 2305              		.loc 1 1885 9 is_stmt 1 view .LVU660
 2306              	.LBB187:
 2307              	.LBI187:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 150


 2308              		.loc 2 194 34 view .LVU661
 2309              	.LBB188:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2310              		.loc 2 196 9 view .LVU662
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2311              		.loc 2 198 9 view .LVU663
 2312              		.syntax unified
 2313              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2314 008e 4FF05003 			mov r3, #80												
 2315 0092 83F31188 		msr basepri, r3											
 2316 0096 BFF36F8F 		isb														
 2317 009a BFF34F8F 		dsb														
 2318              	
 2319              	@ 0 "" 2
 2320              	.LVL179:
 2321              		.thumb
 2322              		.syntax unified
 2323              	.L157:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2324              		.loc 2 198 9 is_stmt 0 view .LVU664
 2325              	.LBE188:
 2326              	.LBE187:
1885:FreeRTOS/Source/tasks.c **** 
 2327              		.loc 1 1885 9 is_stmt 1 discriminator 1 view .LVU665
1885:FreeRTOS/Source/tasks.c **** 
 2328              		.loc 1 1885 9 discriminator 1 view .LVU666
 2329 009e FEE7     		b	.L157
 2330              	.LVL180:
 2331              	.L161:
1881:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2332              		.loc 1 1881 20 is_stmt 0 view .LVU667
 2333 00a0 0026     		movs	r6, #0
 2334 00a2 D0E7     		b	.L160
 2335              	.L159:
1938:FreeRTOS/Source/tasks.c ****                 }
 2336              		.loc 1 1938 21 is_stmt 1 view .LVU668
 2337 00a4 04F11801 		add	r1, r4, #24
 2338 00a8 0748     		ldr	r0, .L164+20
 2339 00aa FFF7FEFF 		bl	vListInsertEnd
 2340              	.LVL181:
1881:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2341              		.loc 1 1881 20 is_stmt 0 view .LVU669
 2342 00ae 0026     		movs	r6, #0
 2343 00b0 E9E7     		b	.L158
 2344              	.L165:
 2345 00b2 00BF     		.align	2
 2346              	.L164:
 2347 00b4 00000000 		.word	uxSchedulerSuspended
 2348 00b8 00000000 		.word	pxCurrentTCB
 2349 00bc 00000000 		.word	xYieldPending
 2350 00c0 00000000 		.word	uxTopReadyPriority
 2351 00c4 00000000 		.word	pxReadyTasksLists
 2352 00c8 00000000 		.word	xPendingReadyList
 2353              		.cfi_endproc
 2354              	.LFE18:
 2356              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2357              		.align	2
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 151


 2358              	.LC0:
 2359 0000 49444C45 		.ascii	"IDLE\000"
 2359      00
 2360              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2361              		.align	1
 2362              		.global	vTaskStartScheduler
 2363              		.syntax unified
 2364              		.thumb
 2365              		.thumb_func
 2367              	vTaskStartScheduler:
 2368              	.LFB19:
1955:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 2369              		.loc 1 1955 1 is_stmt 1 view -0
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 0
 2372              		@ frame_needed = 0, uses_anonymous_args = 0
 2373 0000 00B5     		push	{lr}
 2374              	.LCFI18:
 2375              		.cfi_def_cfa_offset 4
 2376              		.cfi_offset 14, -4
 2377 0002 83B0     		sub	sp, sp, #12
 2378              	.LCFI19:
 2379              		.cfi_def_cfa_offset 16
1956:FreeRTOS/Source/tasks.c **** 
 2380              		.loc 1 1956 5 view .LVU671
1988:FreeRTOS/Source/tasks.c ****                                configIDLE_TASK_NAME,
 2381              		.loc 1 1988 9 view .LVU672
1988:FreeRTOS/Source/tasks.c ****                                configIDLE_TASK_NAME,
 2382              		.loc 1 1988 19 is_stmt 0 view .LVU673
 2383 0004 1A4B     		ldr	r3, .L173
 2384 0006 0193     		str	r3, [sp, #4]
 2385 0008 0023     		movs	r3, #0
 2386 000a 0093     		str	r3, [sp]
 2387 000c 8222     		movs	r2, #130
 2388 000e 1949     		ldr	r1, .L173+4
 2389 0010 1948     		ldr	r0, .L173+8
 2390 0012 FFF7FEFF 		bl	xTaskCreate
 2391              	.LVL182:
1999:FreeRTOS/Source/tasks.c ****         {
 2392              		.loc 1 1999 9 is_stmt 1 view .LVU674
1999:FreeRTOS/Source/tasks.c ****         {
 2393              		.loc 1 1999 11 is_stmt 0 view .LVU675
 2394 0016 0128     		cmp	r0, #1
 2395 0018 07D0     		beq	.L171
 2396              	.L167:
 2397              	.LVL183:
2066:FreeRTOS/Source/tasks.c ****     }
 2398              		.loc 1 2066 9 is_stmt 1 view .LVU676
 2399 001a B0F1FF3F 		cmp	r0, #-1
 2400 001e 1DD0     		beq	.L172
 2401              	.L168:
2066:FreeRTOS/Source/tasks.c ****     }
 2402              		.loc 1 2066 73 discriminator 2 view .LVU677
2071:FreeRTOS/Source/tasks.c **** 
 2403              		.loc 1 2071 5 discriminator 2 view .LVU678
2075:FreeRTOS/Source/tasks.c **** }
 2404              		.loc 1 2075 5 discriminator 2 view .LVU679
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 152


 2405 0020 164B     		ldr	r3, .L173+12
 2406 0022 1B68     		ldr	r3, [r3]
2076:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2407              		.loc 1 2076 1 is_stmt 0 discriminator 2 view .LVU680
 2408 0024 03B0     		add	sp, sp, #12
 2409              	.LCFI20:
 2410              		.cfi_remember_state
 2411              		.cfi_def_cfa_offset 4
 2412              		@ sp needed
 2413 0026 5DF804FB 		ldr	pc, [sp], #4
 2414              	.LVL184:
 2415              	.L171:
 2416              	.LCFI21:
 2417              		.cfi_restore_state
2001:FreeRTOS/Source/tasks.c ****         }
 2418              		.loc 1 2001 13 is_stmt 1 view .LVU681
2001:FreeRTOS/Source/tasks.c ****         }
 2419              		.loc 1 2001 23 is_stmt 0 view .LVU682
 2420 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 2421              	.LVL185:
2005:FreeRTOS/Source/tasks.c ****         }
 2422              		.loc 1 2005 37 is_stmt 1 view .LVU683
2010:FreeRTOS/Source/tasks.c ****     {
 2423              		.loc 1 2010 5 view .LVU684
2010:FreeRTOS/Source/tasks.c ****     {
 2424              		.loc 1 2010 7 is_stmt 0 view .LVU685
 2425 002e 0128     		cmp	r0, #1
 2426 0030 F3D1     		bne	.L167
2026:FreeRTOS/Source/tasks.c **** 
 2427              		.loc 1 2026 9 is_stmt 1 view .LVU686
 2428              	.LBB189:
 2429              	.LBI189:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2430              		.loc 2 194 34 view .LVU687
 2431              	.LBB190:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2432              		.loc 2 196 9 view .LVU688
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2433              		.loc 2 198 9 view .LVU689
 2434              		.syntax unified
 2435              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2436 0032 4FF05003 			mov r3, #80												
 2437 0036 83F31188 		msr basepri, r3											
 2438 003a BFF36F8F 		isb														
 2439 003e BFF34F8F 		dsb														
 2440              	
 2441              	@ 0 "" 2
 2442              		.thumb
 2443              		.syntax unified
 2444              	.LBE190:
 2445              	.LBE189:
2036:FreeRTOS/Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 2446              		.loc 1 2036 9 view .LVU690
2036:FreeRTOS/Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 2447              		.loc 1 2036 30 is_stmt 0 view .LVU691
 2448 0042 0F4B     		ldr	r3, .L173+16
 2449 0044 4FF0FF32 		mov	r2, #-1
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 153


 2450 0048 1A60     		str	r2, [r3]
2037:FreeRTOS/Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2451              		.loc 1 2037 9 is_stmt 1 view .LVU692
2037:FreeRTOS/Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2452              		.loc 1 2037 27 is_stmt 0 view .LVU693
 2453 004a 0E4B     		ldr	r3, .L173+20
 2454 004c 0122     		movs	r2, #1
 2455 004e 1A60     		str	r2, [r3]
2038:FreeRTOS/Source/tasks.c **** 
 2456              		.loc 1 2038 9 is_stmt 1 view .LVU694
2038:FreeRTOS/Source/tasks.c **** 
 2457              		.loc 1 2038 20 is_stmt 0 view .LVU695
 2458 0050 0D4B     		ldr	r3, .L173+24
 2459 0052 0022     		movs	r2, #0
 2460 0054 1A60     		str	r2, [r3]
2046:FreeRTOS/Source/tasks.c **** 
 2461              		.loc 1 2046 49 is_stmt 1 view .LVU696
2048:FreeRTOS/Source/tasks.c **** 
 2462              		.loc 1 2048 32 view .LVU697
2052:FreeRTOS/Source/tasks.c **** 
 2463              		.loc 1 2052 9 view .LVU698
 2464 0056 FFF7FEFF 		bl	xPortStartScheduler
 2465              	.LVL186:
2052:FreeRTOS/Source/tasks.c **** 
 2466              		.loc 1 2052 9 is_stmt 0 view .LVU699
 2467 005a E1E7     		b	.L168
 2468              	.LVL187:
 2469              	.L172:
2066:FreeRTOS/Source/tasks.c ****     }
 2470              		.loc 1 2066 9 is_stmt 1 view .LVU700
 2471              	.LBB191:
 2472              	.LBI191:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2473              		.loc 2 194 34 view .LVU701
 2474              	.LBB192:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2475              		.loc 2 196 9 view .LVU702
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2476              		.loc 2 198 9 view .LVU703
 2477              		.syntax unified
 2478              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2479 005c 4FF05003 			mov r3, #80												
 2480 0060 83F31188 		msr basepri, r3											
 2481 0064 BFF36F8F 		isb														
 2482 0068 BFF34F8F 		dsb														
 2483              	
 2484              	@ 0 "" 2
 2485              	.LVL188:
 2486              		.thumb
 2487              		.syntax unified
 2488              	.L169:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2489              		.loc 2 198 9 is_stmt 0 view .LVU704
 2490              	.LBE192:
 2491              	.LBE191:
2066:FreeRTOS/Source/tasks.c ****     }
 2492              		.loc 1 2066 9 is_stmt 1 discriminator 1 view .LVU705
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 154


2066:FreeRTOS/Source/tasks.c ****     }
 2493              		.loc 1 2066 9 discriminator 1 view .LVU706
 2494 006c FEE7     		b	.L169
 2495              	.L174:
 2496 006e 00BF     		.align	2
 2497              	.L173:
 2498 0070 00000000 		.word	xIdleTaskHandle
 2499 0074 00000000 		.word	.LC0
 2500 0078 00000000 		.word	prvIdleTask
 2501 007c 00000000 		.word	uxTopUsedPriority
 2502 0080 00000000 		.word	xNextTaskUnblockTime
 2503 0084 00000000 		.word	xSchedulerRunning
 2504 0088 00000000 		.word	xTickCount
 2505              		.cfi_endproc
 2506              	.LFE19:
 2508              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2509              		.align	1
 2510              		.global	vTaskEndScheduler
 2511              		.syntax unified
 2512              		.thumb
 2513              		.thumb_func
 2515              	vTaskEndScheduler:
 2516              	.LFB20:
2080:FreeRTOS/Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2517              		.loc 1 2080 1 view -0
 2518              		.cfi_startproc
 2519              		@ args = 0, pretend = 0, frame = 0
 2520              		@ frame_needed = 0, uses_anonymous_args = 0
 2521 0000 08B5     		push	{r3, lr}
 2522              	.LCFI22:
 2523              		.cfi_def_cfa_offset 8
 2524              		.cfi_offset 3, -8
 2525              		.cfi_offset 14, -4
2084:FreeRTOS/Source/tasks.c ****     xSchedulerRunning = pdFALSE;
 2526              		.loc 1 2084 5 view .LVU708
 2527              	.LBB193:
 2528              	.LBI193:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2529              		.loc 2 194 34 view .LVU709
 2530              	.LBB194:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2531              		.loc 2 196 9 view .LVU710
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2532              		.loc 2 198 9 view .LVU711
 2533              		.syntax unified
 2534              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2535 0002 4FF05003 			mov r3, #80												
 2536 0006 83F31188 		msr basepri, r3											
 2537 000a BFF36F8F 		isb														
 2538 000e BFF34F8F 		dsb														
 2539              	
 2540              	@ 0 "" 2
 2541              		.thumb
 2542              		.syntax unified
 2543              	.LBE194:
 2544              	.LBE193:
2085:FreeRTOS/Source/tasks.c ****     vPortEndScheduler();
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 155


 2545              		.loc 1 2085 5 view .LVU712
2085:FreeRTOS/Source/tasks.c ****     vPortEndScheduler();
 2546              		.loc 1 2085 23 is_stmt 0 view .LVU713
 2547 0012 034B     		ldr	r3, .L177
 2548 0014 0022     		movs	r2, #0
 2549 0016 1A60     		str	r2, [r3]
2086:FreeRTOS/Source/tasks.c **** }
 2550              		.loc 1 2086 5 is_stmt 1 view .LVU714
 2551 0018 FFF7FEFF 		bl	vPortEndScheduler
 2552              	.LVL189:
2087:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2553              		.loc 1 2087 1 is_stmt 0 view .LVU715
 2554 001c 08BD     		pop	{r3, pc}
 2555              	.L178:
 2556 001e 00BF     		.align	2
 2557              	.L177:
 2558 0020 00000000 		.word	xSchedulerRunning
 2559              		.cfi_endproc
 2560              	.LFE20:
 2562              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2563              		.align	1
 2564              		.global	vTaskSuspendAll
 2565              		.syntax unified
 2566              		.thumb
 2567              		.thumb_func
 2569              	vTaskSuspendAll:
 2570              	.LFB21:
2091:FreeRTOS/Source/tasks.c ****     /* A critical section is not required as the variable is of type
 2571              		.loc 1 2091 1 is_stmt 1 view -0
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 0
 2574              		@ frame_needed = 0, uses_anonymous_args = 0
 2575              		@ link register save eliminated.
2099:FreeRTOS/Source/tasks.c **** 
 2576              		.loc 1 2099 27 view .LVU717
2103:FreeRTOS/Source/tasks.c **** 
 2577              		.loc 1 2103 5 view .LVU718
 2578 0000 024A     		ldr	r2, .L180
 2579 0002 1368     		ldr	r3, [r2]
 2580 0004 0133     		adds	r3, r3, #1
 2581 0006 1360     		str	r3, [r2]
2107:FreeRTOS/Source/tasks.c **** }
 2582              		.loc 1 2107 5 view .LVU719
2108:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2583              		.loc 1 2108 1 is_stmt 0 view .LVU720
 2584 0008 7047     		bx	lr
 2585              	.L181:
 2586 000a 00BF     		.align	2
 2587              	.L180:
 2588 000c 00000000 		.word	uxSchedulerSuspended
 2589              		.cfi_endproc
 2590              	.LFE21:
 2592              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2593              		.align	1
 2594              		.global	xTaskGetTickCount
 2595              		.syntax unified
 2596              		.thumb
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 156


 2597              		.thumb_func
 2599              	xTaskGetTickCount:
 2600              	.LFB23:
2287:FreeRTOS/Source/tasks.c ****     TickType_t xTicks;
 2601              		.loc 1 2287 1 is_stmt 1 view -0
 2602              		.cfi_startproc
 2603              		@ args = 0, pretend = 0, frame = 0
 2604              		@ frame_needed = 0, uses_anonymous_args = 0
 2605              		@ link register save eliminated.
2288:FreeRTOS/Source/tasks.c **** 
 2606              		.loc 1 2288 5 view .LVU722
2291:FreeRTOS/Source/tasks.c ****     {
 2607              		.loc 1 2291 35 view .LVU723
2293:FreeRTOS/Source/tasks.c ****     }
 2608              		.loc 1 2293 9 view .LVU724
2293:FreeRTOS/Source/tasks.c ****     }
 2609              		.loc 1 2293 16 is_stmt 0 view .LVU725
 2610 0000 014B     		ldr	r3, .L183
 2611 0002 1868     		ldr	r0, [r3]
 2612              	.LVL190:
2295:FreeRTOS/Source/tasks.c **** 
 2613              		.loc 1 2295 34 is_stmt 1 view .LVU726
2297:FreeRTOS/Source/tasks.c **** }
 2614              		.loc 1 2297 5 view .LVU727
2298:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2615              		.loc 1 2298 1 is_stmt 0 view .LVU728
 2616 0004 7047     		bx	lr
 2617              	.L184:
 2618 0006 00BF     		.align	2
 2619              	.L183:
 2620 0008 00000000 		.word	xTickCount
 2621              		.cfi_endproc
 2622              	.LFE23:
 2624              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2625              		.align	1
 2626              		.global	xTaskGetTickCountFromISR
 2627              		.syntax unified
 2628              		.thumb
 2629              		.thumb_func
 2631              	xTaskGetTickCountFromISR:
 2632              	.LFB24:
2302:FreeRTOS/Source/tasks.c ****     TickType_t xReturn;
 2633              		.loc 1 2302 1 is_stmt 1 view -0
 2634              		.cfi_startproc
 2635              		@ args = 0, pretend = 0, frame = 0
 2636              		@ frame_needed = 0, uses_anonymous_args = 0
 2637 0000 08B5     		push	{r3, lr}
 2638              	.LCFI23:
 2639              		.cfi_def_cfa_offset 8
 2640              		.cfi_offset 3, -8
 2641              		.cfi_offset 14, -4
2303:FreeRTOS/Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2642              		.loc 1 2303 5 view .LVU730
2304:FreeRTOS/Source/tasks.c **** 
 2643              		.loc 1 2304 5 view .LVU731
2320:FreeRTOS/Source/tasks.c **** 
 2644              		.loc 1 2320 5 view .LVU732
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 157


 2645 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2646              	.LVL191:
2322:FreeRTOS/Source/tasks.c ****     {
 2647              		.loc 1 2322 5 view .LVU733
2324:FreeRTOS/Source/tasks.c ****     }
 2648              		.loc 1 2324 9 view .LVU734
2324:FreeRTOS/Source/tasks.c ****     }
 2649              		.loc 1 2324 17 is_stmt 0 view .LVU735
 2650 0006 014B     		ldr	r3, .L187
 2651 0008 1868     		ldr	r0, [r3]
 2652              	.LVL192:
2326:FreeRTOS/Source/tasks.c **** 
 2653              		.loc 1 2326 5 is_stmt 1 view .LVU736
2328:FreeRTOS/Source/tasks.c **** }
 2654              		.loc 1 2328 5 view .LVU737
2329:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2655              		.loc 1 2329 1 is_stmt 0 view .LVU738
 2656 000a 08BD     		pop	{r3, pc}
 2657              	.L188:
 2658              		.align	2
 2659              	.L187:
 2660 000c 00000000 		.word	xTickCount
 2661              		.cfi_endproc
 2662              	.LFE24:
 2664              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2665              		.align	1
 2666              		.global	uxTaskGetNumberOfTasks
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2671              	uxTaskGetNumberOfTasks:
 2672              	.LFB25:
2333:FreeRTOS/Source/tasks.c ****     /* A critical section is not required because the variables are of type
 2673              		.loc 1 2333 1 is_stmt 1 view -0
 2674              		.cfi_startproc
 2675              		@ args = 0, pretend = 0, frame = 0
 2676              		@ frame_needed = 0, uses_anonymous_args = 0
 2677              		@ link register save eliminated.
2336:FreeRTOS/Source/tasks.c **** }
 2678              		.loc 1 2336 5 view .LVU740
2336:FreeRTOS/Source/tasks.c **** }
 2679              		.loc 1 2336 12 is_stmt 0 view .LVU741
 2680 0000 014B     		ldr	r3, .L190
 2681 0002 1868     		ldr	r0, [r3]
2337:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2682              		.loc 1 2337 1 view .LVU742
 2683 0004 7047     		bx	lr
 2684              	.L191:
 2685 0006 00BF     		.align	2
 2686              	.L190:
 2687 0008 00000000 		.word	uxCurrentNumberOfTasks
 2688              		.cfi_endproc
 2689              	.LFE25:
 2691              		.section	.text.pcTaskGetName,"ax",%progbits
 2692              		.align	1
 2693              		.global	pcTaskGetName
 2694              		.syntax unified
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 158


 2695              		.thumb
 2696              		.thumb_func
 2698              	pcTaskGetName:
 2699              	.LVL193:
 2700              	.LFB26:
2341:FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
 2701              		.loc 1 2341 1 is_stmt 1 view -0
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 2705              		@ link register save eliminated.
2342:FreeRTOS/Source/tasks.c **** 
 2706              		.loc 1 2342 5 view .LVU744
2346:FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
 2707              		.loc 1 2346 5 view .LVU745
2346:FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
 2708              		.loc 1 2346 13 is_stmt 0 view .LVU746
 2709 0000 0346     		mov	r3, r0
 2710 0002 10B1     		cbz	r0, .L195
 2711              	.LVL194:
 2712              	.L193:
2347:FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2713              		.loc 1 2347 26 is_stmt 1 discriminator 2 view .LVU747
2348:FreeRTOS/Source/tasks.c **** }
 2714              		.loc 1 2348 5 discriminator 2 view .LVU748
2349:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2715              		.loc 1 2349 1 is_stmt 0 discriminator 2 view .LVU749
 2716 0004 03F13400 		add	r0, r3, #52
 2717 0008 7047     		bx	lr
 2718              	.LVL195:
 2719              	.L195:
2346:FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
 2720              		.loc 1 2346 13 discriminator 1 view .LVU750
 2721 000a 064B     		ldr	r3, .L196
 2722 000c 1B68     		ldr	r3, [r3]
 2723              	.LVL196:
2347:FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2724              		.loc 1 2347 5 is_stmt 1 discriminator 1 view .LVU751
 2725 000e 002B     		cmp	r3, #0
 2726 0010 F8D1     		bne	.L193
2347:FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2727              		.loc 1 2347 5 view .LVU752
 2728              	.LBB195:
 2729              	.LBI195:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2730              		.loc 2 194 34 view .LVU753
 2731              	.LBB196:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2732              		.loc 2 196 9 view .LVU754
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2733              		.loc 2 198 9 view .LVU755
 2734              		.syntax unified
 2735              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2736 0012 4FF05003 			mov r3, #80												
 2737 0016 83F31188 		msr basepri, r3											
 2738 001a BFF36F8F 		isb														
 2739 001e BFF34F8F 		dsb														
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 159


 2740              	
 2741              	@ 0 "" 2
 2742              	.LVL197:
 2743              		.thumb
 2744              		.syntax unified
 2745              	.L194:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2746              		.loc 2 198 9 is_stmt 0 view .LVU756
 2747              	.LBE196:
 2748              	.LBE195:
2347:FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2749              		.loc 1 2347 5 is_stmt 1 discriminator 1 view .LVU757
2347:FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2750              		.loc 1 2347 5 discriminator 1 view .LVU758
 2751 0022 FEE7     		b	.L194
 2752              	.L197:
 2753              		.align	2
 2754              	.L196:
 2755 0024 00000000 		.word	pxCurrentTCB
 2756              		.cfi_endproc
 2757              	.LFE26:
 2759              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2760              		.align	1
 2761              		.global	xTaskIncrementTick
 2762              		.syntax unified
 2763              		.thumb
 2764              		.thumb_func
 2766              	xTaskIncrementTick:
 2767              	.LFB29:
2721:FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
 2768              		.loc 1 2721 1 view -0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2773              	.LCFI24:
 2774              		.cfi_def_cfa_offset 24
 2775              		.cfi_offset 3, -24
 2776              		.cfi_offset 4, -20
 2777              		.cfi_offset 5, -16
 2778              		.cfi_offset 6, -12
 2779              		.cfi_offset 7, -8
 2780              		.cfi_offset 14, -4
2722:FreeRTOS/Source/tasks.c ****     TickType_t xItemValue;
 2781              		.loc 1 2722 5 view .LVU760
2723:FreeRTOS/Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2782              		.loc 1 2723 5 view .LVU761
2724:FreeRTOS/Source/tasks.c **** 
 2783              		.loc 1 2724 5 view .LVU762
 2784              	.LVL198:
2729:FreeRTOS/Source/tasks.c **** 
 2785              		.loc 1 2729 43 view .LVU763
2731:FreeRTOS/Source/tasks.c ****     {
 2786              		.loc 1 2731 5 view .LVU764
2731:FreeRTOS/Source/tasks.c ****     {
 2787              		.loc 1 2731 30 is_stmt 0 view .LVU765
 2788 0002 524B     		ldr	r3, .L222
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 160


 2789 0004 1B68     		ldr	r3, [r3]
2731:FreeRTOS/Source/tasks.c ****     {
 2790              		.loc 1 2731 7 view .LVU766
 2791 0006 002B     		cmp	r3, #0
 2792 0008 40F09980 		bne	.L199
 2793              	.LBB197:
2735:FreeRTOS/Source/tasks.c **** 
 2794              		.loc 1 2735 9 is_stmt 1 view .LVU767
2735:FreeRTOS/Source/tasks.c **** 
 2795              		.loc 1 2735 55 is_stmt 0 view .LVU768
 2796 000c 504B     		ldr	r3, .L222+4
 2797 000e 1C68     		ldr	r4, [r3]
2735:FreeRTOS/Source/tasks.c **** 
 2798              		.loc 1 2735 26 view .LVU769
 2799 0010 0134     		adds	r4, r4, #1
 2800              	.LVL199:
2739:FreeRTOS/Source/tasks.c **** 
 2801              		.loc 1 2739 9 is_stmt 1 view .LVU770
2739:FreeRTOS/Source/tasks.c **** 
 2802              		.loc 1 2739 20 is_stmt 0 view .LVU771
 2803 0012 1C60     		str	r4, [r3]
2741:FreeRTOS/Source/tasks.c ****         {
 2804              		.loc 1 2741 9 is_stmt 1 view .LVU772
2741:FreeRTOS/Source/tasks.c ****         {
 2805              		.loc 1 2741 11 is_stmt 0 view .LVU773
 2806 0014 C4B9     		cbnz	r4, .L200
 2807              	.LBB198:
2743:FreeRTOS/Source/tasks.c ****         }
 2808              		.loc 1 2743 13 is_stmt 1 view .LVU774
2743:FreeRTOS/Source/tasks.c ****         }
 2809              		.loc 1 2743 13 view .LVU775
 2810 0016 4F4B     		ldr	r3, .L222+8
 2811 0018 1B68     		ldr	r3, [r3]
 2812 001a 1B68     		ldr	r3, [r3]
 2813 001c 43B1     		cbz	r3, .L201
2743:FreeRTOS/Source/tasks.c ****         }
 2814              		.loc 1 2743 13 view .LVU776
 2815              	.LBB199:
 2816              	.LBI199:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2817              		.loc 2 194 34 view .LVU777
 2818              	.LBB200:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2819              		.loc 2 196 9 view .LVU778
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2820              		.loc 2 198 9 view .LVU779
 2821              		.syntax unified
 2822              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2823 001e 4FF05003 			mov r3, #80												
 2824 0022 83F31188 		msr basepri, r3											
 2825 0026 BFF36F8F 		isb														
 2826 002a BFF34F8F 		dsb														
 2827              	
 2828              	@ 0 "" 2
 2829              	.LVL200:
 2830              		.thumb
 2831              		.syntax unified
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 161


 2832              	.L202:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2833              		.loc 2 198 9 is_stmt 0 view .LVU780
 2834              	.LBE200:
 2835              	.LBE199:
2743:FreeRTOS/Source/tasks.c ****         }
 2836              		.loc 1 2743 13 is_stmt 1 discriminator 1 view .LVU781
2743:FreeRTOS/Source/tasks.c ****         }
 2837              		.loc 1 2743 13 discriminator 1 view .LVU782
 2838 002e FEE7     		b	.L202
 2839              	.L201:
2743:FreeRTOS/Source/tasks.c ****         }
 2840              		.loc 1 2743 13 discriminator 2 view .LVU783
2743:FreeRTOS/Source/tasks.c ****         }
 2841              		.loc 1 2743 13 discriminator 2 view .LVU784
 2842 0030 484A     		ldr	r2, .L222+8
 2843 0032 1168     		ldr	r1, [r2]
 2844              	.LVL201:
2743:FreeRTOS/Source/tasks.c ****         }
 2845              		.loc 1 2743 13 discriminator 2 view .LVU785
 2846 0034 484B     		ldr	r3, .L222+12
 2847 0036 1868     		ldr	r0, [r3]
 2848 0038 1060     		str	r0, [r2]
2743:FreeRTOS/Source/tasks.c ****         }
 2849              		.loc 1 2743 13 discriminator 2 view .LVU786
 2850 003a 1960     		str	r1, [r3]
2743:FreeRTOS/Source/tasks.c ****         }
 2851              		.loc 1 2743 13 discriminator 2 view .LVU787
 2852 003c 474A     		ldr	r2, .L222+16
 2853 003e 1368     		ldr	r3, [r2]
 2854 0040 0133     		adds	r3, r3, #1
 2855 0042 1360     		str	r3, [r2]
2743:FreeRTOS/Source/tasks.c ****         }
 2856              		.loc 1 2743 13 discriminator 2 view .LVU788
 2857 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2858              	.LVL202:
2743:FreeRTOS/Source/tasks.c ****         }
 2859              		.loc 1 2743 13 is_stmt 0 discriminator 2 view .LVU789
 2860              	.LBE198:
2743:FreeRTOS/Source/tasks.c ****         }
 2861              		.loc 1 2743 39 is_stmt 1 discriminator 2 view .LVU790
 2862              	.L200:
2747:FreeRTOS/Source/tasks.c ****         }
 2863              		.loc 1 2747 37 view .LVU791
2754:FreeRTOS/Source/tasks.c ****         {
 2864              		.loc 1 2754 9 view .LVU792
2754:FreeRTOS/Source/tasks.c ****         {
 2865              		.loc 1 2754 29 is_stmt 0 view .LVU793
 2866 0048 454B     		ldr	r3, .L222+20
 2867 004a 1B68     		ldr	r3, [r3]
2754:FreeRTOS/Source/tasks.c ****         {
 2868              		.loc 1 2754 11 view .LVU794
 2869 004c A342     		cmp	r3, r4
 2870 004e 11D9     		bls	.L214
 2871              	.LBE197:
2724:FreeRTOS/Source/tasks.c **** 
 2872              		.loc 1 2724 16 view .LVU795
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 162


 2873 0050 0020     		movs	r0, #0
 2874              	.LVL203:
 2875              	.L204:
 2876              	.LBB206:
2841:FreeRTOS/Source/tasks.c ****             {
 2877              		.loc 1 2841 13 is_stmt 1 view .LVU796
2841:FreeRTOS/Source/tasks.c ****             {
 2878              		.loc 1 2841 17 is_stmt 0 view .LVU797
 2879 0052 444B     		ldr	r3, .L222+24
 2880 0054 1B68     		ldr	r3, [r3]
 2881 0056 DB6A     		ldr	r3, [r3, #44]
 2882 0058 03EB8303 		add	r3, r3, r3, lsl #2
 2883 005c 9A00     		lsls	r2, r3, #2
 2884 005e 424B     		ldr	r3, .L222+28
 2885 0060 9B58     		ldr	r3, [r3, r2]
2841:FreeRTOS/Source/tasks.c ****             {
 2886              		.loc 1 2841 15 view .LVU798
 2887 0062 012B     		cmp	r3, #1
 2888 0064 00D9     		bls	.L212
2843:FreeRTOS/Source/tasks.c ****             }
 2889              		.loc 1 2843 33 view .LVU799
 2890 0066 0120     		movs	r0, #1
 2891              	.LVL204:
 2892              	.L212:
2847:FreeRTOS/Source/tasks.c ****             }
 2893              		.loc 1 2847 41 is_stmt 1 view .LVU800
2869:FreeRTOS/Source/tasks.c ****             {
 2894              		.loc 1 2869 13 view .LVU801
2869:FreeRTOS/Source/tasks.c ****             {
 2895              		.loc 1 2869 31 is_stmt 0 view .LVU802
 2896 0068 404B     		ldr	r3, .L222+32
 2897 006a 1B68     		ldr	r3, [r3]
2869:FreeRTOS/Source/tasks.c ****             {
 2898              		.loc 1 2869 15 view .LVU803
 2899 006c 002B     		cmp	r3, #0
 2900 006e 6BD0     		beq	.L198
2871:FreeRTOS/Source/tasks.c ****             }
 2901              		.loc 1 2871 33 view .LVU804
 2902 0070 0120     		movs	r0, #1
 2903              	.LVL205:
2871:FreeRTOS/Source/tasks.c ****             }
 2904              		.loc 1 2871 33 view .LVU805
 2905              	.LBE206:
2893:FreeRTOS/Source/tasks.c **** }
 2906              		.loc 1 2893 5 is_stmt 1 view .LVU806
2893:FreeRTOS/Source/tasks.c **** }
 2907              		.loc 1 2893 12 is_stmt 0 view .LVU807
 2908 0072 69E0     		b	.L198
 2909              	.LVL206:
 2910              	.L214:
2724:FreeRTOS/Source/tasks.c **** 
 2911              		.loc 1 2724 16 view .LVU808
 2912 0074 0020     		movs	r0, #0
 2913 0076 37E0     		b	.L203
 2914              	.LVL207:
 2915              	.L219:
 2916              	.LBB207:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 163


2765:FreeRTOS/Source/tasks.c ****                     break;
 2917              		.loc 1 2765 21 is_stmt 1 view .LVU809
2765:FreeRTOS/Source/tasks.c ****                     break;
 2918              		.loc 1 2765 42 is_stmt 0 view .LVU810
 2919 0078 394B     		ldr	r3, .L222+20
 2920 007a 4FF0FF32 		mov	r2, #-1
 2921 007e 1A60     		str	r2, [r3]
2766:FreeRTOS/Source/tasks.c ****                 }
 2922              		.loc 1 2766 21 is_stmt 1 view .LVU811
 2923 0080 E7E7     		b	.L204
 2924              	.LVL208:
 2925              	.L220:
2784:FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2926              		.loc 1 2784 25 view .LVU812
2784:FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2927              		.loc 1 2784 46 is_stmt 0 view .LVU813
 2928 0082 374B     		ldr	r3, .L222+20
 2929              	.LVL209:
2784:FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2930              		.loc 1 2784 46 view .LVU814
 2931 0084 1A60     		str	r2, [r3]
2785:FreeRTOS/Source/tasks.c ****                     }
 2932              		.loc 1 2785 25 is_stmt 1 view .LVU815
 2933 0086 E4E7     		b	.L204
 2934              	.LVL210:
 2935              	.L221:
 2936              	.LBB201:
2793:FreeRTOS/Source/tasks.c **** 
 2937              		.loc 1 2793 21 discriminator 1 view .LVU816
 2938 0088 D968     		ldr	r1, [r3, #12]
 2939 008a 5160     		str	r1, [r2, #4]
 2940 008c 42E0     		b	.L207
 2941              	.LVL211:
 2942              	.L209:
2793:FreeRTOS/Source/tasks.c **** 
 2943              		.loc 1 2793 21 is_stmt 0 discriminator 1 view .LVU817
 2944              	.LBE201:
 2945              	.LBB202:
2799:FreeRTOS/Source/tasks.c ****                     }
 2946              		.loc 1 2799 25 is_stmt 1 discriminator 3 view .LVU818
 2947 008e 0021     		movs	r1, #0
 2948 0090 9962     		str	r1, [r3, #40]
2799:FreeRTOS/Source/tasks.c ****                     }
 2949              		.loc 1 2799 25 discriminator 3 view .LVU819
 2950 0092 1168     		ldr	r1, [r2]
 2951 0094 0139     		subs	r1, r1, #1
 2952 0096 1160     		str	r1, [r2]
 2953              	.LBE202:
2799:FreeRTOS/Source/tasks.c ****                     }
 2954              		.loc 1 2799 70 discriminator 3 view .LVU820
 2955              	.LVL212:
 2956              	.L208:
2803:FreeRTOS/Source/tasks.c ****                     }
 2957              		.loc 1 2803 49 view .LVU821
2808:FreeRTOS/Source/tasks.c **** 
 2958              		.loc 1 2808 21 view .LVU822
2808:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 164


 2959              		.loc 1 2808 21 view .LVU823
 2960 0098 DA6A     		ldr	r2, [r3, #44]
 2961 009a 0121     		movs	r1, #1
 2962 009c 9140     		lsls	r1, r1, r2
 2963 009e 344E     		ldr	r6, .L222+36
 2964 00a0 3768     		ldr	r7, [r6]
 2965 00a2 3943     		orrs	r1, r1, r7
 2966 00a4 3160     		str	r1, [r6]
 2967              	.LBB203:
2808:FreeRTOS/Source/tasks.c **** 
 2968              		.loc 1 2808 21 view .LVU824
 2969 00a6 3049     		ldr	r1, .L222+28
 2970 00a8 02EB8202 		add	r2, r2, r2, lsl #2
 2971 00ac 4FEA820C 		lsl	ip, r2, #2
 2972 00b0 8C44     		add	ip, ip, r1
 2973 00b2 DCF80420 		ldr	r2, [ip, #4]
 2974              	.LVL213:
2808:FreeRTOS/Source/tasks.c **** 
 2975              		.loc 1 2808 21 view .LVU825
2808:FreeRTOS/Source/tasks.c **** 
 2976              		.loc 1 2808 21 view .LVU826
2808:FreeRTOS/Source/tasks.c **** 
 2977              		.loc 1 2808 21 view .LVU827
 2978 00b6 9A60     		str	r2, [r3, #8]
2808:FreeRTOS/Source/tasks.c **** 
 2979              		.loc 1 2808 21 view .LVU828
 2980 00b8 9668     		ldr	r6, [r2, #8]
 2981 00ba DE60     		str	r6, [r3, #12]
2808:FreeRTOS/Source/tasks.c **** 
 2982              		.loc 1 2808 21 view .LVU829
 2983 00bc 7560     		str	r5, [r6, #4]
2808:FreeRTOS/Source/tasks.c **** 
 2984              		.loc 1 2808 21 view .LVU830
 2985 00be 9560     		str	r5, [r2, #8]
2808:FreeRTOS/Source/tasks.c **** 
 2986              		.loc 1 2808 21 view .LVU831
 2987 00c0 DA6A     		ldr	r2, [r3, #44]
 2988              	.LVL214:
2808:FreeRTOS/Source/tasks.c **** 
 2989              		.loc 1 2808 21 is_stmt 0 view .LVU832
 2990 00c2 02EB820C 		add	ip, r2, r2, lsl #2
 2991 00c6 4FEA8C05 		lsl	r5, ip, #2
 2992 00ca 6E18     		adds	r6, r5, r1
 2993 00cc 5E61     		str	r6, [r3, #20]
2808:FreeRTOS/Source/tasks.c **** 
 2994              		.loc 1 2808 21 is_stmt 1 view .LVU833
 2995 00ce 4D59     		ldr	r5, [r1, r5]
 2996 00d0 0135     		adds	r5, r5, #1
 2997 00d2 4FEA8C0C 		lsl	ip, ip, #2
 2998 00d6 41F80C50 		str	r5, [r1, ip]
 2999              	.LBE203:
2808:FreeRTOS/Source/tasks.c **** 
 3000              		.loc 1 2808 21 view .LVU834
2808:FreeRTOS/Source/tasks.c **** 
 3001              		.loc 1 2808 51 view .LVU835
2822:FreeRTOS/Source/tasks.c ****                         {
 3002              		.loc 1 2822 25 view .LVU836
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 165


2822:FreeRTOS/Source/tasks.c ****                         {
 3003              		.loc 1 2822 34 is_stmt 0 view .LVU837
 3004 00da DA6A     		ldr	r2, [r3, #44]
2822:FreeRTOS/Source/tasks.c ****                         {
 3005              		.loc 1 2822 61 view .LVU838
 3006 00dc 214B     		ldr	r3, .L222+24
 3007              	.LVL215:
2822:FreeRTOS/Source/tasks.c ****                         {
 3008              		.loc 1 2822 61 view .LVU839
 3009 00de 1B68     		ldr	r3, [r3]
 3010 00e0 DB6A     		ldr	r3, [r3, #44]
2822:FreeRTOS/Source/tasks.c ****                         {
 3011              		.loc 1 2822 27 view .LVU840
 3012 00e2 9A42     		cmp	r2, r3
 3013 00e4 00D9     		bls	.L203
2824:FreeRTOS/Source/tasks.c ****                         }
 3014              		.loc 1 2824 45 view .LVU841
 3015 00e6 0120     		movs	r0, #1
 3016              	.LVL216:
 3017              	.L203:
2756:FreeRTOS/Source/tasks.c ****             {
 3018              		.loc 1 2756 13 is_stmt 1 view .LVU842
2758:FreeRTOS/Source/tasks.c ****                 {
 3019              		.loc 1 2758 17 view .LVU843
2758:FreeRTOS/Source/tasks.c ****                 {
 3020              		.loc 1 2758 21 is_stmt 0 view .LVU844
 3021 00e8 1A4B     		ldr	r3, .L222+8
 3022 00ea 1B68     		ldr	r3, [r3]
 3023 00ec 1B68     		ldr	r3, [r3]
2758:FreeRTOS/Source/tasks.c ****                 {
 3024              		.loc 1 2758 19 view .LVU845
 3025 00ee 002B     		cmp	r3, #0
 3026 00f0 C2D0     		beq	.L219
2774:FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3027              		.loc 1 2774 21 is_stmt 1 view .LVU846
2774:FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3028              		.loc 1 2774 29 is_stmt 0 view .LVU847
 3029 00f2 184B     		ldr	r3, .L222+8
 3030 00f4 1B68     		ldr	r3, [r3]
 3031 00f6 DB68     		ldr	r3, [r3, #12]
2774:FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3032              		.loc 1 2774 27 view .LVU848
 3033 00f8 DB68     		ldr	r3, [r3, #12]
 3034              	.LVL217:
2775:FreeRTOS/Source/tasks.c **** 
 3035              		.loc 1 2775 21 is_stmt 1 view .LVU849
2775:FreeRTOS/Source/tasks.c **** 
 3036              		.loc 1 2775 32 is_stmt 0 view .LVU850
 3037 00fa 5A68     		ldr	r2, [r3, #4]
 3038              	.LVL218:
2777:FreeRTOS/Source/tasks.c ****                     {
 3039              		.loc 1 2777 21 is_stmt 1 view .LVU851
2777:FreeRTOS/Source/tasks.c ****                     {
 3040              		.loc 1 2777 23 is_stmt 0 view .LVU852
 3041 00fc 9442     		cmp	r4, r2
 3042 00fe C0D3     		bcc	.L220
2789:FreeRTOS/Source/tasks.c ****                     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 166


 3043              		.loc 1 2789 49 is_stmt 1 view .LVU853
 3044              	.LBB204:
2793:FreeRTOS/Source/tasks.c **** 
 3045              		.loc 1 2793 21 view .LVU854
 3046 0100 5A69     		ldr	r2, [r3, #20]
 3047              	.LVL219:
2793:FreeRTOS/Source/tasks.c **** 
 3048              		.loc 1 2793 21 view .LVU855
 3049 0102 9D68     		ldr	r5, [r3, #8]
 3050 0104 D968     		ldr	r1, [r3, #12]
 3051 0106 A960     		str	r1, [r5, #8]
 3052              	.LVL220:
2793:FreeRTOS/Source/tasks.c **** 
 3053              		.loc 1 2793 21 view .LVU856
 3054 0108 9D68     		ldr	r5, [r3, #8]
 3055 010a 4D60     		str	r5, [r1, #4]
2793:FreeRTOS/Source/tasks.c **** 
 3056              		.loc 1 2793 21 view .LVU857
 3057 010c 5168     		ldr	r1, [r2, #4]
 3058 010e 1D1D     		adds	r5, r3, #4
 3059 0110 A942     		cmp	r1, r5
 3060 0112 B9D0     		beq	.L221
 3061              	.L207:
2793:FreeRTOS/Source/tasks.c **** 
 3062              		.loc 1 2793 21 discriminator 3 view .LVU858
 3063 0114 0021     		movs	r1, #0
 3064 0116 5961     		str	r1, [r3, #20]
2793:FreeRTOS/Source/tasks.c **** 
 3065              		.loc 1 2793 21 discriminator 3 view .LVU859
 3066 0118 1168     		ldr	r1, [r2]
 3067 011a 0139     		subs	r1, r1, #1
 3068 011c 1160     		str	r1, [r2]
 3069              	.LBE204:
2793:FreeRTOS/Source/tasks.c **** 
 3070              		.loc 1 2793 66 discriminator 3 view .LVU860
2797:FreeRTOS/Source/tasks.c ****                     {
 3071              		.loc 1 2797 21 discriminator 3 view .LVU861
2797:FreeRTOS/Source/tasks.c ****                     {
 3072              		.loc 1 2797 25 is_stmt 0 discriminator 3 view .LVU862
 3073 011e 9A6A     		ldr	r2, [r3, #40]
 3074              	.LVL221:
2797:FreeRTOS/Source/tasks.c ****                     {
 3075              		.loc 1 2797 23 discriminator 3 view .LVU863
 3076 0120 002A     		cmp	r2, #0
 3077 0122 B9D0     		beq	.L208
 3078              	.LBB205:
2799:FreeRTOS/Source/tasks.c ****                     }
 3079              		.loc 1 2799 25 is_stmt 1 view .LVU864
 3080              	.LVL222:
2799:FreeRTOS/Source/tasks.c ****                     }
 3081              		.loc 1 2799 25 view .LVU865
 3082 0124 DE69     		ldr	r6, [r3, #28]
 3083 0126 196A     		ldr	r1, [r3, #32]
 3084 0128 B160     		str	r1, [r6, #8]
2799:FreeRTOS/Source/tasks.c ****                     }
 3085              		.loc 1 2799 25 view .LVU866
 3086 012a DE69     		ldr	r6, [r3, #28]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 167


 3087 012c 4E60     		str	r6, [r1, #4]
2799:FreeRTOS/Source/tasks.c ****                     }
 3088              		.loc 1 2799 25 view .LVU867
 3089 012e 5668     		ldr	r6, [r2, #4]
 3090 0130 03F11801 		add	r1, r3, #24
 3091 0134 8E42     		cmp	r6, r1
 3092 0136 AAD1     		bne	.L209
2799:FreeRTOS/Source/tasks.c ****                     }
 3093              		.loc 1 2799 25 discriminator 1 view .LVU868
 3094 0138 196A     		ldr	r1, [r3, #32]
 3095 013a 5160     		str	r1, [r2, #4]
 3096 013c A7E7     		b	.L209
 3097              	.LVL223:
 3098              	.L199:
2799:FreeRTOS/Source/tasks.c ****                     }
 3099              		.loc 1 2799 25 is_stmt 0 discriminator 1 view .LVU869
 3100              	.LBE205:
 3101              	.LBE207:
2882:FreeRTOS/Source/tasks.c **** 
 3102              		.loc 1 2882 9 is_stmt 1 view .LVU870
 3103 013e 0D4A     		ldr	r2, .L222+40
 3104 0140 1368     		ldr	r3, [r2]
 3105 0142 0133     		adds	r3, r3, #1
 3106 0144 1360     		str	r3, [r2]
2724:FreeRTOS/Source/tasks.c **** 
 3107              		.loc 1 2724 16 is_stmt 0 view .LVU871
 3108 0146 0020     		movs	r0, #0
 3109              	.LVL224:
 3110              	.L198:
2894:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3111              		.loc 1 2894 1 view .LVU872
 3112 0148 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3113              	.L223:
 3114 014a 00BF     		.align	2
 3115              	.L222:
 3116 014c 00000000 		.word	uxSchedulerSuspended
 3117 0150 00000000 		.word	xTickCount
 3118 0154 00000000 		.word	pxDelayedTaskList
 3119 0158 00000000 		.word	pxOverflowDelayedTaskList
 3120 015c 00000000 		.word	xNumOfOverflows
 3121 0160 00000000 		.word	xNextTaskUnblockTime
 3122 0164 00000000 		.word	pxCurrentTCB
 3123 0168 00000000 		.word	pxReadyTasksLists
 3124 016c 00000000 		.word	xYieldPending
 3125 0170 00000000 		.word	uxTopReadyPriority
 3126 0174 00000000 		.word	xPendedTicks
 3127              		.cfi_endproc
 3128              	.LFE29:
 3130              		.section	.text.xTaskResumeAll,"ax",%progbits
 3131              		.align	1
 3132              		.global	xTaskResumeAll
 3133              		.syntax unified
 3134              		.thumb
 3135              		.thumb_func
 3137              	xTaskResumeAll:
 3138              	.LFB22:
2175:FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB = NULL;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 168


 3139              		.loc 1 2175 1 is_stmt 1 view -0
 3140              		.cfi_startproc
 3141              		@ args = 0, pretend = 0, frame = 0
 3142              		@ frame_needed = 0, uses_anonymous_args = 0
 3143 0000 38B5     		push	{r3, r4, r5, lr}
 3144              	.LCFI25:
 3145              		.cfi_def_cfa_offset 16
 3146              		.cfi_offset 3, -16
 3147              		.cfi_offset 4, -12
 3148              		.cfi_offset 5, -8
 3149              		.cfi_offset 14, -4
2176:FreeRTOS/Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3150              		.loc 1 2176 5 view .LVU874
 3151              	.LVL225:
2177:FreeRTOS/Source/tasks.c **** 
 3152              		.loc 1 2177 5 view .LVU875
2181:FreeRTOS/Source/tasks.c **** 
 3153              		.loc 1 2181 5 view .LVU876
 3154 0002 4A4B     		ldr	r3, .L244
 3155 0004 1B68     		ldr	r3, [r3]
 3156 0006 43B9     		cbnz	r3, .L225
2181:FreeRTOS/Source/tasks.c **** 
 3157              		.loc 1 2181 5 view .LVU877
 3158              	.LBB208:
 3159              	.LBI208:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3160              		.loc 2 194 34 view .LVU878
 3161              	.LBB209:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3162              		.loc 2 196 9 view .LVU879
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3163              		.loc 2 198 9 view .LVU880
 3164              		.syntax unified
 3165              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3166 0008 4FF05003 			mov r3, #80												
 3167 000c 83F31188 		msr basepri, r3											
 3168 0010 BFF36F8F 		isb														
 3169 0014 BFF34F8F 		dsb														
 3170              	
 3171              	@ 0 "" 2
 3172              	.LVL226:
 3173              		.thumb
 3174              		.syntax unified
 3175              	.L226:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3176              		.loc 2 198 9 is_stmt 0 view .LVU881
 3177              	.LBE209:
 3178              	.LBE208:
2181:FreeRTOS/Source/tasks.c **** 
 3179              		.loc 1 2181 5 is_stmt 1 discriminator 1 view .LVU882
2181:FreeRTOS/Source/tasks.c **** 
 3180              		.loc 1 2181 5 discriminator 1 view .LVU883
 3181 0018 FEE7     		b	.L226
 3182              	.L225:
2181:FreeRTOS/Source/tasks.c **** 
 3183              		.loc 1 2181 41 discriminator 2 view .LVU884
2188:FreeRTOS/Source/tasks.c ****     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 169


 3184              		.loc 1 2188 5 discriminator 2 view .LVU885
 3185 001a FFF7FEFF 		bl	vPortEnterCritical
 3186              	.LVL227:
2190:FreeRTOS/Source/tasks.c **** 
 3187              		.loc 1 2190 9 discriminator 2 view .LVU886
 3188 001e 434B     		ldr	r3, .L244
 3189 0020 1A68     		ldr	r2, [r3]
 3190 0022 013A     		subs	r2, r2, #1
 3191 0024 1A60     		str	r2, [r3]
2192:FreeRTOS/Source/tasks.c ****         {
 3192              		.loc 1 2192 9 discriminator 2 view .LVU887
2192:FreeRTOS/Source/tasks.c ****         {
 3193              		.loc 1 2192 34 is_stmt 0 discriminator 2 view .LVU888
 3194 0026 1B68     		ldr	r3, [r3]
2192:FreeRTOS/Source/tasks.c ****         {
 3195              		.loc 1 2192 11 discriminator 2 view .LVU889
 3196 0028 002B     		cmp	r3, #0
 3197 002a 7AD1     		bne	.L237
2194:FreeRTOS/Source/tasks.c ****             {
 3198              		.loc 1 2194 13 is_stmt 1 view .LVU890
2194:FreeRTOS/Source/tasks.c ****             {
 3199              		.loc 1 2194 40 is_stmt 0 view .LVU891
 3200 002c 404B     		ldr	r3, .L244+4
 3201 002e 1B68     		ldr	r3, [r3]
2194:FreeRTOS/Source/tasks.c ****             {
 3202              		.loc 1 2194 15 view .LVU892
 3203 0030 3BB9     		cbnz	r3, .L238
2177:FreeRTOS/Source/tasks.c **** 
 3204              		.loc 1 2177 16 view .LVU893
 3205 0032 0024     		movs	r4, #0
 3206 0034 76E0     		b	.L227
 3207              	.LVL228:
 3208              	.L241:
 3209              	.LBB210:
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3210              		.loc 1 2201 21 is_stmt 1 discriminator 1 view .LVU894
 3211 0036 196A     		ldr	r1, [r3, #32]
 3212 0038 5160     		str	r1, [r2, #4]
 3213 003a 15E0     		b	.L229
 3214              	.LVL229:
 3215              	.L242:
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3216              		.loc 1 2201 21 is_stmt 0 discriminator 1 view .LVU895
 3217              	.LBE210:
 3218              	.LBB211:
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3219              		.loc 1 2203 21 is_stmt 1 discriminator 1 view .LVU896
 3220 003c D968     		ldr	r1, [r3, #12]
 3221 003e 5160     		str	r1, [r2, #4]
 3222 0040 21E0     		b	.L230
 3223              	.LVL230:
 3224              	.L238:
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3225              		.loc 1 2203 21 is_stmt 0 discriminator 1 view .LVU897
 3226              	.LBE211:
2176:FreeRTOS/Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 3227              		.loc 1 2176 13 view .LVU898
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 170


 3228 0042 0023     		movs	r3, #0
 3229              	.LVL231:
 3230              	.L228:
2214:FreeRTOS/Source/tasks.c ****                     }
 3231              		.loc 1 2214 49 is_stmt 1 view .LVU899
2198:FreeRTOS/Source/tasks.c ****                 {
 3232              		.loc 1 2198 64 view .LVU900
2198:FreeRTOS/Source/tasks.c ****                 {
 3233              		.loc 1 2198 24 is_stmt 0 view .LVU901
 3234 0044 3B4A     		ldr	r2, .L244+8
 3235 0046 1268     		ldr	r2, [r2]
2198:FreeRTOS/Source/tasks.c ****                 {
 3236              		.loc 1 2198 64 view .LVU902
 3237 0048 002A     		cmp	r2, #0
 3238 004a 47D0     		beq	.L240
2200:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3239              		.loc 1 2200 21 is_stmt 1 view .LVU903
2200:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3240              		.loc 1 2200 29 is_stmt 0 view .LVU904
 3241 004c 394B     		ldr	r3, .L244+8
 3242              	.LVL232:
2200:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3243              		.loc 1 2200 29 view .LVU905
 3244 004e DB68     		ldr	r3, [r3, #12]
2200:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3245              		.loc 1 2200 27 view .LVU906
 3246 0050 DB68     		ldr	r3, [r3, #12]
 3247              	.LVL233:
 3248              	.LBB212:
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3249              		.loc 1 2201 21 is_stmt 1 view .LVU907
 3250 0052 9A6A     		ldr	r2, [r3, #40]
 3251              	.LVL234:
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3252              		.loc 1 2201 21 view .LVU908
 3253 0054 D869     		ldr	r0, [r3, #28]
 3254 0056 196A     		ldr	r1, [r3, #32]
 3255 0058 8160     		str	r1, [r0, #8]
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3256              		.loc 1 2201 21 view .LVU909
 3257 005a D869     		ldr	r0, [r3, #28]
 3258 005c 4860     		str	r0, [r1, #4]
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3259              		.loc 1 2201 21 view .LVU910
 3260 005e 5068     		ldr	r0, [r2, #4]
 3261 0060 03F11801 		add	r1, r3, #24
 3262 0064 8842     		cmp	r0, r1
 3263 0066 E6D0     		beq	.L241
 3264              	.L229:
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3265              		.loc 1 2201 21 discriminator 3 view .LVU911
 3266 0068 0021     		movs	r1, #0
 3267 006a 9962     		str	r1, [r3, #40]
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3268              		.loc 1 2201 21 discriminator 3 view .LVU912
 3269 006c 1168     		ldr	r1, [r2]
 3270 006e 0139     		subs	r1, r1, #1
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 171


 3271 0070 1160     		str	r1, [r2]
 3272              	.LBE212:
2201:FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 3273              		.loc 1 2201 66 discriminator 3 view .LVU913
2202:FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 3274              		.loc 1 2202 21 discriminator 3 view .LVU914
 3275              	.LBB213:
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3276              		.loc 1 2203 21 discriminator 3 view .LVU915
 3277 0072 5A69     		ldr	r2, [r3, #20]
 3278              	.LVL235:
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3279              		.loc 1 2203 21 discriminator 3 view .LVU916
 3280 0074 9868     		ldr	r0, [r3, #8]
 3281 0076 D968     		ldr	r1, [r3, #12]
 3282 0078 8160     		str	r1, [r0, #8]
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3283              		.loc 1 2203 21 discriminator 3 view .LVU917
 3284 007a 9868     		ldr	r0, [r3, #8]
 3285 007c 4860     		str	r0, [r1, #4]
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3286              		.loc 1 2203 21 discriminator 3 view .LVU918
 3287 007e 5168     		ldr	r1, [r2, #4]
 3288 0080 181D     		adds	r0, r3, #4
 3289 0082 8142     		cmp	r1, r0
 3290 0084 DAD0     		beq	.L242
 3291              	.L230:
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3292              		.loc 1 2203 21 discriminator 3 view .LVU919
 3293 0086 0021     		movs	r1, #0
 3294 0088 5961     		str	r1, [r3, #20]
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3295              		.loc 1 2203 21 discriminator 3 view .LVU920
 3296 008a 1168     		ldr	r1, [r2]
 3297 008c 0139     		subs	r1, r1, #1
 3298 008e 1160     		str	r1, [r2]
 3299              	.LBE213:
2203:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3300              		.loc 1 2203 66 discriminator 3 view .LVU921
2204:FreeRTOS/Source/tasks.c **** 
 3301              		.loc 1 2204 21 discriminator 3 view .LVU922
2204:FreeRTOS/Source/tasks.c **** 
 3302              		.loc 1 2204 21 discriminator 3 view .LVU923
 3303 0090 DA6A     		ldr	r2, [r3, #44]
 3304              	.LVL236:
2204:FreeRTOS/Source/tasks.c **** 
 3305              		.loc 1 2204 21 is_stmt 0 discriminator 3 view .LVU924
 3306 0092 0121     		movs	r1, #1
 3307 0094 9140     		lsls	r1, r1, r2
 3308 0096 284C     		ldr	r4, .L244+12
 3309 0098 2568     		ldr	r5, [r4]
 3310 009a 2943     		orrs	r1, r1, r5
 3311 009c 2160     		str	r1, [r4]
 3312              	.LBB214:
2204:FreeRTOS/Source/tasks.c **** 
 3313              		.loc 1 2204 21 is_stmt 1 discriminator 3 view .LVU925
 3314 009e 2749     		ldr	r1, .L244+16
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 172


 3315 00a0 02EB8202 		add	r2, r2, r2, lsl #2
 3316 00a4 01EB8202 		add	r2, r1, r2, lsl #2
 3317 00a8 5268     		ldr	r2, [r2, #4]
 3318              	.LVL237:
2204:FreeRTOS/Source/tasks.c **** 
 3319              		.loc 1 2204 21 discriminator 3 view .LVU926
2204:FreeRTOS/Source/tasks.c **** 
 3320              		.loc 1 2204 21 discriminator 3 view .LVU927
2204:FreeRTOS/Source/tasks.c **** 
 3321              		.loc 1 2204 21 discriminator 3 view .LVU928
 3322 00aa 9A60     		str	r2, [r3, #8]
2204:FreeRTOS/Source/tasks.c **** 
 3323              		.loc 1 2204 21 discriminator 3 view .LVU929
 3324 00ac 9468     		ldr	r4, [r2, #8]
 3325 00ae DC60     		str	r4, [r3, #12]
2204:FreeRTOS/Source/tasks.c **** 
 3326              		.loc 1 2204 21 discriminator 3 view .LVU930
 3327 00b0 6060     		str	r0, [r4, #4]
2204:FreeRTOS/Source/tasks.c **** 
 3328              		.loc 1 2204 21 discriminator 3 view .LVU931
 3329 00b2 9060     		str	r0, [r2, #8]
2204:FreeRTOS/Source/tasks.c **** 
 3330              		.loc 1 2204 21 discriminator 3 view .LVU932
 3331 00b4 DA6A     		ldr	r2, [r3, #44]
 3332              	.LVL238:
2204:FreeRTOS/Source/tasks.c **** 
 3333              		.loc 1 2204 21 is_stmt 0 discriminator 3 view .LVU933
 3334 00b6 02EB8200 		add	r0, r2, r2, lsl #2
 3335 00ba 8400     		lsls	r4, r0, #2
 3336 00bc 01EB8000 		add	r0, r1, r0, lsl #2
 3337 00c0 5861     		str	r0, [r3, #20]
2204:FreeRTOS/Source/tasks.c **** 
 3338              		.loc 1 2204 21 is_stmt 1 discriminator 3 view .LVU934
 3339 00c2 0859     		ldr	r0, [r1, r4]
 3340 00c4 0130     		adds	r0, r0, #1
 3341 00c6 0851     		str	r0, [r1, r4]
 3342              	.LBE214:
2204:FreeRTOS/Source/tasks.c **** 
 3343              		.loc 1 2204 21 discriminator 3 view .LVU935
2204:FreeRTOS/Source/tasks.c **** 
 3344              		.loc 1 2204 51 discriminator 3 view .LVU936
2208:FreeRTOS/Source/tasks.c ****                     {
 3345              		.loc 1 2208 21 discriminator 3 view .LVU937
2208:FreeRTOS/Source/tasks.c ****                     {
 3346              		.loc 1 2208 30 is_stmt 0 discriminator 3 view .LVU938
 3347 00c8 D96A     		ldr	r1, [r3, #44]
2208:FreeRTOS/Source/tasks.c ****                     {
 3348              		.loc 1 2208 58 discriminator 3 view .LVU939
 3349 00ca 1D4A     		ldr	r2, .L244+20
 3350 00cc 1268     		ldr	r2, [r2]
 3351 00ce D26A     		ldr	r2, [r2, #44]
2208:FreeRTOS/Source/tasks.c ****                     {
 3352              		.loc 1 2208 23 discriminator 3 view .LVU940
 3353 00d0 9142     		cmp	r1, r2
 3354 00d2 B7D3     		bcc	.L228
2210:FreeRTOS/Source/tasks.c ****                     }
 3355              		.loc 1 2210 25 is_stmt 1 view .LVU941
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 173


2210:FreeRTOS/Source/tasks.c ****                     }
 3356              		.loc 1 2210 39 is_stmt 0 view .LVU942
 3357 00d4 1B4A     		ldr	r2, .L244+24
 3358 00d6 0121     		movs	r1, #1
 3359 00d8 1160     		str	r1, [r2]
 3360 00da B3E7     		b	.L228
 3361              	.LVL239:
 3362              	.L240:
2218:FreeRTOS/Source/tasks.c ****                 {
 3363              		.loc 1 2218 17 is_stmt 1 view .LVU943
2218:FreeRTOS/Source/tasks.c ****                 {
 3364              		.loc 1 2218 19 is_stmt 0 view .LVU944
 3365 00dc 0BB1     		cbz	r3, .L233
2226:FreeRTOS/Source/tasks.c ****                 }
 3366              		.loc 1 2226 21 is_stmt 1 view .LVU945
 3367 00de FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3368              	.LVL240:
 3369              	.L233:
 3370              	.LBB215:
2234:FreeRTOS/Source/tasks.c **** 
 3371              		.loc 1 2234 21 view .LVU946
2234:FreeRTOS/Source/tasks.c **** 
 3372              		.loc 1 2234 32 is_stmt 0 view .LVU947
 3373 00e2 194B     		ldr	r3, .L244+28
 3374 00e4 1C68     		ldr	r4, [r3]
 3375              	.LVL241:
2236:FreeRTOS/Source/tasks.c ****                     {
 3376              		.loc 1 2236 21 is_stmt 1 view .LVU948
2236:FreeRTOS/Source/tasks.c ****                     {
 3377              		.loc 1 2236 23 is_stmt 0 view .LVU949
 3378 00e6 84B9     		cbnz	r4, .L236
 3379              	.L234:
2256:FreeRTOS/Source/tasks.c ****                     }
 3380              		.loc 1 2256 49 is_stmt 1 view .LVU950
 3381              	.LBE215:
2260:FreeRTOS/Source/tasks.c ****                 {
 3382              		.loc 1 2260 17 view .LVU951
2260:FreeRTOS/Source/tasks.c ****                 {
 3383              		.loc 1 2260 35 is_stmt 0 view .LVU952
 3384 00e8 164B     		ldr	r3, .L244+24
 3385 00ea 1C68     		ldr	r4, [r3]
 3386              	.LVL242:
2260:FreeRTOS/Source/tasks.c ****                 {
 3387              		.loc 1 2260 19 view .LVU953
 3388 00ec D4B1     		cbz	r4, .L227
2264:FreeRTOS/Source/tasks.c ****                     }
 3389              		.loc 1 2264 25 is_stmt 1 view .LVU954
 3390              	.LVL243:
2267:FreeRTOS/Source/tasks.c ****                 }
 3391              		.loc 1 2267 21 view .LVU955
 3392 00ee 4FF0E023 		mov	r3, #-536813568
 3393 00f2 4FF08052 		mov	r2, #268435456
 3394 00f6 C3F8042D 		str	r2, [r3, #3332]
2267:FreeRTOS/Source/tasks.c ****                 }
 3395              		.loc 1 2267 21 view .LVU956
 3396              		.syntax unified
 3397              	@ 2267 "FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 174


 3398 00fa BFF34F8F 		dsb
 3399              	@ 0 "" 2
2267:FreeRTOS/Source/tasks.c ****                 }
 3400              		.loc 1 2267 21 view .LVU957
 3401              	@ 2267 "FreeRTOS/Source/tasks.c" 1
 3402 00fe BFF36F8F 		isb
 3403              	@ 0 "" 2
2267:FreeRTOS/Source/tasks.c ****                 }
 3404              		.loc 1 2267 52 view .LVU958
2264:FreeRTOS/Source/tasks.c ****                     }
 3405              		.loc 1 2264 41 is_stmt 0 view .LVU959
 3406              		.thumb
 3407              		.syntax unified
 3408 0102 0124     		movs	r4, #1
 3409 0104 0EE0     		b	.L227
 3410              	.LVL244:
 3411              	.L235:
 3412              	.LBB216:
2246:FreeRTOS/Source/tasks.c ****                             }
 3413              		.loc 1 2246 57 is_stmt 1 view .LVU960
2249:FreeRTOS/Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 3414              		.loc 1 2249 29 view .LVU961
2250:FreeRTOS/Source/tasks.c **** 
 3415              		.loc 1 2250 48 view .LVU962
 3416 0106 013C     		subs	r4, r4, #1
 3417              	.LVL245:
2250:FreeRTOS/Source/tasks.c **** 
 3418              		.loc 1 2250 48 is_stmt 0 view .LVU963
 3419 0108 07D0     		beq	.L243
 3420              	.L236:
2238:FreeRTOS/Source/tasks.c ****                         {
 3421              		.loc 1 2238 25 is_stmt 1 view .LVU964
2240:FreeRTOS/Source/tasks.c ****                             {
 3422              		.loc 1 2240 29 view .LVU965
2240:FreeRTOS/Source/tasks.c ****                             {
 3423              		.loc 1 2240 33 is_stmt 0 view .LVU966
 3424 010a FFF7FEFF 		bl	xTaskIncrementTick
 3425              	.LVL246:
2240:FreeRTOS/Source/tasks.c ****                             {
 3426              		.loc 1 2240 31 view .LVU967
 3427 010e 0028     		cmp	r0, #0
 3428 0110 F9D0     		beq	.L235
2242:FreeRTOS/Source/tasks.c ****                             }
 3429              		.loc 1 2242 33 is_stmt 1 view .LVU968
2242:FreeRTOS/Source/tasks.c ****                             }
 3430              		.loc 1 2242 47 is_stmt 0 view .LVU969
 3431 0112 0C4B     		ldr	r3, .L244+24
 3432 0114 0122     		movs	r2, #1
 3433 0116 1A60     		str	r2, [r3]
 3434 0118 F5E7     		b	.L235
 3435              	.L243:
2252:FreeRTOS/Source/tasks.c ****                     }
 3436              		.loc 1 2252 25 is_stmt 1 view .LVU970
2252:FreeRTOS/Source/tasks.c ****                     }
 3437              		.loc 1 2252 38 is_stmt 0 view .LVU971
 3438 011a 0B4B     		ldr	r3, .L244+28
 3439 011c 0022     		movs	r2, #0
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 175


 3440 011e 1A60     		str	r2, [r3]
 3441 0120 E2E7     		b	.L234
 3442              	.LVL247:
 3443              	.L237:
2252:FreeRTOS/Source/tasks.c ****                     }
 3444              		.loc 1 2252 38 view .LVU972
 3445              	.LBE216:
2177:FreeRTOS/Source/tasks.c **** 
 3446              		.loc 1 2177 16 view .LVU973
 3447 0122 0024     		movs	r4, #0
 3448              	.LVL248:
 3449              	.L227:
2277:FreeRTOS/Source/tasks.c ****         }
 3450              		.loc 1 2277 37 is_stmt 1 view .LVU974
2280:FreeRTOS/Source/tasks.c **** 
 3451              		.loc 1 2280 5 view .LVU975
 3452 0124 FFF7FEFF 		bl	vPortExitCritical
 3453              	.LVL249:
2282:FreeRTOS/Source/tasks.c **** }
 3454              		.loc 1 2282 5 view .LVU976
2283:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3455              		.loc 1 2283 1 is_stmt 0 view .LVU977
 3456 0128 2046     		mov	r0, r4
 3457 012a 38BD     		pop	{r3, r4, r5, pc}
 3458              	.LVL250:
 3459              	.L245:
2283:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3460              		.loc 1 2283 1 view .LVU978
 3461              		.align	2
 3462              	.L244:
 3463 012c 00000000 		.word	uxSchedulerSuspended
 3464 0130 00000000 		.word	uxCurrentNumberOfTasks
 3465 0134 00000000 		.word	xPendingReadyList
 3466 0138 00000000 		.word	uxTopReadyPriority
 3467 013c 00000000 		.word	pxReadyTasksLists
 3468 0140 00000000 		.word	pxCurrentTCB
 3469 0144 00000000 		.word	xYieldPending
 3470 0148 00000000 		.word	xPendedTicks
 3471              		.cfi_endproc
 3472              	.LFE22:
 3474              		.section	.text.xTaskDelayUntil,"ax",%progbits
 3475              		.align	1
 3476              		.global	xTaskDelayUntil
 3477              		.syntax unified
 3478              		.thumb
 3479              		.thumb_func
 3481              	xTaskDelayUntil:
 3482              	.LVL251:
 3483              	.LFB9:
1216:FreeRTOS/Source/tasks.c ****         TickType_t xTimeToWake;
 3484              		.loc 1 1216 5 is_stmt 1 view -0
 3485              		.cfi_startproc
 3486              		@ args = 0, pretend = 0, frame = 0
 3487              		@ frame_needed = 0, uses_anonymous_args = 0
1216:FreeRTOS/Source/tasks.c ****         TickType_t xTimeToWake;
 3488              		.loc 1 1216 5 is_stmt 0 view .LVU980
 3489 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 176


 3490              	.LCFI26:
 3491              		.cfi_def_cfa_offset 16
 3492              		.cfi_offset 3, -16
 3493              		.cfi_offset 4, -12
 3494              		.cfi_offset 5, -8
 3495              		.cfi_offset 14, -4
1217:FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3496              		.loc 1 1217 9 is_stmt 1 view .LVU981
1218:FreeRTOS/Source/tasks.c **** 
 3497              		.loc 1 1218 9 view .LVU982
 3498              	.LVL252:
1220:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3499              		.loc 1 1220 9 view .LVU983
 3500 0002 58B1     		cbz	r0, .L262
 3501 0004 0C46     		mov	r4, r1
 3502 0006 0546     		mov	r5, r0
1220:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3503              		.loc 1 1220 43 discriminator 2 view .LVU984
1221:FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3504              		.loc 1 1221 9 discriminator 2 view .LVU985
 3505 0008 89B9     		cbnz	r1, .L249
1221:FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3506              		.loc 1 1221 9 view .LVU986
 3507              	.LBB217:
 3508              	.LBI217:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3509              		.loc 2 194 34 view .LVU987
 3510              	.LBB218:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3511              		.loc 2 196 9 view .LVU988
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3512              		.loc 2 198 9 view .LVU989
 3513              		.syntax unified
 3514              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3515 000a 4FF05003 			mov r3, #80												
 3516 000e 83F31188 		msr basepri, r3											
 3517 0012 BFF36F8F 		isb														
 3518 0016 BFF34F8F 		dsb														
 3519              	
 3520              	@ 0 "" 2
 3521              	.LVL253:
 3522              		.thumb
 3523              		.syntax unified
 3524              	.L250:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3525              		.loc 2 198 9 is_stmt 0 view .LVU990
 3526              	.LBE218:
 3527              	.LBE217:
1221:FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3528              		.loc 1 1221 9 is_stmt 1 discriminator 2 view .LVU991
1221:FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3529              		.loc 1 1221 9 discriminator 2 view .LVU992
 3530 001a FEE7     		b	.L250
 3531              	.L262:
1220:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3532              		.loc 1 1220 9 view .LVU993
 3533              	.LBB219:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 177


 3534              	.LBI219:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3535              		.loc 2 194 34 view .LVU994
 3536              	.LBB220:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3537              		.loc 2 196 9 view .LVU995
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3538              		.loc 2 198 9 view .LVU996
 3539              		.syntax unified
 3540              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3541 001c 4FF05003 			mov r3, #80												
 3542 0020 83F31188 		msr basepri, r3											
 3543 0024 BFF36F8F 		isb														
 3544 0028 BFF34F8F 		dsb														
 3545              	
 3546              	@ 0 "" 2
 3547              	.LVL254:
 3548              		.thumb
 3549              		.syntax unified
 3550              	.L248:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3551              		.loc 2 198 9 is_stmt 0 view .LVU997
 3552              	.LBE220:
 3553              	.LBE219:
1220:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3554              		.loc 1 1220 9 is_stmt 1 discriminator 1 view .LVU998
1220:FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3555              		.loc 1 1220 9 discriminator 1 view .LVU999
 3556 002c FEE7     		b	.L248
 3557              	.L249:
1221:FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3558              		.loc 1 1221 48 discriminator 2 view .LVU1000
1222:FreeRTOS/Source/tasks.c **** 
 3559              		.loc 1 1222 9 discriminator 2 view .LVU1001
 3560 002e 1E4B     		ldr	r3, .L263
 3561 0030 1B68     		ldr	r3, [r3]
 3562 0032 43B1     		cbz	r3, .L251
1222:FreeRTOS/Source/tasks.c **** 
 3563              		.loc 1 1222 9 view .LVU1002
 3564              	.LBB221:
 3565              	.LBI221:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3566              		.loc 2 194 34 view .LVU1003
 3567              	.LBB222:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3568              		.loc 2 196 9 view .LVU1004
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3569              		.loc 2 198 9 view .LVU1005
 3570              		.syntax unified
 3571              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3572 0034 4FF05003 			mov r3, #80												
 3573 0038 83F31188 		msr basepri, r3											
 3574 003c BFF36F8F 		isb														
 3575 0040 BFF34F8F 		dsb														
 3576              	
 3577              	@ 0 "" 2
 3578              	.LVL255:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 178


 3579              		.thumb
 3580              		.syntax unified
 3581              	.L252:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3582              		.loc 2 198 9 is_stmt 0 view .LVU1006
 3583              	.LBE222:
 3584              	.LBE221:
1222:FreeRTOS/Source/tasks.c **** 
 3585              		.loc 1 1222 9 is_stmt 1 discriminator 3 view .LVU1007
1222:FreeRTOS/Source/tasks.c **** 
 3586              		.loc 1 1222 9 discriminator 3 view .LVU1008
 3587 0044 FEE7     		b	.L252
 3588              	.L251:
1222:FreeRTOS/Source/tasks.c **** 
 3589              		.loc 1 1222 50 discriminator 2 view .LVU1009
1224:FreeRTOS/Source/tasks.c ****         {
 3590              		.loc 1 1224 9 discriminator 2 view .LVU1010
 3591 0046 FFF7FEFF 		bl	vTaskSuspendAll
 3592              	.LVL256:
 3593              	.LBB223:
1228:FreeRTOS/Source/tasks.c **** 
 3594              		.loc 1 1228 13 discriminator 2 view .LVU1011
1228:FreeRTOS/Source/tasks.c **** 
 3595              		.loc 1 1228 30 is_stmt 0 discriminator 2 view .LVU1012
 3596 004a 184B     		ldr	r3, .L263+4
 3597 004c 1868     		ldr	r0, [r3]
 3598              	.LVL257:
1231:FreeRTOS/Source/tasks.c **** 
 3599              		.loc 1 1231 13 is_stmt 1 discriminator 2 view .LVU1013
1231:FreeRTOS/Source/tasks.c **** 
 3600              		.loc 1 1231 27 is_stmt 0 discriminator 2 view .LVU1014
 3601 004e 2B68     		ldr	r3, [r5]
1231:FreeRTOS/Source/tasks.c **** 
 3602              		.loc 1 1231 25 discriminator 2 view .LVU1015
 3603 0050 1C44     		add	r4, r4, r3
 3604              	.LVL258:
1233:FreeRTOS/Source/tasks.c ****             {
 3605              		.loc 1 1233 13 is_stmt 1 discriminator 2 view .LVU1016
1233:FreeRTOS/Source/tasks.c ****             {
 3606              		.loc 1 1233 15 is_stmt 0 discriminator 2 view .LVU1017
 3607 0052 8342     		cmp	r3, r0
 3608 0054 0BD9     		bls	.L253
1240:FreeRTOS/Source/tasks.c ****                 {
 3609              		.loc 1 1240 17 is_stmt 1 view .LVU1018
1240:FreeRTOS/Source/tasks.c ****                 {
 3610              		.loc 1 1240 19 is_stmt 0 view .LVU1019
 3611 0056 A342     		cmp	r3, r4
 3612 0058 02D8     		bhi	.L254
1265:FreeRTOS/Source/tasks.c **** 
 3613              		.loc 1 1265 13 is_stmt 1 view .LVU1020
1265:FreeRTOS/Source/tasks.c **** 
 3614              		.loc 1 1265 33 is_stmt 0 view .LVU1021
 3615 005a 2C60     		str	r4, [r5]
1267:FreeRTOS/Source/tasks.c ****             {
 3616              		.loc 1 1267 13 is_stmt 1 view .LVU1022
 3617              	.LBE223:
1218:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 179


 3618              		.loc 1 1218 37 is_stmt 0 view .LVU1023
 3619 005c 0024     		movs	r4, #0
 3620              	.LVL259:
1218:FreeRTOS/Source/tasks.c **** 
 3621              		.loc 1 1218 37 view .LVU1024
 3622 005e 10E0     		b	.L255
 3623              	.LVL260:
 3624              	.L254:
 3625              	.LBB224:
1240:FreeRTOS/Source/tasks.c ****                 {
 3626              		.loc 1 1240 59 discriminator 1 view .LVU1025
 3627 0060 A042     		cmp	r0, r4
 3628 0062 02D3     		bcc	.L256
1265:FreeRTOS/Source/tasks.c **** 
 3629              		.loc 1 1265 13 is_stmt 1 view .LVU1026
1265:FreeRTOS/Source/tasks.c **** 
 3630              		.loc 1 1265 33 is_stmt 0 view .LVU1027
 3631 0064 2C60     		str	r4, [r5]
1267:FreeRTOS/Source/tasks.c ****             {
 3632              		.loc 1 1267 13 is_stmt 1 view .LVU1028
 3633              	.LBE224:
1218:FreeRTOS/Source/tasks.c **** 
 3634              		.loc 1 1218 37 is_stmt 0 view .LVU1029
 3635 0066 0024     		movs	r4, #0
 3636              	.LVL261:
1218:FreeRTOS/Source/tasks.c **** 
 3637              		.loc 1 1218 37 view .LVU1030
 3638 0068 0BE0     		b	.L255
 3639              	.LVL262:
 3640              	.L256:
 3641              	.LBB225:
1242:FreeRTOS/Source/tasks.c ****                 }
 3642              		.loc 1 1242 21 is_stmt 1 view .LVU1031
1265:FreeRTOS/Source/tasks.c **** 
 3643              		.loc 1 1265 13 view .LVU1032
1265:FreeRTOS/Source/tasks.c **** 
 3644              		.loc 1 1265 33 is_stmt 0 view .LVU1033
 3645 006a 2C60     		str	r4, [r5]
1267:FreeRTOS/Source/tasks.c ****             {
 3646              		.loc 1 1267 13 is_stmt 1 view .LVU1034
 3647 006c 04E0     		b	.L257
 3648              	.LVL263:
 3649              	.L253:
1254:FreeRTOS/Source/tasks.c ****                 {
 3650              		.loc 1 1254 17 view .LVU1035
1254:FreeRTOS/Source/tasks.c ****                 {
 3651              		.loc 1 1254 19 is_stmt 0 view .LVU1036
 3652 006e A342     		cmp	r3, r4
 3653 0070 01D8     		bhi	.L258
1254:FreeRTOS/Source/tasks.c ****                 {
 3654              		.loc 1 1254 59 discriminator 1 view .LVU1037
 3655 0072 A042     		cmp	r0, r4
 3656 0074 14D2     		bcs	.L259
 3657              	.L258:
1256:FreeRTOS/Source/tasks.c ****                 }
 3658              		.loc 1 1256 21 is_stmt 1 view .LVU1038
 3659              	.LVL264:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 180


1265:FreeRTOS/Source/tasks.c **** 
 3660              		.loc 1 1265 13 view .LVU1039
1265:FreeRTOS/Source/tasks.c **** 
 3661              		.loc 1 1265 33 is_stmt 0 view .LVU1040
 3662 0076 2C60     		str	r4, [r5]
1267:FreeRTOS/Source/tasks.c ****             {
 3663              		.loc 1 1267 13 is_stmt 1 view .LVU1041
 3664              	.L257:
1269:FreeRTOS/Source/tasks.c **** 
 3665              		.loc 1 1269 53 view .LVU1042
1273:FreeRTOS/Source/tasks.c ****             }
 3666              		.loc 1 1273 17 view .LVU1043
 3667 0078 0021     		movs	r1, #0
 3668 007a 201A     		subs	r0, r4, r0
 3669              	.LVL265:
1273:FreeRTOS/Source/tasks.c ****             }
 3670              		.loc 1 1273 17 is_stmt 0 view .LVU1044
 3671 007c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3672              	.LVL266:
 3673 0080 0124     		movs	r4, #1
 3674              	.LVL267:
 3675              	.L255:
1277:FreeRTOS/Source/tasks.c ****             }
 3676              		.loc 1 1277 41 is_stmt 1 view .LVU1045
 3677              	.LBE225:
1280:FreeRTOS/Source/tasks.c **** 
 3678              		.loc 1 1280 9 view .LVU1046
1280:FreeRTOS/Source/tasks.c **** 
 3679              		.loc 1 1280 27 is_stmt 0 view .LVU1047
 3680 0082 FFF7FEFF 		bl	xTaskResumeAll
 3681              	.LVL268:
1284:FreeRTOS/Source/tasks.c ****         {
 3682              		.loc 1 1284 9 is_stmt 1 view .LVU1048
1284:FreeRTOS/Source/tasks.c ****         {
 3683              		.loc 1 1284 11 is_stmt 0 view .LVU1049
 3684 0086 48B9     		cbnz	r0, .L246
1286:FreeRTOS/Source/tasks.c ****         }
 3685              		.loc 1 1286 13 is_stmt 1 view .LVU1050
 3686 0088 4FF0E023 		mov	r3, #-536813568
 3687 008c 4FF08052 		mov	r2, #268435456
 3688 0090 C3F8042D 		str	r2, [r3, #3332]
1286:FreeRTOS/Source/tasks.c ****         }
 3689              		.loc 1 1286 13 view .LVU1051
 3690              		.syntax unified
 3691              	@ 1286 "FreeRTOS/Source/tasks.c" 1
 3692 0094 BFF34F8F 		dsb
 3693              	@ 0 "" 2
1286:FreeRTOS/Source/tasks.c ****         }
 3694              		.loc 1 1286 13 view .LVU1052
 3695              	@ 1286 "FreeRTOS/Source/tasks.c" 1
 3696 0098 BFF36F8F 		isb
 3697              	@ 0 "" 2
1286:FreeRTOS/Source/tasks.c ****         }
 3698              		.loc 1 1286 35 view .LVU1053
1290:FreeRTOS/Source/tasks.c ****         }
 3699              		.loc 1 1290 37 view .LVU1054
1293:FreeRTOS/Source/tasks.c ****     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 181


 3700              		.loc 1 1293 9 view .LVU1055
 3701              		.thumb
 3702              		.syntax unified
 3703              	.L246:
1294:FreeRTOS/Source/tasks.c **** 
 3704              		.loc 1 1294 5 is_stmt 0 view .LVU1056
 3705 009c 2046     		mov	r0, r4
 3706              	.LVL269:
1294:FreeRTOS/Source/tasks.c **** 
 3707              		.loc 1 1294 5 view .LVU1057
 3708 009e 38BD     		pop	{r3, r4, r5, pc}
 3709              	.LVL270:
 3710              	.L259:
 3711              	.LBB226:
1265:FreeRTOS/Source/tasks.c **** 
 3712              		.loc 1 1265 13 is_stmt 1 view .LVU1058
1265:FreeRTOS/Source/tasks.c **** 
 3713              		.loc 1 1265 33 is_stmt 0 view .LVU1059
 3714 00a0 2C60     		str	r4, [r5]
1267:FreeRTOS/Source/tasks.c ****             {
 3715              		.loc 1 1267 13 is_stmt 1 view .LVU1060
 3716              	.LBE226:
1218:FreeRTOS/Source/tasks.c **** 
 3717              		.loc 1 1218 37 is_stmt 0 view .LVU1061
 3718 00a2 0024     		movs	r4, #0
 3719              	.LVL271:
1218:FreeRTOS/Source/tasks.c **** 
 3720              		.loc 1 1218 37 view .LVU1062
 3721 00a4 EDE7     		b	.L255
 3722              	.L264:
 3723 00a6 00BF     		.align	2
 3724              	.L263:
 3725 00a8 00000000 		.word	uxSchedulerSuspended
 3726 00ac 00000000 		.word	xTickCount
 3727              		.cfi_endproc
 3728              	.LFE9:
 3730              		.section	.text.vTaskDelay,"ax",%progbits
 3731              		.align	1
 3732              		.global	vTaskDelay
 3733              		.syntax unified
 3734              		.thumb
 3735              		.thumb_func
 3737              	vTaskDelay:
 3738              	.LVL272:
 3739              	.LFB10:
1302:FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3740              		.loc 1 1302 5 is_stmt 1 view -0
 3741              		.cfi_startproc
 3742              		@ args = 0, pretend = 0, frame = 0
 3743              		@ frame_needed = 0, uses_anonymous_args = 0
1302:FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3744              		.loc 1 1302 5 is_stmt 0 view .LVU1064
 3745 0000 10B5     		push	{r4, lr}
 3746              	.LCFI27:
 3747              		.cfi_def_cfa_offset 8
 3748              		.cfi_offset 4, -8
 3749              		.cfi_offset 14, -4
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 182


1303:FreeRTOS/Source/tasks.c **** 
 3750              		.loc 1 1303 9 is_stmt 1 view .LVU1065
 3751              	.LVL273:
1306:FreeRTOS/Source/tasks.c ****         {
 3752              		.loc 1 1306 9 view .LVU1066
1306:FreeRTOS/Source/tasks.c ****         {
 3753              		.loc 1 1306 11 is_stmt 0 view .LVU1067
 3754 0002 A8B1     		cbz	r0, .L266
 3755 0004 0446     		mov	r4, r0
1308:FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3756              		.loc 1 1308 13 is_stmt 1 view .LVU1068
 3757 0006 104B     		ldr	r3, .L271
 3758 0008 1B68     		ldr	r3, [r3]
 3759 000a 43B1     		cbz	r3, .L267
1308:FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3760              		.loc 1 1308 13 view .LVU1069
 3761              	.LBB227:
 3762              	.LBI227:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3763              		.loc 2 194 34 view .LVU1070
 3764              	.LBB228:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3765              		.loc 2 196 9 view .LVU1071
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3766              		.loc 2 198 9 view .LVU1072
 3767              		.syntax unified
 3768              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3769 000c 4FF05003 			mov r3, #80												
 3770 0010 83F31188 		msr basepri, r3											
 3771 0014 BFF36F8F 		isb														
 3772 0018 BFF34F8F 		dsb														
 3773              	
 3774              	@ 0 "" 2
 3775              	.LVL274:
 3776              		.thumb
 3777              		.syntax unified
 3778              	.L268:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3779              		.loc 2 198 9 is_stmt 0 view .LVU1073
 3780              	.LBE228:
 3781              	.LBE227:
1308:FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3782              		.loc 1 1308 13 is_stmt 1 discriminator 1 view .LVU1074
1308:FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3783              		.loc 1 1308 13 discriminator 1 view .LVU1075
 3784 001c FEE7     		b	.L268
 3785              	.L267:
1308:FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3786              		.loc 1 1308 54 discriminator 2 view .LVU1076
1309:FreeRTOS/Source/tasks.c ****             {
 3787              		.loc 1 1309 13 discriminator 2 view .LVU1077
 3788 001e FFF7FEFF 		bl	vTaskSuspendAll
 3789              	.LVL275:
1311:FreeRTOS/Source/tasks.c **** 
 3790              		.loc 1 1311 34 discriminator 2 view .LVU1078
1320:FreeRTOS/Source/tasks.c ****             }
 3791              		.loc 1 1320 17 discriminator 2 view .LVU1079
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 183


 3792 0022 0021     		movs	r1, #0
 3793 0024 2046     		mov	r0, r4
 3794 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3795              	.LVL276:
1322:FreeRTOS/Source/tasks.c ****         }
 3796              		.loc 1 1322 13 discriminator 2 view .LVU1080
1322:FreeRTOS/Source/tasks.c ****         }
 3797              		.loc 1 1322 31 is_stmt 0 discriminator 2 view .LVU1081
 3798 002a FFF7FEFF 		bl	xTaskResumeAll
 3799              	.LVL277:
1326:FreeRTOS/Source/tasks.c ****         }
 3800              		.loc 1 1326 37 is_stmt 1 discriminator 2 view .LVU1082
1331:FreeRTOS/Source/tasks.c ****         {
 3801              		.loc 1 1331 9 discriminator 2 view .LVU1083
1331:FreeRTOS/Source/tasks.c ****         {
 3802              		.loc 1 1331 11 is_stmt 0 discriminator 2 view .LVU1084
 3803 002e 48B9     		cbnz	r0, .L265
 3804              	.LVL278:
 3805              	.L266:
1333:FreeRTOS/Source/tasks.c ****         }
 3806              		.loc 1 1333 13 is_stmt 1 view .LVU1085
 3807 0030 4FF0E023 		mov	r3, #-536813568
 3808 0034 4FF08052 		mov	r2, #268435456
 3809 0038 C3F8042D 		str	r2, [r3, #3332]
1333:FreeRTOS/Source/tasks.c ****         }
 3810              		.loc 1 1333 13 view .LVU1086
 3811              		.syntax unified
 3812              	@ 1333 "FreeRTOS/Source/tasks.c" 1
 3813 003c BFF34F8F 		dsb
 3814              	@ 0 "" 2
1333:FreeRTOS/Source/tasks.c ****         }
 3815              		.loc 1 1333 13 view .LVU1087
 3816              	@ 1333 "FreeRTOS/Source/tasks.c" 1
 3817 0040 BFF36F8F 		isb
 3818              	@ 0 "" 2
1333:FreeRTOS/Source/tasks.c ****         }
 3819              		.loc 1 1333 35 view .LVU1088
1337:FreeRTOS/Source/tasks.c ****         }
 3820              		.loc 1 1337 37 view .LVU1089
 3821              		.thumb
 3822              		.syntax unified
 3823              	.L265:
1339:FreeRTOS/Source/tasks.c **** 
 3824              		.loc 1 1339 5 is_stmt 0 view .LVU1090
 3825 0044 10BD     		pop	{r4, pc}
 3826              	.L272:
 3827 0046 00BF     		.align	2
 3828              	.L271:
 3829 0048 00000000 		.word	uxSchedulerSuspended
 3830              		.cfi_endproc
 3831              	.LFE10:
 3833              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3834              		.align	1
 3835              		.global	xTaskCatchUpTicks
 3836              		.syntax unified
 3837              		.thumb
 3838              		.thumb_func
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 184


 3840              	xTaskCatchUpTicks:
 3841              	.LVL279:
 3842              	.LFB28:
2617:FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
 3843              		.loc 1 2617 1 is_stmt 1 view -0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
2618:FreeRTOS/Source/tasks.c **** 
 3847              		.loc 1 2618 5 view .LVU1092
2622:FreeRTOS/Source/tasks.c **** 
 3848              		.loc 1 2622 5 view .LVU1093
 3849 0000 0D4B     		ldr	r3, .L278
 3850 0002 1B68     		ldr	r3, [r3]
 3851 0004 43B1     		cbz	r3, .L274
2622:FreeRTOS/Source/tasks.c **** 
 3852              		.loc 1 2622 5 view .LVU1094
 3853              	.LBB229:
 3854              	.LBI229:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3855              		.loc 2 194 34 view .LVU1095
 3856              	.LBB230:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3857              		.loc 2 196 9 view .LVU1096
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3858              		.loc 2 198 9 view .LVU1097
 3859              		.syntax unified
 3860              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3861 0006 4FF05003 			mov r3, #80												
 3862 000a 83F31188 		msr basepri, r3											
 3863 000e BFF36F8F 		isb														
 3864 0012 BFF34F8F 		dsb														
 3865              	
 3866              	@ 0 "" 2
 3867              	.LVL280:
 3868              		.thumb
 3869              		.syntax unified
 3870              	.L275:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3871              		.loc 2 198 9 is_stmt 0 view .LVU1098
 3872              	.LBE230:
 3873              	.LBE229:
2622:FreeRTOS/Source/tasks.c **** 
 3874              		.loc 1 2622 5 is_stmt 1 discriminator 1 view .LVU1099
2622:FreeRTOS/Source/tasks.c **** 
 3875              		.loc 1 2622 5 discriminator 1 view .LVU1100
 3876 0016 FEE7     		b	.L275
 3877              	.L274:
2617:FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
 3878              		.loc 1 2617 1 is_stmt 0 discriminator 2 view .LVU1101
 3879 0018 10B5     		push	{r4, lr}
 3880              	.LCFI28:
 3881              		.cfi_def_cfa_offset 8
 3882              		.cfi_offset 4, -8
 3883              		.cfi_offset 14, -4
 3884 001a 0446     		mov	r4, r0
2622:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 185


 3885              		.loc 1 2622 46 is_stmt 1 discriminator 2 view .LVU1102
2626:FreeRTOS/Source/tasks.c **** 
 3886              		.loc 1 2626 5 discriminator 2 view .LVU1103
 3887 001c FFF7FEFF 		bl	vTaskSuspendAll
 3888              	.LVL281:
2629:FreeRTOS/Source/tasks.c ****     {
 3889              		.loc 1 2629 5 discriminator 2 view .LVU1104
 3890 0020 FFF7FEFF 		bl	vPortEnterCritical
 3891              	.LVL282:
2631:FreeRTOS/Source/tasks.c ****     }
 3892              		.loc 1 2631 9 discriminator 2 view .LVU1105
2631:FreeRTOS/Source/tasks.c ****     }
 3893              		.loc 1 2631 22 is_stmt 0 discriminator 2 view .LVU1106
 3894 0024 054A     		ldr	r2, .L278+4
 3895 0026 1368     		ldr	r3, [r2]
 3896 0028 2344     		add	r3, r3, r4
 3897 002a 1360     		str	r3, [r2]
2633:FreeRTOS/Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3898              		.loc 1 2633 5 is_stmt 1 discriminator 2 view .LVU1107
 3899 002c FFF7FEFF 		bl	vPortExitCritical
 3900              	.LVL283:
2634:FreeRTOS/Source/tasks.c **** 
 3901              		.loc 1 2634 5 discriminator 2 view .LVU1108
2634:FreeRTOS/Source/tasks.c **** 
 3902              		.loc 1 2634 22 is_stmt 0 discriminator 2 view .LVU1109
 3903 0030 FFF7FEFF 		bl	xTaskResumeAll
 3904              	.LVL284:
2636:FreeRTOS/Source/tasks.c **** }
 3905              		.loc 1 2636 5 is_stmt 1 discriminator 2 view .LVU1110
2637:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3906              		.loc 1 2637 1 is_stmt 0 discriminator 2 view .LVU1111
 3907 0034 10BD     		pop	{r4, pc}
 3908              	.LVL285:
 3909              	.L279:
2637:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3910              		.loc 1 2637 1 discriminator 2 view .LVU1112
 3911 0036 00BF     		.align	2
 3912              	.L278:
 3913 0038 00000000 		.word	uxSchedulerSuspended
 3914 003c 00000000 		.word	xPendedTicks
 3915              		.cfi_endproc
 3916              	.LFE28:
 3918              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3919              		.align	1
 3920              		.global	vTaskSwitchContext
 3921              		.syntax unified
 3922              		.thumb
 3923              		.thumb_func
 3925              	vTaskSwitchContext:
 3926              	.LFB30:
3010:FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3927              		.loc 1 3010 1 is_stmt 1 view -0
 3928              		.cfi_startproc
 3929              		@ args = 0, pretend = 0, frame = 0
 3930              		@ frame_needed = 0, uses_anonymous_args = 0
 3931              		@ link register save eliminated.
3011:FreeRTOS/Source/tasks.c ****     {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 186


 3932              		.loc 1 3011 5 view .LVU1114
3011:FreeRTOS/Source/tasks.c ****     {
 3933              		.loc 1 3011 30 is_stmt 0 view .LVU1115
 3934 0000 204B     		ldr	r3, .L287
 3935 0002 1B68     		ldr	r3, [r3]
3011:FreeRTOS/Source/tasks.c ****     {
 3936              		.loc 1 3011 7 view .LVU1116
 3937 0004 1BB1     		cbz	r3, .L281
3015:FreeRTOS/Source/tasks.c ****     }
 3938              		.loc 1 3015 9 is_stmt 1 view .LVU1117
3015:FreeRTOS/Source/tasks.c ****     }
 3939              		.loc 1 3015 23 is_stmt 0 view .LVU1118
 3940 0006 204B     		ldr	r3, .L287+4
 3941 0008 0122     		movs	r2, #1
 3942 000a 1A60     		str	r2, [r3]
 3943 000c 7047     		bx	lr
 3944              	.L281:
3019:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 3945              		.loc 1 3019 9 is_stmt 1 view .LVU1119
3019:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 3946              		.loc 1 3019 23 is_stmt 0 view .LVU1120
 3947 000e 1E4B     		ldr	r3, .L287+4
 3948 0010 0022     		movs	r2, #0
 3949 0012 1A60     		str	r2, [r3]
3020:FreeRTOS/Source/tasks.c **** 
 3950              		.loc 1 3020 33 is_stmt 1 view .LVU1121
3051:FreeRTOS/Source/tasks.c **** 
 3951              		.loc 1 3051 39 view .LVU1122
 3952              	.LBB231:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3953              		.loc 1 3062 9 view .LVU1123
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3954              		.loc 1 3062 9 view .LVU1124
 3955 0014 1D4B     		ldr	r3, .L287+8
 3956 0016 1B68     		ldr	r3, [r3]
 3957              	.LVL286:
 3958              	.LBB232:
 3959              	.LBI232:
 132:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         {
 3960              		.loc 2 132 66 view .LVU1125
 3961              	.LBB233:
 134:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3962              		.loc 2 134 13 view .LVU1126
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3963              		.loc 2 136 13 view .LVU1127
 3964              		.syntax unified
 3965              	@ 136 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3966 0018 B3FA83F3 		clz r3, r3
 3967              	@ 0 "" 2
 3968              	.LVL287:
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3969              		.loc 2 136 13 is_stmt 0 view .LVU1128
 3970              		.thumb
 3971              		.syntax unified
 3972 001c DBB2     		uxtb	r3, r3
 3973              	.LVL288:
 138:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 187


 3974              		.loc 2 138 13 is_stmt 1 view .LVU1129
 138:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         }
 3975              		.loc 2 138 13 is_stmt 0 view .LVU1130
 3976              	.LBE233:
 3977              	.LBE232:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3978              		.loc 1 3062 9 view .LVU1131
 3979 001e C3F11F03 		rsb	r3, r3, #31
 3980              	.LVL289:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3981              		.loc 1 3062 9 is_stmt 1 view .LVU1132
 3982 0022 03EB8301 		add	r1, r3, r3, lsl #2
 3983 0026 8A00     		lsls	r2, r1, #2
 3984 0028 1949     		ldr	r1, .L287+12
 3985 002a 8A58     		ldr	r2, [r1, r2]
 3986 002c 42B9     		cbnz	r2, .L283
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3987              		.loc 1 3062 9 view .LVU1133
 3988              	.LBB234:
 3989              	.LBI234:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3990              		.loc 2 194 34 view .LVU1134
 3991              	.LBB235:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3992              		.loc 2 196 9 view .LVU1135
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3993              		.loc 2 198 9 view .LVU1136
 3994              		.syntax unified
 3995              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3996 002e 4FF05003 			mov r3, #80												
 3997 0032 83F31188 		msr basepri, r3											
 3998 0036 BFF36F8F 		isb														
 3999 003a BFF34F8F 		dsb														
 4000              	
 4001              	@ 0 "" 2
 4002              	.LVL290:
 4003              		.thumb
 4004              		.syntax unified
 4005              	.L284:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4006              		.loc 2 198 9 is_stmt 0 view .LVU1137
 4007              	.LBE235:
 4008              	.LBE234:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4009              		.loc 1 3062 9 is_stmt 1 discriminator 1 view .LVU1138
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4010              		.loc 1 3062 9 discriminator 1 view .LVU1139
 4011 003e FEE7     		b	.L284
 4012              	.LVL291:
 4013              	.L283:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4014              		.loc 1 3062 9 discriminator 2 view .LVU1140
 4015              	.LBB236:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4016              		.loc 1 3062 9 discriminator 2 view .LVU1141
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4017              		.loc 1 3062 9 discriminator 2 view .LVU1142
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 188


 4018 0040 1348     		ldr	r0, .L287+12
 4019 0042 03EB8301 		add	r1, r3, r3, lsl #2
 4020 0046 8A00     		lsls	r2, r1, #2
 4021 0048 0244     		add	r2, r2, r0
 4022 004a 5168     		ldr	r1, [r2, #4]
 4023 004c 4968     		ldr	r1, [r1, #4]
 4024 004e 5160     		str	r1, [r2, #4]
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4025              		.loc 1 3062 9 discriminator 2 view .LVU1143
 4026 0050 03EB830C 		add	ip, r3, r3, lsl #2
 4027 0054 4FEA8C02 		lsl	r2, ip, #2
 4028 0058 0832     		adds	r2, r2, #8
 4029 005a 0244     		add	r2, r2, r0
 4030 005c 9142     		cmp	r1, r2
 4031 005e 09D0     		beq	.L286
 4032              	.L285:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4033              		.loc 1 3062 9 discriminator 6 view .LVU1144
 4034 0060 03EB8303 		add	r3, r3, r3, lsl #2
 4035              	.LVL292:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4036              		.loc 1 3062 9 is_stmt 0 discriminator 6 view .LVU1145
 4037 0064 9A00     		lsls	r2, r3, #2
 4038 0066 0A4B     		ldr	r3, .L287+12
 4039 0068 1344     		add	r3, r3, r2
 4040 006a 5B68     		ldr	r3, [r3, #4]
 4041 006c DA68     		ldr	r2, [r3, #12]
 4042 006e 094B     		ldr	r3, .L287+16
 4043 0070 1A60     		str	r2, [r3]
 4044              	.LBE236:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4045              		.loc 1 3062 9 is_stmt 1 discriminator 6 view .LVU1146
 4046              	.LBE231:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4047              		.loc 1 3062 43 discriminator 6 view .LVU1147
3063:FreeRTOS/Source/tasks.c **** 
 4048              		.loc 1 3063 32 discriminator 6 view .LVU1148
3080:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4049              		.loc 1 3080 1 is_stmt 0 discriminator 6 view .LVU1149
 4050 0072 7047     		bx	lr
 4051              	.LVL293:
 4052              	.L286:
 4053              	.LBB238:
 4054              	.LBB237:
3062:FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 4055              		.loc 1 3062 9 is_stmt 1 discriminator 4 view .LVU1150
 4056 0074 4868     		ldr	r0, [r1, #4]
 4057 0076 6246     		mov	r2, ip
 4058 0078 9100     		lsls	r1, r2, #2
 4059 007a 054A     		ldr	r2, .L287+12
 4060 007c 0A44     		add	r2, r2, r1
 4061 007e 5060     		str	r0, [r2, #4]
 4062 0080 EEE7     		b	.L285
 4063              	.L288:
 4064 0082 00BF     		.align	2
 4065              	.L287:
 4066 0084 00000000 		.word	uxSchedulerSuspended
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 189


 4067 0088 00000000 		.word	xYieldPending
 4068 008c 00000000 		.word	uxTopReadyPriority
 4069 0090 00000000 		.word	pxReadyTasksLists
 4070 0094 00000000 		.word	pxCurrentTCB
 4071              	.LBE237:
 4072              	.LBE238:
 4073              		.cfi_endproc
 4074              	.LFE30:
 4076              		.section	.text.vTaskSuspend,"ax",%progbits
 4077              		.align	1
 4078              		.global	vTaskSuspend
 4079              		.syntax unified
 4080              		.thumb
 4081              		.thumb_func
 4083              	vTaskSuspend:
 4084              	.LVL294:
 4085              	.LFB15:
1674:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 4086              		.loc 1 1674 5 view -0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 0, uses_anonymous_args = 0
1674:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 4090              		.loc 1 1674 5 is_stmt 0 view .LVU1152
 4091 0000 38B5     		push	{r3, r4, r5, lr}
 4092              	.LCFI29:
 4093              		.cfi_def_cfa_offset 16
 4094              		.cfi_offset 3, -16
 4095              		.cfi_offset 4, -12
 4096              		.cfi_offset 5, -8
 4097              		.cfi_offset 14, -4
 4098 0002 0446     		mov	r4, r0
1675:FreeRTOS/Source/tasks.c **** 
 4099              		.loc 1 1675 9 is_stmt 1 view .LVU1153
1677:FreeRTOS/Source/tasks.c ****         {
 4100              		.loc 1 1677 9 view .LVU1154
 4101 0004 FFF7FEFF 		bl	vPortEnterCritical
 4102              	.LVL295:
1681:FreeRTOS/Source/tasks.c **** 
 4103              		.loc 1 1681 13 view .LVU1155
1681:FreeRTOS/Source/tasks.c **** 
 4104              		.loc 1 1681 21 is_stmt 0 view .LVU1156
 4105 0008 54B3     		cbz	r4, .L303
 4106              	.LVL296:
 4107              	.L290:
1683:FreeRTOS/Source/tasks.c **** 
 4108              		.loc 1 1683 39 is_stmt 1 discriminator 4 view .LVU1157
1687:FreeRTOS/Source/tasks.c ****             {
 4109              		.loc 1 1687 13 discriminator 4 view .LVU1158
1687:FreeRTOS/Source/tasks.c ****             {
 4110              		.loc 1 1687 17 is_stmt 0 discriminator 4 view .LVU1159
 4111 000a 251D     		adds	r5, r4, #4
 4112 000c 2846     		mov	r0, r5
 4113 000e FFF7FEFF 		bl	uxListRemove
 4114              	.LVL297:
1687:FreeRTOS/Source/tasks.c ****             {
 4115              		.loc 1 1687 15 discriminator 4 view .LVU1160
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 190


 4116 0012 70B9     		cbnz	r0, .L291
1689:FreeRTOS/Source/tasks.c ****             }
 4117              		.loc 1 1689 17 is_stmt 1 view .LVU1161
 4118 0014 E26A     		ldr	r2, [r4, #44]
 4119 0016 02EB8203 		add	r3, r2, r2, lsl #2
 4120 001a 9B00     		lsls	r3, r3, #2
 4121 001c 2F49     		ldr	r1, .L307
 4122 001e CB58     		ldr	r3, [r1, r3]
 4123 0020 3BB9     		cbnz	r3, .L291
1689:FreeRTOS/Source/tasks.c ****             }
 4124              		.loc 1 1689 17 discriminator 1 view .LVU1162
 4125 0022 0123     		movs	r3, #1
 4126 0024 03FA02F2 		lsl	r2, r3, r2
 4127 0028 2D49     		ldr	r1, .L307+4
 4128 002a 0B68     		ldr	r3, [r1]
 4129 002c 23EA0203 		bic	r3, r3, r2
 4130 0030 0B60     		str	r3, [r1]
 4131              	.L291:
1693:FreeRTOS/Source/tasks.c ****             }
 4132              		.loc 1 1693 41 view .LVU1163
1697:FreeRTOS/Source/tasks.c ****             {
 4133              		.loc 1 1697 13 view .LVU1164
1697:FreeRTOS/Source/tasks.c ****             {
 4134              		.loc 1 1697 17 is_stmt 0 view .LVU1165
 4135 0032 A36A     		ldr	r3, [r4, #40]
1697:FreeRTOS/Source/tasks.c ****             {
 4136              		.loc 1 1697 15 view .LVU1166
 4137 0034 1BB1     		cbz	r3, .L292
1699:FreeRTOS/Source/tasks.c ****             }
 4138              		.loc 1 1699 17 is_stmt 1 view .LVU1167
1699:FreeRTOS/Source/tasks.c ****             }
 4139              		.loc 1 1699 26 is_stmt 0 view .LVU1168
 4140 0036 04F11800 		add	r0, r4, #24
 4141 003a FFF7FEFF 		bl	uxListRemove
 4142              	.LVL298:
 4143              	.L292:
1703:FreeRTOS/Source/tasks.c ****             }
 4144              		.loc 1 1703 41 is_stmt 1 view .LVU1169
1706:FreeRTOS/Source/tasks.c **** 
 4145              		.loc 1 1706 13 view .LVU1170
 4146 003e 2946     		mov	r1, r5
 4147 0040 2848     		ldr	r0, .L307+8
 4148 0042 FFF7FEFF 		bl	vListInsertEnd
 4149              	.LVL299:
 4150              	.LBB239:
1710:FreeRTOS/Source/tasks.c **** 
 4151              		.loc 1 1710 17 view .LVU1171
1712:FreeRTOS/Source/tasks.c ****                 {
 4152              		.loc 1 1712 17 view .LVU1172
1712:FreeRTOS/Source/tasks.c ****                 {
 4153              		.loc 1 1712 24 is_stmt 0 view .LVU1173
 4154 0046 0023     		movs	r3, #0
 4155              	.LVL300:
 4156              	.L293:
1712:FreeRTOS/Source/tasks.c ****                 {
 4157              		.loc 1 1712 31 is_stmt 1 discriminator 1 view .LVU1174
 4158 0048 002B     		cmp	r3, #0
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 191


 4159 004a 0CDD     		ble	.L295
 4160              	.LBE239:
1724:FreeRTOS/Source/tasks.c **** 
 4161              		.loc 1 1724 9 view .LVU1175
 4162 004c FFF7FEFF 		bl	vPortExitCritical
 4163              	.LVL301:
1726:FreeRTOS/Source/tasks.c ****         {
 4164              		.loc 1 1726 9 view .LVU1176
1726:FreeRTOS/Source/tasks.c ****         {
 4165              		.loc 1 1726 31 is_stmt 0 view .LVU1177
 4166 0050 254B     		ldr	r3, .L307+12
 4167 0052 1B68     		ldr	r3, [r3]
1726:FreeRTOS/Source/tasks.c ****         {
 4168              		.loc 1 1726 11 view .LVU1178
 4169 0054 A3B9     		cbnz	r3, .L304
 4170              	.L296:
1738:FreeRTOS/Source/tasks.c ****         }
 4171              		.loc 1 1738 37 is_stmt 1 view .LVU1179
1741:FreeRTOS/Source/tasks.c ****         {
 4172              		.loc 1 1741 9 view .LVU1180
1741:FreeRTOS/Source/tasks.c ****         {
 4173              		.loc 1 1741 19 is_stmt 0 view .LVU1181
 4174 0056 254B     		ldr	r3, .L307+16
 4175 0058 1B68     		ldr	r3, [r3]
1741:FreeRTOS/Source/tasks.c ****         {
 4176              		.loc 1 1741 11 view .LVU1182
 4177 005a A342     		cmp	r3, r4
 4178 005c 17D0     		beq	.L305
 4179              	.L289:
1772:FreeRTOS/Source/tasks.c **** 
 4180              		.loc 1 1772 5 view .LVU1183
 4181 005e 38BD     		pop	{r3, r4, r5, pc}
 4182              	.LVL302:
 4183              	.L303:
1681:FreeRTOS/Source/tasks.c **** 
 4184              		.loc 1 1681 21 discriminator 1 view .LVU1184
 4185 0060 224B     		ldr	r3, .L307+16
 4186 0062 1C68     		ldr	r4, [r3]
 4187              	.LVL303:
1681:FreeRTOS/Source/tasks.c **** 
 4188              		.loc 1 1681 21 discriminator 1 view .LVU1185
 4189 0064 D1E7     		b	.L290
 4190              	.LVL304:
 4191              	.L295:
 4192              	.LBB240:
1714:FreeRTOS/Source/tasks.c ****                     {
 4193              		.loc 1 1714 21 is_stmt 1 view .LVU1186
1714:FreeRTOS/Source/tasks.c ****                     {
 4194              		.loc 1 1714 45 is_stmt 0 view .LVU1187
 4195 0066 E218     		adds	r2, r4, r3
 4196 0068 92F85420 		ldrb	r2, [r2, #84]	@ zero_extendqisi2
 4197 006c D2B2     		uxtb	r2, r2
1714:FreeRTOS/Source/tasks.c ****                     {
 4198              		.loc 1 1714 23 view .LVU1188
 4199 006e 012A     		cmp	r2, #1
 4200 0070 01D0     		beq	.L306
 4201              	.L294:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 192


1712:FreeRTOS/Source/tasks.c ****                 {
 4202              		.loc 1 1712 73 is_stmt 1 discriminator 2 view .LVU1189
 4203 0072 0133     		adds	r3, r3, #1
 4204              	.LVL305:
1712:FreeRTOS/Source/tasks.c ****                 {
 4205              		.loc 1 1712 73 is_stmt 0 discriminator 2 view .LVU1190
 4206 0074 E8E7     		b	.L293
 4207              	.L306:
1718:FreeRTOS/Source/tasks.c ****                     }
 4208              		.loc 1 1718 25 is_stmt 1 view .LVU1191
1718:FreeRTOS/Source/tasks.c ****                     }
 4209              		.loc 1 1718 51 is_stmt 0 view .LVU1192
 4210 0076 E218     		adds	r2, r4, r3
 4211 0078 0021     		movs	r1, #0
 4212 007a 82F85410 		strb	r1, [r2, #84]
 4213 007e F8E7     		b	.L294
 4214              	.LVL306:
 4215              	.L304:
1718:FreeRTOS/Source/tasks.c ****                     }
 4216              		.loc 1 1718 51 view .LVU1193
 4217              	.LBE240:
1730:FreeRTOS/Source/tasks.c ****             {
 4218              		.loc 1 1730 13 is_stmt 1 view .LVU1194
 4219 0080 FFF7FEFF 		bl	vPortEnterCritical
 4220              	.LVL307:
1732:FreeRTOS/Source/tasks.c ****             }
 4221              		.loc 1 1732 17 view .LVU1195
 4222 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 4223              	.LVL308:
1734:FreeRTOS/Source/tasks.c ****         }
 4224              		.loc 1 1734 13 view .LVU1196
 4225 0088 FFF7FEFF 		bl	vPortExitCritical
 4226              	.LVL309:
 4227 008c E3E7     		b	.L296
 4228              	.L305:
1743:FreeRTOS/Source/tasks.c ****             {
 4229              		.loc 1 1743 13 view .LVU1197
1743:FreeRTOS/Source/tasks.c ****             {
 4230              		.loc 1 1743 35 is_stmt 0 view .LVU1198
 4231 008e 164B     		ldr	r3, .L307+12
 4232 0090 1B68     		ldr	r3, [r3]
1743:FreeRTOS/Source/tasks.c ****             {
 4233              		.loc 1 1743 15 view .LVU1199
 4234 0092 B3B1     		cbz	r3, .L298
1746:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 4235              		.loc 1 1746 17 is_stmt 1 view .LVU1200
 4236 0094 164B     		ldr	r3, .L307+20
 4237 0096 1B68     		ldr	r3, [r3]
 4238 0098 43B1     		cbz	r3, .L299
1746:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 4239              		.loc 1 1746 17 view .LVU1201
 4240              	.LBB241:
 4241              	.LBI241:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4242              		.loc 2 194 34 view .LVU1202
 4243              	.LBB242:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 193


 4244              		.loc 2 196 9 view .LVU1203
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4245              		.loc 2 198 9 view .LVU1204
 4246              		.syntax unified
 4247              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4248 009a 4FF05003 			mov r3, #80												
 4249 009e 83F31188 		msr basepri, r3											
 4250 00a2 BFF36F8F 		isb														
 4251 00a6 BFF34F8F 		dsb														
 4252              	
 4253              	@ 0 "" 2
 4254              	.LVL310:
 4255              		.thumb
 4256              		.syntax unified
 4257              	.L300:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4258              		.loc 2 198 9 is_stmt 0 view .LVU1205
 4259              	.LBE242:
 4260              	.LBE241:
1746:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 4261              		.loc 1 1746 17 is_stmt 1 discriminator 1 view .LVU1206
1746:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 4262              		.loc 1 1746 17 discriminator 1 view .LVU1207
 4263 00aa FEE7     		b	.L300
 4264              	.L299:
1746:FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 4265              		.loc 1 1746 58 discriminator 2 view .LVU1208
1747:FreeRTOS/Source/tasks.c ****             }
 4266              		.loc 1 1747 17 discriminator 2 view .LVU1209
 4267 00ac 4FF0E023 		mov	r3, #-536813568
 4268 00b0 4FF08052 		mov	r2, #268435456
 4269 00b4 C3F8042D 		str	r2, [r3, #3332]
1747:FreeRTOS/Source/tasks.c ****             }
 4270              		.loc 1 1747 17 discriminator 2 view .LVU1210
 4271              		.syntax unified
 4272              	@ 1747 "FreeRTOS/Source/tasks.c" 1
 4273 00b8 BFF34F8F 		dsb
 4274              	@ 0 "" 2
1747:FreeRTOS/Source/tasks.c ****             }
 4275              		.loc 1 1747 17 discriminator 2 view .LVU1211
 4276              	@ 1747 "FreeRTOS/Source/tasks.c" 1
 4277 00bc BFF36F8F 		isb
 4278              	@ 0 "" 2
1747:FreeRTOS/Source/tasks.c ****             }
 4279              		.loc 1 1747 39 discriminator 2 view .LVU1212
 4280              		.thumb
 4281              		.syntax unified
 4282 00c0 CDE7     		b	.L289
 4283              	.L298:
1754:FreeRTOS/Source/tasks.c ****                 {
 4284              		.loc 1 1754 17 view .LVU1213
1754:FreeRTOS/Source/tasks.c ****                 {
 4285              		.loc 1 1754 21 is_stmt 0 view .LVU1214
 4286 00c2 084B     		ldr	r3, .L307+8
 4287 00c4 1A68     		ldr	r2, [r3]
1754:FreeRTOS/Source/tasks.c ****                 {
 4288              		.loc 1 1754 68 view .LVU1215
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 194


 4289 00c6 0B4B     		ldr	r3, .L307+24
 4290 00c8 1B68     		ldr	r3, [r3]
1754:FreeRTOS/Source/tasks.c ****                 {
 4291              		.loc 1 1754 19 view .LVU1216
 4292 00ca 9A42     		cmp	r2, r3
 4293 00cc 03D1     		bne	.L301
1760:FreeRTOS/Source/tasks.c ****                 }
 4294              		.loc 1 1760 21 is_stmt 1 view .LVU1217
1760:FreeRTOS/Source/tasks.c ****                 }
 4295              		.loc 1 1760 34 is_stmt 0 view .LVU1218
 4296 00ce 074B     		ldr	r3, .L307+16
 4297 00d0 0022     		movs	r2, #0
 4298 00d2 1A60     		str	r2, [r3]
 4299 00d4 C3E7     		b	.L289
 4300              	.L301:
1764:FreeRTOS/Source/tasks.c ****                 }
 4301              		.loc 1 1764 21 is_stmt 1 view .LVU1219
 4302 00d6 FFF7FEFF 		bl	vTaskSwitchContext
 4303              	.LVL311:
1770:FreeRTOS/Source/tasks.c ****         }
 4304              		.loc 1 1770 37 view .LVU1220
1772:FreeRTOS/Source/tasks.c **** 
 4305              		.loc 1 1772 5 is_stmt 0 view .LVU1221
 4306 00da C0E7     		b	.L289
 4307              	.L308:
 4308              		.align	2
 4309              	.L307:
 4310 00dc 00000000 		.word	pxReadyTasksLists
 4311 00e0 00000000 		.word	uxTopReadyPriority
 4312 00e4 00000000 		.word	xSuspendedTaskList
 4313 00e8 00000000 		.word	xSchedulerRunning
 4314 00ec 00000000 		.word	pxCurrentTCB
 4315 00f0 00000000 		.word	uxSchedulerSuspended
 4316 00f4 00000000 		.word	uxCurrentNumberOfTasks
 4317              		.cfi_endproc
 4318              	.LFE15:
 4320              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4321              		.align	1
 4322              		.global	vTaskPlaceOnEventList
 4323              		.syntax unified
 4324              		.thumb
 4325              		.thumb_func
 4327              	vTaskPlaceOnEventList:
 4328              	.LVL312:
 4329              	.LFB31:
3085:FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 4330              		.loc 1 3085 1 is_stmt 1 view -0
 4331              		.cfi_startproc
 4332              		@ args = 0, pretend = 0, frame = 0
 4333              		@ frame_needed = 0, uses_anonymous_args = 0
3086:FreeRTOS/Source/tasks.c **** 
 4334              		.loc 1 3086 5 view .LVU1223
 4335 0000 58B1     		cbz	r0, .L314
3085:FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 4336              		.loc 1 3085 1 is_stmt 0 discriminator 2 view .LVU1224
 4337 0002 10B5     		push	{r4, lr}
 4338              	.LCFI30:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 195


 4339              		.cfi_def_cfa_offset 8
 4340              		.cfi_offset 4, -8
 4341              		.cfi_offset 14, -4
 4342 0004 0C46     		mov	r4, r1
3086:FreeRTOS/Source/tasks.c **** 
 4343              		.loc 1 3086 32 is_stmt 1 discriminator 2 view .LVU1225
3102:FreeRTOS/Source/tasks.c **** 
 4344              		.loc 1 3102 5 discriminator 2 view .LVU1226
3102:FreeRTOS/Source/tasks.c **** 
 4345              		.loc 1 3102 46 is_stmt 0 discriminator 2 view .LVU1227
 4346 0006 094A     		ldr	r2, .L315
 4347 0008 1168     		ldr	r1, [r2]
 4348              	.LVL313:
3102:FreeRTOS/Source/tasks.c **** 
 4349              		.loc 1 3102 5 discriminator 2 view .LVU1228
 4350 000a 1831     		adds	r1, r1, #24
 4351 000c FFF7FEFF 		bl	vListInsert
 4352              	.LVL314:
3104:FreeRTOS/Source/tasks.c **** }
 4353              		.loc 1 3104 5 is_stmt 1 discriminator 2 view .LVU1229
 4354 0010 0121     		movs	r1, #1
 4355 0012 2046     		mov	r0, r4
 4356 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4357              	.LVL315:
3105:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4358              		.loc 1 3105 1 is_stmt 0 discriminator 2 view .LVU1230
 4359 0018 10BD     		pop	{r4, pc}
 4360              	.LVL316:
 4361              	.L314:
 4362              	.LCFI31:
 4363              		.cfi_def_cfa_offset 0
 4364              		.cfi_restore 4
 4365              		.cfi_restore 14
3086:FreeRTOS/Source/tasks.c **** 
 4366              		.loc 1 3086 5 is_stmt 1 view .LVU1231
 4367              	.LBB243:
 4368              	.LBI243:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4369              		.loc 2 194 34 view .LVU1232
 4370              	.LBB244:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4371              		.loc 2 196 9 view .LVU1233
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4372              		.loc 2 198 9 view .LVU1234
 4373              		.syntax unified
 4374              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4375 001a 4FF05003 			mov r3, #80												
 4376 001e 83F31188 		msr basepri, r3											
 4377 0022 BFF36F8F 		isb														
 4378 0026 BFF34F8F 		dsb														
 4379              	
 4380              	@ 0 "" 2
 4381              	.LVL317:
 4382              		.thumb
 4383              		.syntax unified
 4384              	.L311:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 196


 4385              		.loc 2 198 9 is_stmt 0 view .LVU1235
 4386              	.LBE244:
 4387              	.LBE243:
3086:FreeRTOS/Source/tasks.c **** 
 4388              		.loc 1 3086 5 is_stmt 1 discriminator 1 view .LVU1236
3086:FreeRTOS/Source/tasks.c **** 
 4389              		.loc 1 3086 5 discriminator 1 view .LVU1237
 4390 002a FEE7     		b	.L311
 4391              	.L316:
 4392              		.align	2
 4393              	.L315:
 4394 002c 00000000 		.word	pxCurrentTCB
 4395              		.cfi_endproc
 4396              	.LFE31:
 4398              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4399              		.align	1
 4400              		.global	vTaskPlaceOnUnorderedEventList
 4401              		.syntax unified
 4402              		.thumb
 4403              		.thumb_func
 4405              	vTaskPlaceOnUnorderedEventList:
 4406              	.LVL318:
 4407              	.LFB32:
3111:FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 4408              		.loc 1 3111 1 view -0
 4409              		.cfi_startproc
 4410              		@ args = 0, pretend = 0, frame = 0
 4411              		@ frame_needed = 0, uses_anonymous_args = 0
3111:FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 4412              		.loc 1 3111 1 is_stmt 0 view .LVU1239
 4413 0000 38B5     		push	{r3, r4, r5, lr}
 4414              	.LCFI32:
 4415              		.cfi_def_cfa_offset 16
 4416              		.cfi_offset 3, -16
 4417              		.cfi_offset 4, -12
 4418              		.cfi_offset 5, -8
 4419              		.cfi_offset 14, -4
3112:FreeRTOS/Source/tasks.c **** 
 4420              		.loc 1 3112 5 is_stmt 1 view .LVU1240
 4421 0002 60B1     		cbz	r0, .L323
 4422 0004 0346     		mov	r3, r0
3112:FreeRTOS/Source/tasks.c **** 
 4423              		.loc 1 3112 32 discriminator 2 view .LVU1241
3116:FreeRTOS/Source/tasks.c **** 
 4424              		.loc 1 3116 5 discriminator 2 view .LVU1242
 4425 0006 1848     		ldr	r0, .L324
 4426              	.LVL319:
3116:FreeRTOS/Source/tasks.c **** 
 4427              		.loc 1 3116 5 is_stmt 0 discriminator 2 view .LVU1243
 4428 0008 0068     		ldr	r0, [r0]
 4429 000a 88B9     		cbnz	r0, .L320
3116:FreeRTOS/Source/tasks.c **** 
 4430              		.loc 1 3116 5 is_stmt 1 view .LVU1244
 4431              	.LBB245:
 4432              	.LBI245:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4433              		.loc 2 194 34 view .LVU1245
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 197


 4434              	.LBB246:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4435              		.loc 2 196 9 view .LVU1246
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4436              		.loc 2 198 9 view .LVU1247
 4437              		.syntax unified
 4438              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4439 000c 4FF05003 			mov r3, #80												
 4440 0010 83F31188 		msr basepri, r3											
 4441 0014 BFF36F8F 		isb														
 4442 0018 BFF34F8F 		dsb														
 4443              	
 4444              	@ 0 "" 2
 4445              	.LVL320:
 4446              		.thumb
 4447              		.syntax unified
 4448              	.L321:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4449              		.loc 2 198 9 is_stmt 0 view .LVU1248
 4450              	.LBE246:
 4451              	.LBE245:
3116:FreeRTOS/Source/tasks.c **** 
 4452              		.loc 1 3116 5 is_stmt 1 discriminator 2 view .LVU1249
3116:FreeRTOS/Source/tasks.c **** 
 4453              		.loc 1 3116 5 discriminator 2 view .LVU1250
 4454 001c FEE7     		b	.L321
 4455              	.LVL321:
 4456              	.L323:
3112:FreeRTOS/Source/tasks.c **** 
 4457              		.loc 1 3112 5 view .LVU1251
 4458              	.LBB247:
 4459              	.LBI247:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4460              		.loc 2 194 34 view .LVU1252
 4461              	.LBB248:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4462              		.loc 2 196 9 view .LVU1253
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4463              		.loc 2 198 9 view .LVU1254
 4464              		.syntax unified
 4465              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4466 001e 4FF05003 			mov r3, #80												
 4467 0022 83F31188 		msr basepri, r3											
 4468 0026 BFF36F8F 		isb														
 4469 002a BFF34F8F 		dsb														
 4470              	
 4471              	@ 0 "" 2
 4472              	.LVL322:
 4473              		.thumb
 4474              		.syntax unified
 4475              	.L319:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4476              		.loc 2 198 9 is_stmt 0 view .LVU1255
 4477              	.LBE248:
 4478              	.LBE247:
3112:FreeRTOS/Source/tasks.c **** 
 4479              		.loc 1 3112 5 is_stmt 1 discriminator 1 view .LVU1256
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 198


3112:FreeRTOS/Source/tasks.c **** 
 4480              		.loc 1 3112 5 discriminator 1 view .LVU1257
 4481 002e FEE7     		b	.L319
 4482              	.LVL323:
 4483              	.L320:
3116:FreeRTOS/Source/tasks.c **** 
 4484              		.loc 1 3116 46 discriminator 2 view .LVU1258
3121:FreeRTOS/Source/tasks.c **** 
 4485              		.loc 1 3121 5 discriminator 2 view .LVU1259
 4486 0030 0E48     		ldr	r0, .L324+4
 4487 0032 0468     		ldr	r4, [r0]
 4488 0034 41F00041 		orr	r1, r1, #-2147483648
 4489              	.LVL324:
3121:FreeRTOS/Source/tasks.c **** 
 4490              		.loc 1 3121 5 is_stmt 0 discriminator 2 view .LVU1260
 4491 0038 A161     		str	r1, [r4, #24]
 4492              	.LBB249:
3128:FreeRTOS/Source/tasks.c **** 
 4493              		.loc 1 3128 5 is_stmt 1 discriminator 2 view .LVU1261
 4494 003a 5968     		ldr	r1, [r3, #4]
 4495              	.LVL325:
3128:FreeRTOS/Source/tasks.c **** 
 4496              		.loc 1 3128 5 discriminator 2 view .LVU1262
3128:FreeRTOS/Source/tasks.c **** 
 4497              		.loc 1 3128 5 discriminator 2 view .LVU1263
3128:FreeRTOS/Source/tasks.c **** 
 4498              		.loc 1 3128 5 discriminator 2 view .LVU1264
 4499 003c 0468     		ldr	r4, [r0]
 4500 003e E161     		str	r1, [r4, #28]
3128:FreeRTOS/Source/tasks.c **** 
 4501              		.loc 1 3128 5 discriminator 2 view .LVU1265
 4502 0040 0568     		ldr	r5, [r0]
 4503 0042 8C68     		ldr	r4, [r1, #8]
 4504 0044 2C62     		str	r4, [r5, #32]
3128:FreeRTOS/Source/tasks.c **** 
 4505              		.loc 1 3128 5 discriminator 2 view .LVU1266
 4506 0046 0568     		ldr	r5, [r0]
 4507 0048 1835     		adds	r5, r5, #24
 4508 004a 6560     		str	r5, [r4, #4]
3128:FreeRTOS/Source/tasks.c **** 
 4509              		.loc 1 3128 5 discriminator 2 view .LVU1267
 4510 004c 0468     		ldr	r4, [r0]
 4511 004e 1834     		adds	r4, r4, #24
 4512 0050 8C60     		str	r4, [r1, #8]
3128:FreeRTOS/Source/tasks.c **** 
 4513              		.loc 1 3128 5 discriminator 2 view .LVU1268
 4514 0052 0168     		ldr	r1, [r0]
 4515              	.LVL326:
3128:FreeRTOS/Source/tasks.c **** 
 4516              		.loc 1 3128 5 is_stmt 0 discriminator 2 view .LVU1269
 4517 0054 8B62     		str	r3, [r1, #40]
3128:FreeRTOS/Source/tasks.c **** 
 4518              		.loc 1 3128 5 is_stmt 1 discriminator 2 view .LVU1270
 4519 0056 1968     		ldr	r1, [r3]
 4520 0058 0131     		adds	r1, r1, #1
 4521 005a 1960     		str	r1, [r3]
 4522              	.LBE249:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 199


3128:FreeRTOS/Source/tasks.c **** 
 4523              		.loc 1 3128 69 discriminator 2 view .LVU1271
3130:FreeRTOS/Source/tasks.c **** }
 4524              		.loc 1 3130 5 discriminator 2 view .LVU1272
 4525 005c 0121     		movs	r1, #1
 4526 005e 1046     		mov	r0, r2
 4527 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4528              	.LVL327:
3131:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4529              		.loc 1 3131 1 is_stmt 0 discriminator 2 view .LVU1273
 4530 0064 38BD     		pop	{r3, r4, r5, pc}
 4531              	.L325:
 4532 0066 00BF     		.align	2
 4533              	.L324:
 4534 0068 00000000 		.word	uxSchedulerSuspended
 4535 006c 00000000 		.word	pxCurrentTCB
 4536              		.cfi_endproc
 4537              	.LFE32:
 4539              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4540              		.align	1
 4541              		.global	vTaskPlaceOnEventListRestricted
 4542              		.syntax unified
 4543              		.thumb
 4544              		.thumb_func
 4546              	vTaskPlaceOnEventListRestricted:
 4547              	.LVL328:
 4548              	.LFB33:
3139:FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
 4549              		.loc 1 3139 5 is_stmt 1 view -0
 4550              		.cfi_startproc
 4551              		@ args = 0, pretend = 0, frame = 0
 4552              		@ frame_needed = 0, uses_anonymous_args = 0
3139:FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
 4553              		.loc 1 3139 5 is_stmt 0 view .LVU1275
 4554 0000 38B5     		push	{r3, r4, r5, lr}
 4555              	.LCFI33:
 4556              		.cfi_def_cfa_offset 16
 4557              		.cfi_offset 3, -16
 4558              		.cfi_offset 4, -12
 4559              		.cfi_offset 5, -8
 4560              		.cfi_offset 14, -4
3140:FreeRTOS/Source/tasks.c **** 
 4561              		.loc 1 3140 9 is_stmt 1 view .LVU1276
 4562 0002 D8B1     		cbz	r0, .L332
 4563 0004 8C46     		mov	ip, r1
 4564 0006 1146     		mov	r1, r2
 4565              	.LVL329:
3140:FreeRTOS/Source/tasks.c **** 
 4566              		.loc 1 3140 9 is_stmt 0 view .LVU1277
 4567 0008 0546     		mov	r5, r0
3140:FreeRTOS/Source/tasks.c **** 
 4568              		.loc 1 3140 36 is_stmt 1 discriminator 2 view .LVU1278
 4569              	.LBB250:
3152:FreeRTOS/Source/tasks.c **** 
 4570              		.loc 1 3152 9 discriminator 2 view .LVU1279
 4571 000a 4268     		ldr	r2, [r0, #4]
 4572              	.LVL330:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 200


3152:FreeRTOS/Source/tasks.c **** 
 4573              		.loc 1 3152 9 discriminator 2 view .LVU1280
3152:FreeRTOS/Source/tasks.c **** 
 4574              		.loc 1 3152 9 discriminator 2 view .LVU1281
3152:FreeRTOS/Source/tasks.c **** 
 4575              		.loc 1 3152 9 discriminator 2 view .LVU1282
 4576 000c 104B     		ldr	r3, .L333
 4577 000e 1868     		ldr	r0, [r3]
 4578              	.LVL331:
3152:FreeRTOS/Source/tasks.c **** 
 4579              		.loc 1 3152 9 is_stmt 0 discriminator 2 view .LVU1283
 4580 0010 C261     		str	r2, [r0, #28]
3152:FreeRTOS/Source/tasks.c **** 
 4581              		.loc 1 3152 9 is_stmt 1 discriminator 2 view .LVU1284
 4582 0012 1868     		ldr	r0, [r3]
 4583 0014 9468     		ldr	r4, [r2, #8]
 4584 0016 0462     		str	r4, [r0, #32]
3152:FreeRTOS/Source/tasks.c **** 
 4585              		.loc 1 3152 9 discriminator 2 view .LVU1285
 4586 0018 1868     		ldr	r0, [r3]
 4587 001a 1830     		adds	r0, r0, #24
 4588 001c 6060     		str	r0, [r4, #4]
3152:FreeRTOS/Source/tasks.c **** 
 4589              		.loc 1 3152 9 discriminator 2 view .LVU1286
 4590 001e 1868     		ldr	r0, [r3]
 4591 0020 1830     		adds	r0, r0, #24
 4592 0022 9060     		str	r0, [r2, #8]
3152:FreeRTOS/Source/tasks.c **** 
 4593              		.loc 1 3152 9 discriminator 2 view .LVU1287
 4594 0024 1B68     		ldr	r3, [r3]
 4595 0026 9D62     		str	r5, [r3, #40]
3152:FreeRTOS/Source/tasks.c **** 
 4596              		.loc 1 3152 9 discriminator 2 view .LVU1288
 4597 0028 2B68     		ldr	r3, [r5]
 4598 002a 0133     		adds	r3, r3, #1
 4599 002c 2B60     		str	r3, [r5]
 4600              	.LBE250:
3152:FreeRTOS/Source/tasks.c **** 
 4601              		.loc 1 3152 73 discriminator 2 view .LVU1289
3157:FreeRTOS/Source/tasks.c ****         {
 4602              		.loc 1 3157 9 discriminator 2 view .LVU1290
3157:FreeRTOS/Source/tasks.c ****         {
 4603              		.loc 1 3157 11 is_stmt 0 discriminator 2 view .LVU1291
 4604 002e 09B1     		cbz	r1, .L329
3159:FreeRTOS/Source/tasks.c ****         }
 4605              		.loc 1 3159 26 view .LVU1292
 4606 0030 4FF0FF3C 		mov	ip, #-1
 4607              	.LVL332:
 4608              	.L329:
3162:FreeRTOS/Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4609              		.loc 1 3162 63 is_stmt 1 view .LVU1293
3163:FreeRTOS/Source/tasks.c ****     }
 4610              		.loc 1 3163 9 view .LVU1294
 4611 0034 6046     		mov	r0, ip
 4612 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4613              	.LVL333:
3164:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 201


 4614              		.loc 1 3164 5 is_stmt 0 view .LVU1295
 4615 003a 38BD     		pop	{r3, r4, r5, pc}
 4616              	.LVL334:
 4617              	.L332:
3140:FreeRTOS/Source/tasks.c **** 
 4618              		.loc 1 3140 9 is_stmt 1 view .LVU1296
 4619              	.LBB251:
 4620              	.LBI251:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4621              		.loc 2 194 34 view .LVU1297
 4622              	.LBB252:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4623              		.loc 2 196 9 view .LVU1298
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4624              		.loc 2 198 9 view .LVU1299
 4625              		.syntax unified
 4626              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4627 003c 4FF05003 			mov r3, #80												
 4628 0040 83F31188 		msr basepri, r3											
 4629 0044 BFF36F8F 		isb														
 4630 0048 BFF34F8F 		dsb														
 4631              	
 4632              	@ 0 "" 2
 4633              	.LVL335:
 4634              		.thumb
 4635              		.syntax unified
 4636              	.L328:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4637              		.loc 2 198 9 is_stmt 0 view .LVU1300
 4638              	.LBE252:
 4639              	.LBE251:
3140:FreeRTOS/Source/tasks.c **** 
 4640              		.loc 1 3140 9 is_stmt 1 discriminator 1 view .LVU1301
3140:FreeRTOS/Source/tasks.c **** 
 4641              		.loc 1 3140 9 discriminator 1 view .LVU1302
 4642 004c FEE7     		b	.L328
 4643              	.L334:
 4644 004e 00BF     		.align	2
 4645              	.L333:
 4646 0050 00000000 		.word	pxCurrentTCB
 4647              		.cfi_endproc
 4648              	.LFE33:
 4650              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4651              		.align	1
 4652              		.global	xTaskRemoveFromEventList
 4653              		.syntax unified
 4654              		.thumb
 4655              		.thumb_func
 4657              	xTaskRemoveFromEventList:
 4658              	.LVL336:
 4659              	.LFB34:
3170:FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4660              		.loc 1 3170 1 view -0
 4661              		.cfi_startproc
 4662              		@ args = 0, pretend = 0, frame = 0
 4663              		@ frame_needed = 0, uses_anonymous_args = 0
 4664              		@ link register save eliminated.
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 202


3171:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 4665              		.loc 1 3171 5 view .LVU1304
3172:FreeRTOS/Source/tasks.c **** 
 4666              		.loc 1 3172 5 view .LVU1305
3187:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4667              		.loc 1 3187 5 view .LVU1306
3187:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4668              		.loc 1 3187 22 is_stmt 0 view .LVU1307
 4669 0000 C368     		ldr	r3, [r0, #12]
3187:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4670              		.loc 1 3187 20 view .LVU1308
 4671 0002 DB68     		ldr	r3, [r3, #12]
 4672              	.LVL337:
3188:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4673              		.loc 1 3188 5 is_stmt 1 view .LVU1309
 4674 0004 002B     		cmp	r3, #0
 4675 0006 4AD0     		beq	.L346
3170:FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4676              		.loc 1 3170 1 is_stmt 0 discriminator 2 view .LVU1310
 4677 0008 30B4     		push	{r4, r5}
 4678              	.LCFI34:
 4679              		.cfi_def_cfa_offset 8
 4680              		.cfi_offset 4, -8
 4681              		.cfi_offset 5, -4
3188:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4682              		.loc 1 3188 35 is_stmt 1 discriminator 2 view .LVU1311
 4683              	.LBB253:
3189:FreeRTOS/Source/tasks.c **** 
 4684              		.loc 1 3189 5 discriminator 2 view .LVU1312
 4685 000a 9A6A     		ldr	r2, [r3, #40]
 4686              	.LVL338:
3189:FreeRTOS/Source/tasks.c **** 
 4687              		.loc 1 3189 5 discriminator 2 view .LVU1313
 4688 000c D869     		ldr	r0, [r3, #28]
 4689              	.LVL339:
3189:FreeRTOS/Source/tasks.c **** 
 4690              		.loc 1 3189 5 is_stmt 0 discriminator 2 view .LVU1314
 4691 000e 196A     		ldr	r1, [r3, #32]
 4692 0010 8160     		str	r1, [r0, #8]
3189:FreeRTOS/Source/tasks.c **** 
 4693              		.loc 1 3189 5 is_stmt 1 discriminator 2 view .LVU1315
 4694 0012 D869     		ldr	r0, [r3, #28]
 4695 0014 4860     		str	r0, [r1, #4]
3189:FreeRTOS/Source/tasks.c **** 
 4696              		.loc 1 3189 5 discriminator 2 view .LVU1316
 4697 0016 5168     		ldr	r1, [r2, #4]
 4698 0018 03F11800 		add	r0, r3, #24
 4699 001c 8142     		cmp	r1, r0
 4700 001e 47D0     		beq	.L347
 4701              	.L338:
3189:FreeRTOS/Source/tasks.c **** 
 4702              		.loc 1 3189 5 discriminator 3 view .LVU1317
 4703 0020 0021     		movs	r1, #0
 4704 0022 9962     		str	r1, [r3, #40]
3189:FreeRTOS/Source/tasks.c **** 
 4705              		.loc 1 3189 5 discriminator 3 view .LVU1318
 4706 0024 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 203


 4707 0026 0139     		subs	r1, r1, #1
 4708 0028 1160     		str	r1, [r2]
 4709              	.LBE253:
3189:FreeRTOS/Source/tasks.c **** 
 4710              		.loc 1 3189 59 discriminator 3 view .LVU1319
3191:FreeRTOS/Source/tasks.c ****     {
 4711              		.loc 1 3191 5 discriminator 3 view .LVU1320
3191:FreeRTOS/Source/tasks.c ****     {
 4712              		.loc 1 3191 30 is_stmt 0 discriminator 3 view .LVU1321
 4713 002a 2B4A     		ldr	r2, .L349
 4714              	.LVL340:
3191:FreeRTOS/Source/tasks.c ****     {
 4715              		.loc 1 3191 30 discriminator 3 view .LVU1322
 4716 002c 1268     		ldr	r2, [r2]
3191:FreeRTOS/Source/tasks.c ****     {
 4717              		.loc 1 3191 7 discriminator 3 view .LVU1323
 4718 002e 002A     		cmp	r2, #0
 4719 0030 44D1     		bne	.L339
 4720              	.LBB254:
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4721              		.loc 1 3193 9 is_stmt 1 view .LVU1324
 4722 0032 5A69     		ldr	r2, [r3, #20]
 4723              	.LVL341:
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4724              		.loc 1 3193 9 view .LVU1325
 4725 0034 9868     		ldr	r0, [r3, #8]
 4726 0036 D968     		ldr	r1, [r3, #12]
 4727 0038 8160     		str	r1, [r0, #8]
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4728              		.loc 1 3193 9 view .LVU1326
 4729 003a 9868     		ldr	r0, [r3, #8]
 4730 003c 4860     		str	r0, [r1, #4]
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4731              		.loc 1 3193 9 view .LVU1327
 4732 003e 5168     		ldr	r1, [r2, #4]
 4733 0040 181D     		adds	r0, r3, #4
 4734 0042 8142     		cmp	r1, r0
 4735 0044 37D0     		beq	.L348
 4736              	.L340:
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4737              		.loc 1 3193 9 discriminator 3 view .LVU1328
 4738 0046 0021     		movs	r1, #0
 4739 0048 5961     		str	r1, [r3, #20]
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4740              		.loc 1 3193 9 discriminator 3 view .LVU1329
 4741 004a 1168     		ldr	r1, [r2]
 4742 004c 0139     		subs	r1, r1, #1
 4743 004e 1160     		str	r1, [r2]
 4744              	.LBE254:
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4745              		.loc 1 3193 63 discriminator 3 view .LVU1330
3194:FreeRTOS/Source/tasks.c **** 
 4746              		.loc 1 3194 9 discriminator 3 view .LVU1331
3194:FreeRTOS/Source/tasks.c **** 
 4747              		.loc 1 3194 9 discriminator 3 view .LVU1332
 4748 0050 DA6A     		ldr	r2, [r3, #44]
 4749              	.LVL342:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 204


3194:FreeRTOS/Source/tasks.c **** 
 4750              		.loc 1 3194 9 is_stmt 0 discriminator 3 view .LVU1333
 4751 0052 0121     		movs	r1, #1
 4752 0054 9140     		lsls	r1, r1, r2
 4753 0056 214C     		ldr	r4, .L349+4
 4754 0058 2568     		ldr	r5, [r4]
 4755 005a 2943     		orrs	r1, r1, r5
 4756 005c 2160     		str	r1, [r4]
 4757              	.LBB255:
3194:FreeRTOS/Source/tasks.c **** 
 4758              		.loc 1 3194 9 is_stmt 1 discriminator 3 view .LVU1334
 4759 005e 2049     		ldr	r1, .L349+8
 4760 0060 02EB8202 		add	r2, r2, r2, lsl #2
 4761 0064 01EB8202 		add	r2, r1, r2, lsl #2
 4762 0068 5268     		ldr	r2, [r2, #4]
 4763              	.LVL343:
3194:FreeRTOS/Source/tasks.c **** 
 4764              		.loc 1 3194 9 discriminator 3 view .LVU1335
3194:FreeRTOS/Source/tasks.c **** 
 4765              		.loc 1 3194 9 discriminator 3 view .LVU1336
3194:FreeRTOS/Source/tasks.c **** 
 4766              		.loc 1 3194 9 discriminator 3 view .LVU1337
 4767 006a 9A60     		str	r2, [r3, #8]
3194:FreeRTOS/Source/tasks.c **** 
 4768              		.loc 1 3194 9 discriminator 3 view .LVU1338
 4769 006c 9468     		ldr	r4, [r2, #8]
 4770 006e DC60     		str	r4, [r3, #12]
3194:FreeRTOS/Source/tasks.c **** 
 4771              		.loc 1 3194 9 discriminator 3 view .LVU1339
 4772 0070 6060     		str	r0, [r4, #4]
3194:FreeRTOS/Source/tasks.c **** 
 4773              		.loc 1 3194 9 discriminator 3 view .LVU1340
 4774 0072 9060     		str	r0, [r2, #8]
3194:FreeRTOS/Source/tasks.c **** 
 4775              		.loc 1 3194 9 discriminator 3 view .LVU1341
 4776 0074 DA6A     		ldr	r2, [r3, #44]
 4777              	.LVL344:
3194:FreeRTOS/Source/tasks.c **** 
 4778              		.loc 1 3194 9 is_stmt 0 discriminator 3 view .LVU1342
 4779 0076 02EB8200 		add	r0, r2, r2, lsl #2
 4780 007a 8400     		lsls	r4, r0, #2
 4781 007c 01EB8000 		add	r0, r1, r0, lsl #2
 4782 0080 5861     		str	r0, [r3, #20]
3194:FreeRTOS/Source/tasks.c **** 
 4783              		.loc 1 3194 9 is_stmt 1 discriminator 3 view .LVU1343
 4784 0082 0859     		ldr	r0, [r1, r4]
 4785 0084 0130     		adds	r0, r0, #1
 4786 0086 0851     		str	r0, [r1, r4]
 4787              	.LBE255:
3194:FreeRTOS/Source/tasks.c **** 
 4788              		.loc 1 3194 9 discriminator 3 view .LVU1344
3194:FreeRTOS/Source/tasks.c **** 
 4789              		.loc 1 3194 48 discriminator 3 view .LVU1345
 4790              	.LVL345:
 4791              	.L341:
3214:FreeRTOS/Source/tasks.c ****     }
 4792              		.loc 1 3214 86 discriminator 1 view .LVU1346
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 205


3217:FreeRTOS/Source/tasks.c ****     {
 4793              		.loc 1 3217 5 discriminator 1 view .LVU1347
3217:FreeRTOS/Source/tasks.c ****     {
 4794              		.loc 1 3217 23 is_stmt 0 discriminator 1 view .LVU1348
 4795 0088 DA6A     		ldr	r2, [r3, #44]
3217:FreeRTOS/Source/tasks.c ****     {
 4796              		.loc 1 3217 50 discriminator 1 view .LVU1349
 4797 008a 164B     		ldr	r3, .L349+12
 4798              	.LVL346:
3217:FreeRTOS/Source/tasks.c ****     {
 4799              		.loc 1 3217 50 discriminator 1 view .LVU1350
 4800 008c 1B68     		ldr	r3, [r3]
 4801 008e DB6A     		ldr	r3, [r3, #44]
3217:FreeRTOS/Source/tasks.c ****     {
 4802              		.loc 1 3217 7 discriminator 1 view .LVU1351
 4803 0090 9A42     		cmp	r2, r3
 4804 0092 1FD9     		bls	.L343
3222:FreeRTOS/Source/tasks.c **** 
 4805              		.loc 1 3222 9 is_stmt 1 view .LVU1352
 4806              	.LVL347:
3226:FreeRTOS/Source/tasks.c ****     }
 4807              		.loc 1 3226 9 view .LVU1353
3226:FreeRTOS/Source/tasks.c ****     }
 4808              		.loc 1 3226 23 is_stmt 0 view .LVU1354
 4809 0094 0120     		movs	r0, #1
 4810 0096 144B     		ldr	r3, .L349+16
 4811 0098 1860     		str	r0, [r3]
 4812              	.LVL348:
 4813              	.L335:
3234:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4814              		.loc 1 3234 1 view .LVU1355
 4815 009a 30BC     		pop	{r4, r5}
 4816              	.LCFI35:
 4817              		.cfi_restore 5
 4818              		.cfi_restore 4
 4819              		.cfi_def_cfa_offset 0
 4820 009c 7047     		bx	lr
 4821              	.LVL349:
 4822              	.L346:
3188:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4823              		.loc 1 3188 5 is_stmt 1 view .LVU1356
 4824              	.LBB256:
 4825              	.LBI256:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4826              		.loc 2 194 34 view .LVU1357
 4827              	.LBB257:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4828              		.loc 2 196 9 view .LVU1358
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4829              		.loc 2 198 9 view .LVU1359
 4830              		.syntax unified
 4831              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4832 009e 4FF05003 			mov r3, #80												
 4833 00a2 83F31188 		msr basepri, r3											
 4834 00a6 BFF36F8F 		isb														
 4835 00aa BFF34F8F 		dsb														
 4836              	
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 206


 4837              	@ 0 "" 2
 4838              	.LVL350:
 4839              		.thumb
 4840              		.syntax unified
 4841              	.L337:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4842              		.loc 2 198 9 is_stmt 0 view .LVU1360
 4843              	.LBE257:
 4844              	.LBE256:
3188:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4845              		.loc 1 3188 5 is_stmt 1 discriminator 1 view .LVU1361
3188:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4846              		.loc 1 3188 5 discriminator 1 view .LVU1362
 4847 00ae FEE7     		b	.L337
 4848              	.LVL351:
 4849              	.L347:
 4850              	.LCFI36:
 4851              		.cfi_def_cfa_offset 8
 4852              		.cfi_offset 4, -8
 4853              		.cfi_offset 5, -4
 4854              	.LBB258:
3189:FreeRTOS/Source/tasks.c **** 
 4855              		.loc 1 3189 5 discriminator 1 view .LVU1363
 4856 00b0 196A     		ldr	r1, [r3, #32]
 4857 00b2 5160     		str	r1, [r2, #4]
 4858 00b4 B4E7     		b	.L338
 4859              	.LVL352:
 4860              	.L348:
3189:FreeRTOS/Source/tasks.c **** 
 4861              		.loc 1 3189 5 is_stmt 0 discriminator 1 view .LVU1364
 4862              	.LBE258:
 4863              	.LBB259:
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4864              		.loc 1 3193 9 is_stmt 1 discriminator 1 view .LVU1365
 4865 00b6 D968     		ldr	r1, [r3, #12]
 4866 00b8 5160     		str	r1, [r2, #4]
 4867 00ba C4E7     		b	.L340
 4868              	.LVL353:
 4869              	.L339:
3193:FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4870              		.loc 1 3193 9 is_stmt 0 discriminator 1 view .LVU1366
 4871              	.LBE259:
 4872              	.LBB260:
3214:FreeRTOS/Source/tasks.c ****     }
 4873              		.loc 1 3214 9 is_stmt 1 view .LVU1367
 4874 00bc 0B4A     		ldr	r2, .L349+20
 4875 00be 5168     		ldr	r1, [r2, #4]
 4876              	.LVL354:
3214:FreeRTOS/Source/tasks.c ****     }
 4877              		.loc 1 3214 9 view .LVU1368
3214:FreeRTOS/Source/tasks.c ****     }
 4878              		.loc 1 3214 9 view .LVU1369
3214:FreeRTOS/Source/tasks.c ****     }
 4879              		.loc 1 3214 9 view .LVU1370
 4880 00c0 D961     		str	r1, [r3, #28]
3214:FreeRTOS/Source/tasks.c ****     }
 4881              		.loc 1 3214 9 view .LVU1371
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 207


 4882 00c2 8C68     		ldr	r4, [r1, #8]
 4883 00c4 1C62     		str	r4, [r3, #32]
3214:FreeRTOS/Source/tasks.c ****     }
 4884              		.loc 1 3214 9 view .LVU1372
 4885 00c6 6060     		str	r0, [r4, #4]
3214:FreeRTOS/Source/tasks.c ****     }
 4886              		.loc 1 3214 9 view .LVU1373
 4887 00c8 8860     		str	r0, [r1, #8]
3214:FreeRTOS/Source/tasks.c ****     }
 4888              		.loc 1 3214 9 view .LVU1374
 4889 00ca 9A62     		str	r2, [r3, #40]
3214:FreeRTOS/Source/tasks.c ****     }
 4890              		.loc 1 3214 9 view .LVU1375
 4891 00cc 1168     		ldr	r1, [r2]
 4892              	.LVL355:
3214:FreeRTOS/Source/tasks.c ****     }
 4893              		.loc 1 3214 9 is_stmt 0 view .LVU1376
 4894 00ce 0131     		adds	r1, r1, #1
 4895 00d0 1160     		str	r1, [r2]
 4896 00d2 D9E7     		b	.L341
 4897              	.LVL356:
 4898              	.L343:
3214:FreeRTOS/Source/tasks.c ****     }
 4899              		.loc 1 3214 9 view .LVU1377
 4900              	.LBE260:
3230:FreeRTOS/Source/tasks.c ****     }
 4901              		.loc 1 3230 17 view .LVU1378
 4902 00d4 0020     		movs	r0, #0
 4903              	.LVL357:
3233:FreeRTOS/Source/tasks.c **** }
 4904              		.loc 1 3233 5 is_stmt 1 view .LVU1379
3233:FreeRTOS/Source/tasks.c **** }
 4905              		.loc 1 3233 12 is_stmt 0 view .LVU1380
 4906 00d6 E0E7     		b	.L335
 4907              	.L350:
 4908              		.align	2
 4909              	.L349:
 4910 00d8 00000000 		.word	uxSchedulerSuspended
 4911 00dc 00000000 		.word	uxTopReadyPriority
 4912 00e0 00000000 		.word	pxReadyTasksLists
 4913 00e4 00000000 		.word	pxCurrentTCB
 4914 00e8 00000000 		.word	xYieldPending
 4915 00ec 00000000 		.word	xPendingReadyList
 4916              		.cfi_endproc
 4917              	.LFE34:
 4919              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4920              		.align	1
 4921              		.global	vTaskRemoveFromUnorderedEventList
 4922              		.syntax unified
 4923              		.thumb
 4924              		.thumb_func
 4926              	vTaskRemoveFromUnorderedEventList:
 4927              	.LVL358:
 4928              	.LFB35:
3239:FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4929              		.loc 1 3239 1 is_stmt 1 view -0
 4930              		.cfi_startproc
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 208


 4931              		@ args = 0, pretend = 0, frame = 0
 4932              		@ frame_needed = 0, uses_anonymous_args = 0
 4933              		@ link register save eliminated.
3240:FreeRTOS/Source/tasks.c **** 
 4934              		.loc 1 3240 5 view .LVU1382
3244:FreeRTOS/Source/tasks.c **** 
 4935              		.loc 1 3244 5 view .LVU1383
 4936 0000 324B     		ldr	r3, .L364
 4937 0002 1B68     		ldr	r3, [r3]
 4938 0004 43B9     		cbnz	r3, .L352
3244:FreeRTOS/Source/tasks.c **** 
 4939              		.loc 1 3244 5 view .LVU1384
 4940              	.LBB261:
 4941              	.LBI261:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4942              		.loc 2 194 34 view .LVU1385
 4943              	.LBB262:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4944              		.loc 2 196 9 view .LVU1386
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4945              		.loc 2 198 9 view .LVU1387
 4946              		.syntax unified
 4947              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4948 0006 4FF05003 			mov r3, #80												
 4949 000a 83F31188 		msr basepri, r3											
 4950 000e BFF36F8F 		isb														
 4951 0012 BFF34F8F 		dsb														
 4952              	
 4953              	@ 0 "" 2
 4954              	.LVL359:
 4955              		.thumb
 4956              		.syntax unified
 4957              	.L353:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4958              		.loc 2 198 9 is_stmt 0 view .LVU1388
 4959              	.LBE262:
 4960              	.LBE261:
3244:FreeRTOS/Source/tasks.c **** 
 4961              		.loc 1 3244 5 is_stmt 1 discriminator 1 view .LVU1389
3244:FreeRTOS/Source/tasks.c **** 
 4962              		.loc 1 3244 5 discriminator 1 view .LVU1390
 4963 0016 FEE7     		b	.L353
 4964              	.L352:
3244:FreeRTOS/Source/tasks.c **** 
 4965              		.loc 1 3244 52 discriminator 2 view .LVU1391
3247:FreeRTOS/Source/tasks.c **** 
 4966              		.loc 1 3247 5 discriminator 2 view .LVU1392
 4967 0018 41F00041 		orr	r1, r1, #-2147483648
 4968              	.LVL360:
3247:FreeRTOS/Source/tasks.c **** 
 4969              		.loc 1 3247 5 is_stmt 0 discriminator 2 view .LVU1393
 4970 001c 0160     		str	r1, [r0]
3251:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4971              		.loc 1 3251 5 is_stmt 1 discriminator 2 view .LVU1394
3251:FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4972              		.loc 1 3251 20 is_stmt 0 discriminator 2 view .LVU1395
 4973 001e C268     		ldr	r2, [r0, #12]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 209


 4974              	.LVL361:
3252:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4975              		.loc 1 3252 5 is_stmt 1 discriminator 2 view .LVU1396
 4976 0020 002A     		cmp	r2, #0
 4977 0022 44D0     		beq	.L361
3239:FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4978              		.loc 1 3239 1 is_stmt 0 discriminator 2 view .LVU1397
 4979 0024 30B4     		push	{r4, r5}
 4980              	.LCFI37:
 4981              		.cfi_def_cfa_offset 8
 4982              		.cfi_offset 4, -8
 4983              		.cfi_offset 5, -4
3252:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4984              		.loc 1 3252 35 is_stmt 1 discriminator 2 view .LVU1398
 4985              	.LBB263:
3253:FreeRTOS/Source/tasks.c **** 
 4986              		.loc 1 3253 5 discriminator 2 view .LVU1399
 4987 0026 0369     		ldr	r3, [r0, #16]
 4988              	.LVL362:
3253:FreeRTOS/Source/tasks.c **** 
 4989              		.loc 1 3253 5 discriminator 2 view .LVU1400
 4990 0028 4468     		ldr	r4, [r0, #4]
 4991 002a 8168     		ldr	r1, [r0, #8]
 4992 002c A160     		str	r1, [r4, #8]
3253:FreeRTOS/Source/tasks.c **** 
 4993              		.loc 1 3253 5 discriminator 2 view .LVU1401
 4994 002e 4468     		ldr	r4, [r0, #4]
 4995 0030 4C60     		str	r4, [r1, #4]
3253:FreeRTOS/Source/tasks.c **** 
 4996              		.loc 1 3253 5 discriminator 2 view .LVU1402
 4997 0032 5968     		ldr	r1, [r3, #4]
 4998 0034 8142     		cmp	r1, r0
 4999 0036 43D0     		beq	.L362
 5000              	.L356:
3253:FreeRTOS/Source/tasks.c **** 
 5001              		.loc 1 3253 5 discriminator 3 view .LVU1403
 5002 0038 0021     		movs	r1, #0
 5003 003a 0161     		str	r1, [r0, #16]
3253:FreeRTOS/Source/tasks.c **** 
 5004              		.loc 1 3253 5 discriminator 3 view .LVU1404
 5005 003c 1968     		ldr	r1, [r3]
 5006 003e 0139     		subs	r1, r1, #1
 5007 0040 1960     		str	r1, [r3]
 5008              	.LBE263:
3253:FreeRTOS/Source/tasks.c **** 
 5009              		.loc 1 3253 39 discriminator 3 view .LVU1405
 5010              	.LBB264:
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5011              		.loc 1 3272 5 discriminator 3 view .LVU1406
 5012 0042 5369     		ldr	r3, [r2, #20]
 5013              	.LVL363:
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5014              		.loc 1 3272 5 discriminator 3 view .LVU1407
 5015 0044 9068     		ldr	r0, [r2, #8]
 5016              	.LVL364:
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5017              		.loc 1 3272 5 is_stmt 0 discriminator 3 view .LVU1408
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 210


 5018 0046 D168     		ldr	r1, [r2, #12]
 5019 0048 8160     		str	r1, [r0, #8]
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5020              		.loc 1 3272 5 is_stmt 1 discriminator 3 view .LVU1409
 5021 004a 9068     		ldr	r0, [r2, #8]
 5022 004c 4860     		str	r0, [r1, #4]
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5023              		.loc 1 3272 5 discriminator 3 view .LVU1410
 5024 004e 5968     		ldr	r1, [r3, #4]
 5025 0050 101D     		adds	r0, r2, #4
 5026 0052 8142     		cmp	r1, r0
 5027 0054 37D0     		beq	.L363
 5028              	.L357:
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5029              		.loc 1 3272 5 discriminator 3 view .LVU1411
 5030 0056 0021     		movs	r1, #0
 5031 0058 5161     		str	r1, [r2, #20]
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5032              		.loc 1 3272 5 discriminator 3 view .LVU1412
 5033 005a 1968     		ldr	r1, [r3]
 5034 005c 0139     		subs	r1, r1, #1
 5035 005e 1960     		str	r1, [r3]
 5036              	.LBE264:
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5037              		.loc 1 3272 59 discriminator 3 view .LVU1413
3273:FreeRTOS/Source/tasks.c **** 
 5038              		.loc 1 3273 5 discriminator 3 view .LVU1414
3273:FreeRTOS/Source/tasks.c **** 
 5039              		.loc 1 3273 5 discriminator 3 view .LVU1415
 5040 0060 D36A     		ldr	r3, [r2, #44]
 5041              	.LVL365:
3273:FreeRTOS/Source/tasks.c **** 
 5042              		.loc 1 3273 5 is_stmt 0 discriminator 3 view .LVU1416
 5043 0062 0121     		movs	r1, #1
 5044 0064 9940     		lsls	r1, r1, r3
 5045 0066 1A4C     		ldr	r4, .L364+4
 5046 0068 2568     		ldr	r5, [r4]
 5047 006a 2943     		orrs	r1, r1, r5
 5048 006c 2160     		str	r1, [r4]
 5049              	.LBB265:
3273:FreeRTOS/Source/tasks.c **** 
 5050              		.loc 1 3273 5 is_stmt 1 discriminator 3 view .LVU1417
 5051 006e 1949     		ldr	r1, .L364+8
 5052 0070 03EB8303 		add	r3, r3, r3, lsl #2
 5053 0074 01EB8303 		add	r3, r1, r3, lsl #2
 5054 0078 5B68     		ldr	r3, [r3, #4]
 5055              	.LVL366:
3273:FreeRTOS/Source/tasks.c **** 
 5056              		.loc 1 3273 5 discriminator 3 view .LVU1418
3273:FreeRTOS/Source/tasks.c **** 
 5057              		.loc 1 3273 5 discriminator 3 view .LVU1419
3273:FreeRTOS/Source/tasks.c **** 
 5058              		.loc 1 3273 5 discriminator 3 view .LVU1420
 5059 007a 9360     		str	r3, [r2, #8]
3273:FreeRTOS/Source/tasks.c **** 
 5060              		.loc 1 3273 5 discriminator 3 view .LVU1421
 5061 007c 9C68     		ldr	r4, [r3, #8]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 211


 5062 007e D460     		str	r4, [r2, #12]
3273:FreeRTOS/Source/tasks.c **** 
 5063              		.loc 1 3273 5 discriminator 3 view .LVU1422
 5064 0080 6060     		str	r0, [r4, #4]
3273:FreeRTOS/Source/tasks.c **** 
 5065              		.loc 1 3273 5 discriminator 3 view .LVU1423
 5066 0082 9860     		str	r0, [r3, #8]
3273:FreeRTOS/Source/tasks.c **** 
 5067              		.loc 1 3273 5 discriminator 3 view .LVU1424
 5068 0084 D36A     		ldr	r3, [r2, #44]
 5069              	.LVL367:
3273:FreeRTOS/Source/tasks.c **** 
 5070              		.loc 1 3273 5 is_stmt 0 discriminator 3 view .LVU1425
 5071 0086 03EB8300 		add	r0, r3, r3, lsl #2
 5072 008a 8400     		lsls	r4, r0, #2
 5073 008c 01EB8000 		add	r0, r1, r0, lsl #2
 5074 0090 5061     		str	r0, [r2, #20]
3273:FreeRTOS/Source/tasks.c **** 
 5075              		.loc 1 3273 5 is_stmt 1 discriminator 3 view .LVU1426
 5076 0092 0859     		ldr	r0, [r1, r4]
 5077 0094 0130     		adds	r0, r0, #1
 5078 0096 0851     		str	r0, [r1, r4]
 5079              	.LBE265:
3273:FreeRTOS/Source/tasks.c **** 
 5080              		.loc 1 3273 5 discriminator 3 view .LVU1427
3273:FreeRTOS/Source/tasks.c **** 
 5081              		.loc 1 3273 44 discriminator 3 view .LVU1428
3275:FreeRTOS/Source/tasks.c ****     {
 5082              		.loc 1 3275 5 discriminator 3 view .LVU1429
3275:FreeRTOS/Source/tasks.c ****     {
 5083              		.loc 1 3275 23 is_stmt 0 discriminator 3 view .LVU1430
 5084 0098 D26A     		ldr	r2, [r2, #44]
 5085              	.LVL368:
3275:FreeRTOS/Source/tasks.c ****     {
 5086              		.loc 1 3275 50 discriminator 3 view .LVU1431
 5087 009a 0F4B     		ldr	r3, .L364+12
 5088 009c 1B68     		ldr	r3, [r3]
 5089 009e DB6A     		ldr	r3, [r3, #44]
3275:FreeRTOS/Source/tasks.c ****     {
 5090              		.loc 1 3275 7 discriminator 3 view .LVU1432
 5091 00a0 9A42     		cmp	r2, r3
 5092 00a2 02D9     		bls	.L351
3281:FreeRTOS/Source/tasks.c ****     }
 5093              		.loc 1 3281 9 is_stmt 1 view .LVU1433
3281:FreeRTOS/Source/tasks.c ****     }
 5094              		.loc 1 3281 23 is_stmt 0 view .LVU1434
 5095 00a4 0D4B     		ldr	r3, .L364+16
 5096 00a6 0122     		movs	r2, #1
 5097 00a8 1A60     		str	r2, [r3]
 5098              	.L351:
3283:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5099              		.loc 1 3283 1 view .LVU1435
 5100 00aa 30BC     		pop	{r4, r5}
 5101              	.LCFI38:
 5102              		.cfi_restore 5
 5103              		.cfi_restore 4
 5104              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 212


 5105 00ac 7047     		bx	lr
 5106              	.LVL369:
 5107              	.L361:
3252:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5108              		.loc 1 3252 5 is_stmt 1 view .LVU1436
 5109              	.LBB266:
 5110              	.LBI266:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5111              		.loc 2 194 34 view .LVU1437
 5112              	.LBB267:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5113              		.loc 2 196 9 view .LVU1438
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5114              		.loc 2 198 9 view .LVU1439
 5115              		.syntax unified
 5116              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5117 00ae 4FF05003 			mov r3, #80												
 5118 00b2 83F31188 		msr basepri, r3											
 5119 00b6 BFF36F8F 		isb														
 5120 00ba BFF34F8F 		dsb														
 5121              	
 5122              	@ 0 "" 2
 5123              	.LVL370:
 5124              		.thumb
 5125              		.syntax unified
 5126              	.L355:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5127              		.loc 2 198 9 is_stmt 0 view .LVU1440
 5128              	.LBE267:
 5129              	.LBE266:
3252:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5130              		.loc 1 3252 5 is_stmt 1 discriminator 2 view .LVU1441
3252:FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5131              		.loc 1 3252 5 discriminator 2 view .LVU1442
 5132 00be FEE7     		b	.L355
 5133              	.LVL371:
 5134              	.L362:
 5135              	.LCFI39:
 5136              		.cfi_def_cfa_offset 8
 5137              		.cfi_offset 4, -8
 5138              		.cfi_offset 5, -4
 5139              	.LBB268:
3253:FreeRTOS/Source/tasks.c **** 
 5140              		.loc 1 3253 5 discriminator 1 view .LVU1443
 5141 00c0 8168     		ldr	r1, [r0, #8]
 5142 00c2 5960     		str	r1, [r3, #4]
 5143 00c4 B8E7     		b	.L356
 5144              	.LVL372:
 5145              	.L363:
3253:FreeRTOS/Source/tasks.c **** 
 5146              		.loc 1 3253 5 is_stmt 0 discriminator 1 view .LVU1444
 5147              	.LBE268:
 5148              	.LBB269:
3272:FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5149              		.loc 1 3272 5 is_stmt 1 discriminator 1 view .LVU1445
 5150 00c6 D168     		ldr	r1, [r2, #12]
 5151 00c8 5960     		str	r1, [r3, #4]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 213


 5152 00ca C4E7     		b	.L357
 5153              	.L365:
 5154              		.align	2
 5155              	.L364:
 5156 00cc 00000000 		.word	uxSchedulerSuspended
 5157 00d0 00000000 		.word	uxTopReadyPriority
 5158 00d4 00000000 		.word	pxReadyTasksLists
 5159 00d8 00000000 		.word	pxCurrentTCB
 5160 00dc 00000000 		.word	xYieldPending
 5161              	.LBE269:
 5162              		.cfi_endproc
 5163              	.LFE35:
 5165              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5166              		.align	1
 5167              		.global	vTaskSetTimeOutState
 5168              		.syntax unified
 5169              		.thumb
 5170              		.thumb_func
 5172              	vTaskSetTimeOutState:
 5173              	.LVL373:
 5174              	.LFB36:
3287:FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
 5175              		.loc 1 3287 1 view -0
 5176              		.cfi_startproc
 5177              		@ args = 0, pretend = 0, frame = 0
 5178              		@ frame_needed = 0, uses_anonymous_args = 0
3288:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 5179              		.loc 1 3288 5 view .LVU1447
 5180 0000 60B1     		cbz	r0, .L371
3287:FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
 5181              		.loc 1 3287 1 is_stmt 0 discriminator 2 view .LVU1448
 5182 0002 10B5     		push	{r4, lr}
 5183              	.LCFI40:
 5184              		.cfi_def_cfa_offset 8
 5185              		.cfi_offset 4, -8
 5186              		.cfi_offset 14, -4
 5187 0004 0446     		mov	r4, r0
3288:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 5188              		.loc 1 3288 30 is_stmt 1 discriminator 2 view .LVU1449
3289:FreeRTOS/Source/tasks.c ****     {
 5189              		.loc 1 3289 5 discriminator 2 view .LVU1450
 5190 0006 FFF7FEFF 		bl	vPortEnterCritical
 5191              	.LVL374:
3291:FreeRTOS/Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 5192              		.loc 1 3291 9 discriminator 2 view .LVU1451
3291:FreeRTOS/Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 5193              		.loc 1 3291 35 is_stmt 0 discriminator 2 view .LVU1452
 5194 000a 094B     		ldr	r3, .L372
 5195 000c 1B68     		ldr	r3, [r3]
 5196 000e 2360     		str	r3, [r4]
3292:FreeRTOS/Source/tasks.c ****     }
 5197              		.loc 1 3292 9 is_stmt 1 discriminator 2 view .LVU1453
3292:FreeRTOS/Source/tasks.c ****     }
 5198              		.loc 1 3292 36 is_stmt 0 discriminator 2 view .LVU1454
 5199 0010 084B     		ldr	r3, .L372+4
 5200 0012 1B68     		ldr	r3, [r3]
 5201 0014 6360     		str	r3, [r4, #4]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 214


3294:FreeRTOS/Source/tasks.c **** }
 5202              		.loc 1 3294 5 is_stmt 1 discriminator 2 view .LVU1455
 5203 0016 FFF7FEFF 		bl	vPortExitCritical
 5204              	.LVL375:
3295:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5205              		.loc 1 3295 1 is_stmt 0 discriminator 2 view .LVU1456
 5206 001a 10BD     		pop	{r4, pc}
 5207              	.LVL376:
 5208              	.L371:
 5209              	.LCFI41:
 5210              		.cfi_def_cfa_offset 0
 5211              		.cfi_restore 4
 5212              		.cfi_restore 14
3288:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 5213              		.loc 1 3288 5 is_stmt 1 view .LVU1457
 5214              	.LBB270:
 5215              	.LBI270:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5216              		.loc 2 194 34 view .LVU1458
 5217              	.LBB271:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5218              		.loc 2 196 9 view .LVU1459
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5219              		.loc 2 198 9 view .LVU1460
 5220              		.syntax unified
 5221              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5222 001c 4FF05003 			mov r3, #80												
 5223 0020 83F31188 		msr basepri, r3											
 5224 0024 BFF36F8F 		isb														
 5225 0028 BFF34F8F 		dsb														
 5226              	
 5227              	@ 0 "" 2
 5228              	.LVL377:
 5229              		.thumb
 5230              		.syntax unified
 5231              	.L368:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5232              		.loc 2 198 9 is_stmt 0 view .LVU1461
 5233              	.LBE271:
 5234              	.LBE270:
3288:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 5235              		.loc 1 3288 5 is_stmt 1 discriminator 1 view .LVU1462
3288:FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 5236              		.loc 1 3288 5 discriminator 1 view .LVU1463
 5237 002c FEE7     		b	.L368
 5238              	.L373:
 5239 002e 00BF     		.align	2
 5240              	.L372:
 5241 0030 00000000 		.word	xNumOfOverflows
 5242 0034 00000000 		.word	xTickCount
 5243              		.cfi_endproc
 5244              	.LFE36:
 5246              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 5247              		.align	1
 5248              		.global	vTaskInternalSetTimeOutState
 5249              		.syntax unified
 5250              		.thumb
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 215


 5251              		.thumb_func
 5253              	vTaskInternalSetTimeOutState:
 5254              	.LVL378:
 5255              	.LFB37:
3299:FreeRTOS/Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
 5256              		.loc 1 3299 1 view -0
 5257              		.cfi_startproc
 5258              		@ args = 0, pretend = 0, frame = 0
 5259              		@ frame_needed = 0, uses_anonymous_args = 0
 5260              		@ link register save eliminated.
3301:FreeRTOS/Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5261              		.loc 1 3301 5 view .LVU1465
3301:FreeRTOS/Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5262              		.loc 1 3301 31 is_stmt 0 view .LVU1466
 5263 0000 034B     		ldr	r3, .L375
 5264 0002 1B68     		ldr	r3, [r3]
 5265 0004 0360     		str	r3, [r0]
3302:FreeRTOS/Source/tasks.c **** }
 5266              		.loc 1 3302 5 is_stmt 1 view .LVU1467
3302:FreeRTOS/Source/tasks.c **** }
 5267              		.loc 1 3302 32 is_stmt 0 view .LVU1468
 5268 0006 034B     		ldr	r3, .L375+4
 5269 0008 1B68     		ldr	r3, [r3]
 5270 000a 4360     		str	r3, [r0, #4]
3303:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5271              		.loc 1 3303 1 view .LVU1469
 5272 000c 7047     		bx	lr
 5273              	.L376:
 5274 000e 00BF     		.align	2
 5275              	.L375:
 5276 0010 00000000 		.word	xNumOfOverflows
 5277 0014 00000000 		.word	xTickCount
 5278              		.cfi_endproc
 5279              	.LFE37:
 5281              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5282              		.align	1
 5283              		.global	xTaskCheckForTimeOut
 5284              		.syntax unified
 5285              		.thumb
 5286              		.thumb_func
 5288              	xTaskCheckForTimeOut:
 5289              	.LVL379:
 5290              	.LFB38:
3308:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 5291              		.loc 1 3308 1 is_stmt 1 view -0
 5292              		.cfi_startproc
 5293              		@ args = 0, pretend = 0, frame = 0
 5294              		@ frame_needed = 0, uses_anonymous_args = 0
3308:FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 5295              		.loc 1 3308 1 is_stmt 0 view .LVU1471
 5296 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5297              	.LCFI42:
 5298              		.cfi_def_cfa_offset 24
 5299              		.cfi_offset 3, -24
 5300              		.cfi_offset 4, -20
 5301              		.cfi_offset 5, -16
 5302              		.cfi_offset 6, -12
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 216


 5303              		.cfi_offset 7, -8
 5304              		.cfi_offset 14, -4
3309:FreeRTOS/Source/tasks.c **** 
 5305              		.loc 1 3309 5 is_stmt 1 view .LVU1472
3311:FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 5306              		.loc 1 3311 5 view .LVU1473
 5307 0002 B8B1     		cbz	r0, .L387
 5308 0004 0C46     		mov	r4, r1
 5309 0006 0546     		mov	r5, r0
3311:FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 5310              		.loc 1 3311 30 discriminator 2 view .LVU1474
3312:FreeRTOS/Source/tasks.c **** 
 5311              		.loc 1 3312 5 discriminator 2 view .LVU1475
 5312 0008 E9B1     		cbz	r1, .L388
3312:FreeRTOS/Source/tasks.c **** 
 5313              		.loc 1 3312 34 discriminator 2 view .LVU1476
3314:FreeRTOS/Source/tasks.c ****     {
 5314              		.loc 1 3314 5 discriminator 2 view .LVU1477
 5315 000a FFF7FEFF 		bl	vPortEnterCritical
 5316              	.LVL380:
 5317              	.LBB272:
3317:FreeRTOS/Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5318              		.loc 1 3317 9 discriminator 2 view .LVU1478
3317:FreeRTOS/Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5319              		.loc 1 3317 26 is_stmt 0 discriminator 2 view .LVU1479
 5320 000e 1C4B     		ldr	r3, .L390
 5321 0010 1968     		ldr	r1, [r3]
 5322              	.LVL381:
3318:FreeRTOS/Source/tasks.c **** 
 5323              		.loc 1 3318 9 is_stmt 1 discriminator 2 view .LVU1480
3318:FreeRTOS/Source/tasks.c **** 
 5324              		.loc 1 3318 68 is_stmt 0 discriminator 2 view .LVU1481
 5325 0012 6B68     		ldr	r3, [r5, #4]
3318:FreeRTOS/Source/tasks.c **** 
 5326              		.loc 1 3318 26 discriminator 2 view .LVU1482
 5327 0014 C81A     		subs	r0, r1, r3
 5328              	.LVL382:
3332:FreeRTOS/Source/tasks.c ****             {
 5329              		.loc 1 3332 13 is_stmt 1 discriminator 2 view .LVU1483
3332:FreeRTOS/Source/tasks.c ****             {
 5330              		.loc 1 3332 17 is_stmt 0 discriminator 2 view .LVU1484
 5331 0016 2268     		ldr	r2, [r4]
3332:FreeRTOS/Source/tasks.c ****             {
 5332              		.loc 1 3332 15 discriminator 2 view .LVU1485
 5333 0018 B2F1FF3F 		cmp	r2, #-1
 5334 001c 2AD0     		beq	.L385
3342:FreeRTOS/Source/tasks.c ****         {
 5335              		.loc 1 3342 9 is_stmt 1 view .LVU1486
3342:FreeRTOS/Source/tasks.c ****         {
 5336              		.loc 1 3342 31 is_stmt 0 view .LVU1487
 5337 001e 194E     		ldr	r6, .L390+4
 5338 0020 3668     		ldr	r6, [r6]
3342:FreeRTOS/Source/tasks.c ****         {
 5339              		.loc 1 3342 11 view .LVU1488
 5340 0022 2F68     		ldr	r7, [r5]
 5341 0024 B742     		cmp	r7, r6
 5342 0026 17D0     		beq	.L383
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 217


3342:FreeRTOS/Source/tasks.c ****         {
 5343              		.loc 1 3342 62 discriminator 1 view .LVU1489
 5344 0028 8B42     		cmp	r3, r1
 5345 002a 15D8     		bhi	.L383
3349:FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5346              		.loc 1 3349 13 is_stmt 1 view .LVU1490
 5347              	.LVL383:
3350:FreeRTOS/Source/tasks.c ****         }
 5348              		.loc 1 3350 13 view .LVU1491
3350:FreeRTOS/Source/tasks.c ****         }
 5349              		.loc 1 3350 28 is_stmt 0 view .LVU1492
 5350 002c 0023     		movs	r3, #0
 5351 002e 2360     		str	r3, [r4]
3349:FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5352              		.loc 1 3349 21 view .LVU1493
 5353 0030 0124     		movs	r4, #1
 5354              	.LVL384:
3350:FreeRTOS/Source/tasks.c ****         }
 5355              		.loc 1 3350 28 view .LVU1494
 5356 0032 20E0     		b	.L382
 5357              	.LVL385:
 5358              	.L387:
3350:FreeRTOS/Source/tasks.c ****         }
 5359              		.loc 1 3350 28 view .LVU1495
 5360              	.LBE272:
3311:FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 5361              		.loc 1 3311 5 is_stmt 1 view .LVU1496
 5362              	.LBB273:
 5363              	.LBI273:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5364              		.loc 2 194 34 view .LVU1497
 5365              	.LBB274:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5366              		.loc 2 196 9 view .LVU1498
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5367              		.loc 2 198 9 view .LVU1499
 5368              		.syntax unified
 5369              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5370 0034 4FF05003 			mov r3, #80												
 5371 0038 83F31188 		msr basepri, r3											
 5372 003c BFF36F8F 		isb														
 5373 0040 BFF34F8F 		dsb														
 5374              	
 5375              	@ 0 "" 2
 5376              	.LVL386:
 5377              		.thumb
 5378              		.syntax unified
 5379              	.L379:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5380              		.loc 2 198 9 is_stmt 0 view .LVU1500
 5381              	.LBE274:
 5382              	.LBE273:
3311:FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 5383              		.loc 1 3311 5 is_stmt 1 discriminator 1 view .LVU1501
3311:FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 5384              		.loc 1 3311 5 discriminator 1 view .LVU1502
 5385 0044 FEE7     		b	.L379
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 218


 5386              	.L388:
3312:FreeRTOS/Source/tasks.c **** 
 5387              		.loc 1 3312 5 view .LVU1503
 5388              	.LBB275:
 5389              	.LBI275:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5390              		.loc 2 194 34 view .LVU1504
 5391              	.LBB276:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5392              		.loc 2 196 9 view .LVU1505
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5393              		.loc 2 198 9 view .LVU1506
 5394              		.syntax unified
 5395              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5396 0046 4FF05003 			mov r3, #80												
 5397 004a 83F31188 		msr basepri, r3											
 5398 004e BFF36F8F 		isb														
 5399 0052 BFF34F8F 		dsb														
 5400              	
 5401              	@ 0 "" 2
 5402              	.LVL387:
 5403              		.thumb
 5404              		.syntax unified
 5405              	.L381:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5406              		.loc 2 198 9 is_stmt 0 view .LVU1507
 5407              	.LBE276:
 5408              	.LBE275:
3312:FreeRTOS/Source/tasks.c **** 
 5409              		.loc 1 3312 5 is_stmt 1 discriminator 2 view .LVU1508
3312:FreeRTOS/Source/tasks.c **** 
 5410              		.loc 1 3312 5 discriminator 2 view .LVU1509
 5411 0056 FEE7     		b	.L381
 5412              	.LVL388:
 5413              	.L383:
 5414              	.LBB277:
3352:FreeRTOS/Source/tasks.c ****         {
 5415              		.loc 1 3352 14 view .LVU1510
3352:FreeRTOS/Source/tasks.c ****         {
 5416              		.loc 1 3352 16 is_stmt 0 view .LVU1511
 5417 0058 8242     		cmp	r2, r0
 5418 005a 03D8     		bhi	.L389
3361:FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
 5419              		.loc 1 3361 13 is_stmt 1 view .LVU1512
3361:FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
 5420              		.loc 1 3361 28 is_stmt 0 view .LVU1513
 5421 005c 0023     		movs	r3, #0
 5422 005e 2360     		str	r3, [r4]
3362:FreeRTOS/Source/tasks.c ****         }
 5423              		.loc 1 3362 13 is_stmt 1 view .LVU1514
 5424              	.LVL389:
3362:FreeRTOS/Source/tasks.c ****         }
 5425              		.loc 1 3362 21 is_stmt 0 view .LVU1515
 5426 0060 0124     		movs	r4, #1
 5427              	.LVL390:
3362:FreeRTOS/Source/tasks.c ****         }
 5428              		.loc 1 3362 21 view .LVU1516
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 219


 5429 0062 08E0     		b	.L382
 5430              	.LVL391:
 5431              	.L389:
3355:FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5432              		.loc 1 3355 13 is_stmt 1 view .LVU1517
3355:FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5433              		.loc 1 3355 28 is_stmt 0 view .LVU1518
 5434 0064 5B1A     		subs	r3, r3, r1
 5435 0066 1344     		add	r3, r3, r2
 5436 0068 2360     		str	r3, [r4]
3356:FreeRTOS/Source/tasks.c ****             xReturn = pdFALSE;
 5437              		.loc 1 3356 13 is_stmt 1 view .LVU1519
 5438 006a 2846     		mov	r0, r5
 5439              	.LVL392:
3356:FreeRTOS/Source/tasks.c ****             xReturn = pdFALSE;
 5440              		.loc 1 3356 13 is_stmt 0 view .LVU1520
 5441 006c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 5442              	.LVL393:
3357:FreeRTOS/Source/tasks.c ****         }
 5443              		.loc 1 3357 13 is_stmt 1 view .LVU1521
3357:FreeRTOS/Source/tasks.c ****         }
 5444              		.loc 1 3357 21 is_stmt 0 view .LVU1522
 5445 0070 0024     		movs	r4, #0
 5446              	.LVL394:
3357:FreeRTOS/Source/tasks.c ****         }
 5447              		.loc 1 3357 21 view .LVU1523
 5448 0072 00E0     		b	.L382
 5449              	.LVL395:
 5450              	.L385:
3337:FreeRTOS/Source/tasks.c ****             }
 5451              		.loc 1 3337 25 view .LVU1524
 5452 0074 0024     		movs	r4, #0
 5453              	.LVL396:
 5454              	.L382:
3337:FreeRTOS/Source/tasks.c ****             }
 5455              		.loc 1 3337 25 view .LVU1525
 5456              	.LBE277:
3365:FreeRTOS/Source/tasks.c **** 
 5457              		.loc 1 3365 5 is_stmt 1 view .LVU1526
 5458 0076 FFF7FEFF 		bl	vPortExitCritical
 5459              	.LVL397:
3367:FreeRTOS/Source/tasks.c **** }
 5460              		.loc 1 3367 5 view .LVU1527
3368:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5461              		.loc 1 3368 1 is_stmt 0 view .LVU1528
 5462 007a 2046     		mov	r0, r4
 5463 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5464              	.LVL398:
 5465              	.L391:
3368:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5466              		.loc 1 3368 1 view .LVU1529
 5467 007e 00BF     		.align	2
 5468              	.L390:
 5469 0080 00000000 		.word	xTickCount
 5470 0084 00000000 		.word	xNumOfOverflows
 5471              		.cfi_endproc
 5472              	.LFE38:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 220


 5474              		.section	.text.vTaskMissedYield,"ax",%progbits
 5475              		.align	1
 5476              		.global	vTaskMissedYield
 5477              		.syntax unified
 5478              		.thumb
 5479              		.thumb_func
 5481              	vTaskMissedYield:
 5482              	.LFB39:
3372:FreeRTOS/Source/tasks.c ****     xYieldPending = pdTRUE;
 5483              		.loc 1 3372 1 is_stmt 1 view -0
 5484              		.cfi_startproc
 5485              		@ args = 0, pretend = 0, frame = 0
 5486              		@ frame_needed = 0, uses_anonymous_args = 0
 5487              		@ link register save eliminated.
3373:FreeRTOS/Source/tasks.c **** }
 5488              		.loc 1 3373 5 view .LVU1531
3373:FreeRTOS/Source/tasks.c **** }
 5489              		.loc 1 3373 19 is_stmt 0 view .LVU1532
 5490 0000 014B     		ldr	r3, .L393
 5491 0002 0122     		movs	r2, #1
 5492 0004 1A60     		str	r2, [r3]
3374:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5493              		.loc 1 3374 1 view .LVU1533
 5494 0006 7047     		bx	lr
 5495              	.L394:
 5496              		.align	2
 5497              	.L393:
 5498 0008 00000000 		.word	xYieldPending
 5499              		.cfi_endproc
 5500              	.LFE39:
 5502              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5503              		.align	1
 5504              		.global	uxTaskGetTaskNumber
 5505              		.syntax unified
 5506              		.thumb
 5507              		.thumb_func
 5509              	uxTaskGetTaskNumber:
 5510              	.LVL399:
 5511              	.LFB40:
3380:FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
 5512              		.loc 1 3380 5 is_stmt 1 view -0
 5513              		.cfi_startproc
 5514              		@ args = 0, pretend = 0, frame = 0
 5515              		@ frame_needed = 0, uses_anonymous_args = 0
 5516              		@ link register save eliminated.
3381:FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 5517              		.loc 1 3381 9 view .LVU1535
3382:FreeRTOS/Source/tasks.c **** 
 5518              		.loc 1 3382 9 view .LVU1536
3384:FreeRTOS/Source/tasks.c ****         {
 5519              		.loc 1 3384 9 view .LVU1537
3384:FreeRTOS/Source/tasks.c ****         {
 5520              		.loc 1 3384 11 is_stmt 0 view .LVU1538
 5521 0000 08B1     		cbz	r0, .L397
3386:FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 5522              		.loc 1 3386 13 is_stmt 1 view .LVU1539
 5523              	.LVL400:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 221


3387:FreeRTOS/Source/tasks.c ****         }
 5524              		.loc 1 3387 13 view .LVU1540
3387:FreeRTOS/Source/tasks.c ****         }
 5525              		.loc 1 3387 22 is_stmt 0 view .LVU1541
 5526 0002 406C     		ldr	r0, [r0, #68]
 5527              	.LVL401:
3387:FreeRTOS/Source/tasks.c ****         }
 5528              		.loc 1 3387 22 view .LVU1542
 5529 0004 7047     		bx	lr
 5530              	.LVL402:
 5531              	.L397:
3391:FreeRTOS/Source/tasks.c ****         }
 5532              		.loc 1 3391 22 view .LVU1543
 5533 0006 0020     		movs	r0, #0
 5534              	.LVL403:
3394:FreeRTOS/Source/tasks.c ****     }
 5535              		.loc 1 3394 9 is_stmt 1 view .LVU1544
3395:FreeRTOS/Source/tasks.c **** 
 5536              		.loc 1 3395 5 is_stmt 0 view .LVU1545
 5537 0008 7047     		bx	lr
 5538              		.cfi_endproc
 5539              	.LFE40:
 5541              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5542              		.align	1
 5543              		.global	vTaskSetTaskNumber
 5544              		.syntax unified
 5545              		.thumb
 5546              		.thumb_func
 5548              	vTaskSetTaskNumber:
 5549              	.LVL404:
 5550              	.LFB41:
3404:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 5551              		.loc 1 3404 5 is_stmt 1 view -0
 5552              		.cfi_startproc
 5553              		@ args = 0, pretend = 0, frame = 0
 5554              		@ frame_needed = 0, uses_anonymous_args = 0
 5555              		@ link register save eliminated.
3405:FreeRTOS/Source/tasks.c **** 
 5556              		.loc 1 3405 9 view .LVU1547
3407:FreeRTOS/Source/tasks.c ****         {
 5557              		.loc 1 3407 9 view .LVU1548
3407:FreeRTOS/Source/tasks.c ****         {
 5558              		.loc 1 3407 11 is_stmt 0 view .LVU1549
 5559 0000 00B1     		cbz	r0, .L398
3409:FreeRTOS/Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 5560              		.loc 1 3409 13 is_stmt 1 view .LVU1550
 5561              	.LVL405:
3410:FreeRTOS/Source/tasks.c ****         }
 5562              		.loc 1 3410 13 view .LVU1551
3410:FreeRTOS/Source/tasks.c ****         }
 5563              		.loc 1 3410 33 is_stmt 0 view .LVU1552
 5564 0002 4164     		str	r1, [r0, #68]
 5565              	.LVL406:
 5566              	.L398:
3412:FreeRTOS/Source/tasks.c **** 
 5567              		.loc 1 3412 5 view .LVU1553
 5568 0004 7047     		bx	lr
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 222


 5569              		.cfi_endproc
 5570              	.LFE41:
 5572              		.section	.text.vTaskGetInfo,"ax",%progbits
 5573              		.align	1
 5574              		.global	vTaskGetInfo
 5575              		.syntax unified
 5576              		.thumb
 5577              		.thumb_func
 5579              	vTaskGetInfo:
 5580              	.LVL407:
 5581              	.LFB45:
3723:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 5582              		.loc 1 3723 5 is_stmt 1 view -0
 5583              		.cfi_startproc
 5584              		@ args = 0, pretend = 0, frame = 0
 5585              		@ frame_needed = 0, uses_anonymous_args = 0
3723:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 5586              		.loc 1 3723 5 is_stmt 0 view .LVU1555
 5587 0000 70B5     		push	{r4, r5, r6, lr}
 5588              	.LCFI43:
 5589              		.cfi_def_cfa_offset 16
 5590              		.cfi_offset 4, -16
 5591              		.cfi_offset 5, -12
 5592              		.cfi_offset 6, -8
 5593              		.cfi_offset 14, -4
 5594 0002 0C46     		mov	r4, r1
 5595 0004 1646     		mov	r6, r2
3724:FreeRTOS/Source/tasks.c **** 
 5596              		.loc 1 3724 9 is_stmt 1 view .LVU1556
3727:FreeRTOS/Source/tasks.c **** 
 5597              		.loc 1 3727 9 view .LVU1557
3727:FreeRTOS/Source/tasks.c **** 
 5598              		.loc 1 3727 17 is_stmt 0 view .LVU1558
 5599 0006 0546     		mov	r5, r0
 5600 0008 D0B1     		cbz	r0, .L409
 5601              	.LVL408:
 5602              	.L401:
3729:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5603              		.loc 1 3729 9 is_stmt 1 discriminator 4 view .LVU1559
3729:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5604              		.loc 1 3729 31 is_stmt 0 discriminator 4 view .LVU1560
 5605 000a 2560     		str	r5, [r4]
3730:FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5606              		.loc 1 3730 9 is_stmt 1 discriminator 4 view .LVU1561
3730:FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5607              		.loc 1 3730 53 is_stmt 0 discriminator 4 view .LVU1562
 5608 000c 05F13402 		add	r2, r5, #52
3730:FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5609              		.loc 1 3730 34 discriminator 4 view .LVU1563
 5610 0010 6260     		str	r2, [r4, #4]
3731:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5611              		.loc 1 3731 9 is_stmt 1 discriminator 4 view .LVU1564
3731:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5612              		.loc 1 3731 48 is_stmt 0 discriminator 4 view .LVU1565
 5613 0012 EA6A     		ldr	r2, [r5, #44]
3731:FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5614              		.loc 1 3731 41 discriminator 4 view .LVU1566
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 223


 5615 0014 2261     		str	r2, [r4, #16]
3732:FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 5616              		.loc 1 3732 9 is_stmt 1 discriminator 4 view .LVU1567
3732:FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 5617              		.loc 1 3732 42 is_stmt 0 discriminator 4 view .LVU1568
 5618 0016 2A6B     		ldr	r2, [r5, #48]
3732:FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 5619              		.loc 1 3732 35 discriminator 4 view .LVU1569
 5620 0018 E261     		str	r2, [r4, #28]
3737:FreeRTOS/Source/tasks.c **** 
 5621              		.loc 1 3737 9 is_stmt 1 discriminator 4 view .LVU1570
3737:FreeRTOS/Source/tasks.c **** 
 5622              		.loc 1 3737 42 is_stmt 0 discriminator 4 view .LVU1571
 5623 001a 2A6C     		ldr	r2, [r5, #64]
3737:FreeRTOS/Source/tasks.c **** 
 5624              		.loc 1 3737 35 discriminator 4 view .LVU1572
 5625 001c A260     		str	r2, [r4, #8]
3741:FreeRTOS/Source/tasks.c ****         }
 5626              		.loc 1 3741 13 is_stmt 1 discriminator 4 view .LVU1573
3741:FreeRTOS/Source/tasks.c ****         }
 5627              		.loc 1 3741 49 is_stmt 0 discriminator 4 view .LVU1574
 5628 001e AA6C     		ldr	r2, [r5, #72]
3741:FreeRTOS/Source/tasks.c ****         }
 5629              		.loc 1 3741 42 discriminator 4 view .LVU1575
 5630 0020 6261     		str	r2, [r4, #20]
3755:FreeRTOS/Source/tasks.c ****         }
 5631              		.loc 1 3755 13 is_stmt 1 discriminator 4 view .LVU1576
3755:FreeRTOS/Source/tasks.c ****         }
 5632              		.loc 1 3755 44 is_stmt 0 discriminator 4 view .LVU1577
 5633 0022 0022     		movs	r2, #0
 5634 0024 A261     		str	r2, [r4, #24]
3762:FreeRTOS/Source/tasks.c ****         {
 5635              		.loc 1 3762 9 is_stmt 1 discriminator 4 view .LVU1578
3762:FreeRTOS/Source/tasks.c ****         {
 5636              		.loc 1 3762 11 is_stmt 0 discriminator 4 view .LVU1579
 5637 0026 052B     		cmp	r3, #5
 5638 0028 19D0     		beq	.L402
3764:FreeRTOS/Source/tasks.c ****             {
 5639              		.loc 1 3764 13 is_stmt 1 view .LVU1580
3764:FreeRTOS/Source/tasks.c ****             {
 5640              		.loc 1 3764 23 is_stmt 0 view .LVU1581
 5641 002a 124A     		ldr	r2, .L413
 5642 002c 1268     		ldr	r2, [r2]
3764:FreeRTOS/Source/tasks.c ****             {
 5643              		.loc 1 3764 15 view .LVU1582
 5644 002e AA42     		cmp	r2, r5
 5645 0030 09D0     		beq	.L410
3770:FreeRTOS/Source/tasks.c **** 
 5646              		.loc 1 3770 17 is_stmt 1 view .LVU1583
3770:FreeRTOS/Source/tasks.c **** 
 5647              		.loc 1 3770 45 is_stmt 0 view .LVU1584
 5648 0032 2373     		strb	r3, [r4, #12]
3777:FreeRTOS/Source/tasks.c ****                     {
 5649              		.loc 1 3777 21 is_stmt 1 view .LVU1585
3777:FreeRTOS/Source/tasks.c ****                     {
 5650              		.loc 1 3777 23 is_stmt 0 view .LVU1586
 5651 0034 032B     		cmp	r3, #3
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 224


 5652 0036 09D0     		beq	.L411
 5653              	.LVL409:
 5654              	.L404:
3799:FreeRTOS/Source/tasks.c ****         {
 5655              		.loc 1 3799 9 is_stmt 1 view .LVU1587
3799:FreeRTOS/Source/tasks.c ****         {
 5656              		.loc 1 3799 11 is_stmt 0 view .LVU1588
 5657 0038 B6B9     		cbnz	r6, .L412
3813:FreeRTOS/Source/tasks.c ****         }
 5658              		.loc 1 3813 13 is_stmt 1 view .LVU1589
3813:FreeRTOS/Source/tasks.c ****         }
 5659              		.loc 1 3813 48 is_stmt 0 view .LVU1590
 5660 003a 0023     		movs	r3, #0
 5661 003c 2384     		strh	r3, [r4, #32]	@ movhi
 5662              	.L400:
3815:FreeRTOS/Source/tasks.c **** 
 5663              		.loc 1 3815 5 view .LVU1591
 5664 003e 70BD     		pop	{r4, r5, r6, pc}
 5665              	.LVL410:
 5666              	.L409:
3727:FreeRTOS/Source/tasks.c **** 
 5667              		.loc 1 3727 17 discriminator 1 view .LVU1592
 5668 0040 0C4A     		ldr	r2, .L413
 5669              	.LVL411:
3727:FreeRTOS/Source/tasks.c **** 
 5670              		.loc 1 3727 17 discriminator 1 view .LVU1593
 5671 0042 1568     		ldr	r5, [r2]
 5672              	.LVL412:
3727:FreeRTOS/Source/tasks.c **** 
 5673              		.loc 1 3727 17 discriminator 1 view .LVU1594
 5674 0044 E1E7     		b	.L401
 5675              	.LVL413:
 5676              	.L410:
3766:FreeRTOS/Source/tasks.c ****             }
 5677              		.loc 1 3766 17 is_stmt 1 view .LVU1595
3766:FreeRTOS/Source/tasks.c ****             }
 5678              		.loc 1 3766 45 is_stmt 0 view .LVU1596
 5679 0046 0023     		movs	r3, #0
 5680              	.LVL414:
3766:FreeRTOS/Source/tasks.c ****             }
 5681              		.loc 1 3766 45 view .LVU1597
 5682 0048 2373     		strb	r3, [r4, #12]
 5683 004a F5E7     		b	.L404
 5684              	.LVL415:
 5685              	.L411:
3779:FreeRTOS/Source/tasks.c ****                         {
 5686              		.loc 1 3779 25 is_stmt 1 view .LVU1598
 5687 004c FFF7FEFF 		bl	vTaskSuspendAll
 5688              	.LVL416:
3781:FreeRTOS/Source/tasks.c ****                             {
 5689              		.loc 1 3781 29 view .LVU1599
3781:FreeRTOS/Source/tasks.c ****                             {
 5690              		.loc 1 3781 33 is_stmt 0 view .LVU1600
 5691 0050 AB6A     		ldr	r3, [r5, #40]
3781:FreeRTOS/Source/tasks.c ****                             {
 5692              		.loc 1 3781 31 view .LVU1601
 5693 0052 0BB1     		cbz	r3, .L405
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 225


3783:FreeRTOS/Source/tasks.c ****                             }
 5694              		.loc 1 3783 33 is_stmt 1 view .LVU1602
3783:FreeRTOS/Source/tasks.c ****                             }
 5695              		.loc 1 3783 61 is_stmt 0 view .LVU1603
 5696 0054 0223     		movs	r3, #2
 5697 0056 2373     		strb	r3, [r4, #12]
 5698              	.L405:
3786:FreeRTOS/Source/tasks.c ****                     }
 5699              		.loc 1 3786 25 is_stmt 1 view .LVU1604
3786:FreeRTOS/Source/tasks.c ****                     }
 5700              		.loc 1 3786 34 is_stmt 0 view .LVU1605
 5701 0058 FFF7FEFF 		bl	xTaskResumeAll
 5702              	.LVL417:
 5703 005c ECE7     		b	.L404
 5704              	.LVL418:
 5705              	.L402:
3794:FreeRTOS/Source/tasks.c ****         }
 5706              		.loc 1 3794 13 is_stmt 1 view .LVU1606
3794:FreeRTOS/Source/tasks.c ****         }
 5707              		.loc 1 3794 43 is_stmt 0 view .LVU1607
 5708 005e 2846     		mov	r0, r5
 5709 0060 FFF7FEFF 		bl	eTaskGetState
 5710              	.LVL419:
3794:FreeRTOS/Source/tasks.c ****         }
 5711              		.loc 1 3794 41 view .LVU1608
 5712 0064 2073     		strb	r0, [r4, #12]
 5713 0066 E7E7     		b	.L404
 5714              	.L412:
3807:FreeRTOS/Source/tasks.c ****             }
 5715              		.loc 1 3807 17 is_stmt 1 view .LVU1609
3807:FreeRTOS/Source/tasks.c ****             }
 5716              		.loc 1 3807 54 is_stmt 0 view .LVU1610
 5717 0068 286B     		ldr	r0, [r5, #48]
 5718 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5719              	.LVL420:
3807:FreeRTOS/Source/tasks.c ****             }
 5720              		.loc 1 3807 52 view .LVU1611
 5721 006e 2084     		strh	r0, [r4, #32]	@ movhi
 5722 0070 E5E7     		b	.L400
 5723              	.L414:
 5724 0072 00BF     		.align	2
 5725              	.L413:
 5726 0074 00000000 		.word	pxCurrentTCB
 5727              		.cfi_endproc
 5728              	.LFE45:
 5730              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5731              		.align	1
 5732              		.syntax unified
 5733              		.thumb
 5734              		.thumb_func
 5736              	prvListTasksWithinSingleList:
 5737              	.LVL421:
 5738              	.LFB46:
3825:FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
 5739              		.loc 1 3825 5 is_stmt 1 view -0
 5740              		.cfi_startproc
 5741              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 226


 5742              		@ frame_needed = 0, uses_anonymous_args = 0
3825:FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
 5743              		.loc 1 3825 5 is_stmt 0 view .LVU1613
 5744 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5745              	.LCFI44:
 5746              		.cfi_def_cfa_offset 32
 5747              		.cfi_offset 4, -32
 5748              		.cfi_offset 5, -28
 5749              		.cfi_offset 6, -24
 5750              		.cfi_offset 7, -20
 5751              		.cfi_offset 8, -16
 5752              		.cfi_offset 9, -12
 5753              		.cfi_offset 10, -8
 5754              		.cfi_offset 14, -4
3826:FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
 5755              		.loc 1 3826 29 is_stmt 1 view .LVU1614
3827:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0;
 5756              		.loc 1 3827 29 view .LVU1615
3828:FreeRTOS/Source/tasks.c **** 
 5757              		.loc 1 3828 9 view .LVU1616
 5758              	.LVL422:
3830:FreeRTOS/Source/tasks.c ****         {
 5759              		.loc 1 3830 9 view .LVU1617
3830:FreeRTOS/Source/tasks.c ****         {
 5760              		.loc 1 3830 13 is_stmt 0 view .LVU1618
 5761 0004 0C68     		ldr	r4, [r1]
3830:FreeRTOS/Source/tasks.c ****         {
 5762              		.loc 1 3830 11 view .LVU1619
 5763 0006 3CB3     		cbz	r4, .L415
 5764 0008 0746     		mov	r7, r0
 5765 000a 0D46     		mov	r5, r1
 5766 000c 9046     		mov	r8, r2
 5767              	.LBB278:
3832:FreeRTOS/Source/tasks.c **** 
 5768              		.loc 1 3832 13 is_stmt 1 view .LVU1620
 5769              	.LVL423:
3832:FreeRTOS/Source/tasks.c **** 
 5770              		.loc 1 3832 13 view .LVU1621
 5771 000e 4B68     		ldr	r3, [r1, #4]
 5772 0010 5B68     		ldr	r3, [r3, #4]
 5773 0012 4B60     		str	r3, [r1, #4]
3832:FreeRTOS/Source/tasks.c **** 
 5774              		.loc 1 3832 13 view .LVU1622
 5775 0014 01F10809 		add	r9, r1, #8
 5776 0018 4B45     		cmp	r3, r9
 5777 001a 04D0     		beq	.L421
 5778              	.L417:
3832:FreeRTOS/Source/tasks.c **** 
 5779              		.loc 1 3832 13 discriminator 3 view .LVU1623
 5780 001c 6B68     		ldr	r3, [r5, #4]
 5781 001e D3F80CA0 		ldr	r10, [r3, #12]
 5782              	.LVL424:
3832:FreeRTOS/Source/tasks.c **** 
 5783              		.loc 1 3832 13 is_stmt 0 discriminator 3 view .LVU1624
 5784              	.LBE278:
3828:FreeRTOS/Source/tasks.c **** 
 5785              		.loc 1 3828 21 discriminator 3 view .LVU1625
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 227


 5786 0022 0024     		movs	r4, #0
 5787 0024 10E0     		b	.L419
 5788              	.LVL425:
 5789              	.L421:
 5790              	.LBB279:
3832:FreeRTOS/Source/tasks.c **** 
 5791              		.loc 1 3832 13 is_stmt 1 discriminator 1 view .LVU1626
 5792 0026 5B68     		ldr	r3, [r3, #4]
 5793 0028 4B60     		str	r3, [r1, #4]
 5794 002a F7E7     		b	.L417
 5795              	.LVL426:
 5796              	.L418:
3832:FreeRTOS/Source/tasks.c **** 
 5797              		.loc 1 3832 13 is_stmt 0 discriminator 1 view .LVU1627
 5798              	.LBE279:
 5799              	.LBB280:
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5800              		.loc 1 3840 17 is_stmt 1 discriminator 3 view .LVU1628
 5801 002c 6B68     		ldr	r3, [r5, #4]
 5802 002e DE68     		ldr	r6, [r3, #12]
 5803              	.LVL427:
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5804              		.loc 1 3840 17 is_stmt 0 discriminator 3 view .LVU1629
 5805              	.LBE280:
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5806              		.loc 1 3840 65 is_stmt 1 discriminator 3 view .LVU1630
3841:FreeRTOS/Source/tasks.c ****                 uxTask++;
 5807              		.loc 1 3841 17 discriminator 3 view .LVU1631
3841:FreeRTOS/Source/tasks.c ****                 uxTask++;
 5808              		.loc 1 3841 79 is_stmt 0 discriminator 3 view .LVU1632
 5809 0030 04EBC401 		add	r1, r4, r4, lsl #3
3841:FreeRTOS/Source/tasks.c ****                 uxTask++;
 5810              		.loc 1 3841 17 discriminator 3 view .LVU1633
 5811 0034 4346     		mov	r3, r8
 5812 0036 0122     		movs	r2, #1
 5813 0038 07EB8101 		add	r1, r7, r1, lsl #2
 5814 003c 3046     		mov	r0, r6
 5815 003e FFF7FEFF 		bl	vTaskGetInfo
 5816              	.LVL428:
3842:FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5817              		.loc 1 3842 17 is_stmt 1 discriminator 3 view .LVU1634
3842:FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5818              		.loc 1 3842 23 is_stmt 0 discriminator 3 view .LVU1635
 5819 0042 0134     		adds	r4, r4, #1
 5820              	.LVL429:
3843:FreeRTOS/Source/tasks.c ****         }
 5821              		.loc 1 3843 32 is_stmt 1 discriminator 3 view .LVU1636
 5822 0044 B245     		cmp	r10, r6
 5823 0046 07D0     		beq	.L415
 5824              	.LVL430:
 5825              	.L419:
3832:FreeRTOS/Source/tasks.c **** 
 5826              		.loc 1 3832 62 discriminator 4 view .LVU1637
3838:FreeRTOS/Source/tasks.c ****             {
 5827              		.loc 1 3838 13 discriminator 4 view .LVU1638
 5828              	.LBB281:
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 228


 5829              		.loc 1 3840 17 discriminator 4 view .LVU1639
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5830              		.loc 1 3840 17 discriminator 4 view .LVU1640
 5831 0048 6B68     		ldr	r3, [r5, #4]
 5832 004a 5968     		ldr	r1, [r3, #4]
 5833 004c 6960     		str	r1, [r5, #4]
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5834              		.loc 1 3840 17 discriminator 4 view .LVU1641
 5835 004e 8945     		cmp	r9, r1
 5836 0050 ECD1     		bne	.L418
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5837              		.loc 1 3840 17 discriminator 1 view .LVU1642
 5838 0052 4B68     		ldr	r3, [r1, #4]
 5839 0054 6B60     		str	r3, [r5, #4]
 5840 0056 E9E7     		b	.L418
 5841              	.LVL431:
 5842              	.L415:
3840:FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5843              		.loc 1 3840 17 is_stmt 0 discriminator 1 view .LVU1643
 5844              	.LBE281:
3851:FreeRTOS/Source/tasks.c **** 
 5845              		.loc 1 3851 5 view .LVU1644
 5846 0058 2046     		mov	r0, r4
 5847 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5848              		.cfi_endproc
 5849              	.LFE46:
 5851              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5852              		.align	1
 5853              		.global	uxTaskGetSystemState
 5854              		.syntax unified
 5855              		.thumb
 5856              		.thumb_func
 5858              	uxTaskGetSystemState:
 5859              	.LVL432:
 5860              	.LFB27:
2492:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5861              		.loc 1 2492 5 is_stmt 1 view -0
 5862              		.cfi_startproc
 5863              		@ args = 0, pretend = 0, frame = 0
 5864              		@ frame_needed = 0, uses_anonymous_args = 0
2492:FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5865              		.loc 1 2492 5 is_stmt 0 view .LVU1646
 5866 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5867              	.LCFI45:
 5868              		.cfi_def_cfa_offset 24
 5869              		.cfi_offset 3, -24
 5870              		.cfi_offset 4, -20
 5871              		.cfi_offset 5, -16
 5872              		.cfi_offset 6, -12
 5873              		.cfi_offset 7, -8
 5874              		.cfi_offset 14, -4
 5875 0002 0646     		mov	r6, r0
 5876 0004 0C46     		mov	r4, r1
 5877 0006 1746     		mov	r7, r2
2493:FreeRTOS/Source/tasks.c **** 
 5878              		.loc 1 2493 9 is_stmt 1 view .LVU1647
 5879              	.LVL433:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 229


2495:FreeRTOS/Source/tasks.c ****         {
 5880              		.loc 1 2495 9 view .LVU1648
 5881 0008 FFF7FEFF 		bl	vTaskSuspendAll
 5882              	.LVL434:
2498:FreeRTOS/Source/tasks.c ****             {
 5883              		.loc 1 2498 13 view .LVU1649
2498:FreeRTOS/Source/tasks.c ****             {
 5884              		.loc 1 2498 29 is_stmt 0 view .LVU1650
 5885 000c 224B     		ldr	r3, .L427
 5886 000e 1B68     		ldr	r3, [r3]
2498:FreeRTOS/Source/tasks.c ****             {
 5887              		.loc 1 2498 15 view .LVU1651
 5888 0010 A342     		cmp	r3, r4
 5889 0012 3BD8     		bhi	.L425
2493:FreeRTOS/Source/tasks.c **** 
 5890              		.loc 1 2493 33 view .LVU1652
 5891 0014 0525     		movs	r5, #5
2493:FreeRTOS/Source/tasks.c **** 
 5892              		.loc 1 2493 21 view .LVU1653
 5893 0016 0024     		movs	r4, #0
 5894              	.LVL435:
 5895              	.L424:
2502:FreeRTOS/Source/tasks.c ****                 {
 5896              		.loc 1 2502 17 is_stmt 1 discriminator 1 view .LVU1654
2504:FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5897              		.loc 1 2504 21 discriminator 1 view .LVU1655
2504:FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5898              		.loc 1 2504 28 is_stmt 0 discriminator 1 view .LVU1656
 5899 0018 013D     		subs	r5, r5, #1
 5900              	.LVL436:
2505:FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5901              		.loc 1 2505 21 is_stmt 1 discriminator 1 view .LVU1657
2505:FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5902              		.loc 1 2505 81 is_stmt 0 discriminator 1 view .LVU1658
 5903 001a 04EBC400 		add	r0, r4, r4, lsl #3
2505:FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5904              		.loc 1 2505 31 discriminator 1 view .LVU1659
 5905 001e 05EB8501 		add	r1, r5, r5, lsl #2
 5906 0022 0122     		movs	r2, #1
 5907 0024 1D4B     		ldr	r3, .L427+4
 5908 0026 03EB8101 		add	r1, r3, r1, lsl #2
 5909 002a 06EB8000 		add	r0, r6, r0, lsl #2
 5910 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5911              	.LVL437:
2505:FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5912              		.loc 1 2505 28 discriminator 1 view .LVU1660
 5913 0032 0444     		add	r4, r4, r0
 5914              	.LVL438:
2506:FreeRTOS/Source/tasks.c **** 
 5915              		.loc 1 2506 34 is_stmt 1 discriminator 1 view .LVU1661
 5916 0034 002D     		cmp	r5, #0
 5917 0036 EFD1     		bne	.L424
2510:FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5918              		.loc 1 2510 17 view .LVU1662
2510:FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5919              		.loc 1 2510 77 is_stmt 0 view .LVU1663
 5920 0038 04EBC400 		add	r0, r4, r4, lsl #3
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 230


2510:FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5921              		.loc 1 2510 27 view .LVU1664
 5922 003c 184B     		ldr	r3, .L427+8
 5923 003e 1968     		ldr	r1, [r3]
 5924 0040 0222     		movs	r2, #2
 5925 0042 06EB8000 		add	r0, r6, r0, lsl #2
 5926 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5927              	.LVL439:
2510:FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5928              		.loc 1 2510 24 view .LVU1665
 5929 004a 0444     		add	r4, r4, r0
 5930              	.LVL440:
2511:FreeRTOS/Source/tasks.c **** 
 5931              		.loc 1 2511 17 is_stmt 1 view .LVU1666
2511:FreeRTOS/Source/tasks.c **** 
 5932              		.loc 1 2511 77 is_stmt 0 view .LVU1667
 5933 004c 04EBC400 		add	r0, r4, r4, lsl #3
2511:FreeRTOS/Source/tasks.c **** 
 5934              		.loc 1 2511 27 view .LVU1668
 5935 0050 144B     		ldr	r3, .L427+12
 5936 0052 1968     		ldr	r1, [r3]
 5937 0054 0222     		movs	r2, #2
 5938 0056 06EB8000 		add	r0, r6, r0, lsl #2
 5939 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 5940              	.LVL441:
2511:FreeRTOS/Source/tasks.c **** 
 5941              		.loc 1 2511 24 view .LVU1669
 5942 005e 0444     		add	r4, r4, r0
 5943              	.LVL442:
2517:FreeRTOS/Source/tasks.c ****                 }
 5944              		.loc 1 2517 21 is_stmt 1 view .LVU1670
2517:FreeRTOS/Source/tasks.c ****                 }
 5945              		.loc 1 2517 81 is_stmt 0 view .LVU1671
 5946 0060 04EBC400 		add	r0, r4, r4, lsl #3
2517:FreeRTOS/Source/tasks.c ****                 }
 5947              		.loc 1 2517 31 view .LVU1672
 5948 0064 0422     		movs	r2, #4
 5949 0066 1049     		ldr	r1, .L427+16
 5950 0068 06EB8000 		add	r0, r6, r0, lsl #2
 5951 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 5952              	.LVL443:
2517:FreeRTOS/Source/tasks.c ****                 }
 5953              		.loc 1 2517 28 view .LVU1673
 5954 0070 0444     		add	r4, r4, r0
 5955              	.LVL444:
2525:FreeRTOS/Source/tasks.c ****                 }
 5956              		.loc 1 2525 21 is_stmt 1 view .LVU1674
2525:FreeRTOS/Source/tasks.c ****                 }
 5957              		.loc 1 2525 81 is_stmt 0 view .LVU1675
 5958 0072 04EBC400 		add	r0, r4, r4, lsl #3
2525:FreeRTOS/Source/tasks.c ****                 }
 5959              		.loc 1 2525 31 view .LVU1676
 5960 0076 0322     		movs	r2, #3
 5961 0078 0C49     		ldr	r1, .L427+20
 5962 007a 06EB8000 		add	r0, r6, r0, lsl #2
 5963 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5964              	.LVL445:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 231


2525:FreeRTOS/Source/tasks.c ****                 }
 5965              		.loc 1 2525 28 view .LVU1677
 5966 0082 0444     		add	r4, r4, r0
 5967              	.LVL446:
2542:FreeRTOS/Source/tasks.c ****                     {
 5968              		.loc 1 2542 21 is_stmt 1 view .LVU1678
2542:FreeRTOS/Source/tasks.c ****                     {
 5969              		.loc 1 2542 23 is_stmt 0 view .LVU1679
 5970 0084 1FB1     		cbz	r7, .L423
2544:FreeRTOS/Source/tasks.c ****                     }
 5971              		.loc 1 2544 25 is_stmt 1 view .LVU1680
2544:FreeRTOS/Source/tasks.c ****                     }
 5972              		.loc 1 2544 42 is_stmt 0 view .LVU1681
 5973 0086 0023     		movs	r3, #0
 5974 0088 3B60     		str	r3, [r7]
 5975 008a 00E0     		b	.L423
 5976              	.LVL447:
 5977              	.L425:
2493:FreeRTOS/Source/tasks.c **** 
 5978              		.loc 1 2493 21 view .LVU1682
 5979 008c 0024     		movs	r4, #0
 5980              	.LVL448:
 5981              	.L423:
2551:FreeRTOS/Source/tasks.c ****             }
 5982              		.loc 1 2551 41 is_stmt 1 view .LVU1683
2554:FreeRTOS/Source/tasks.c **** 
 5983              		.loc 1 2554 9 view .LVU1684
2554:FreeRTOS/Source/tasks.c **** 
 5984              		.loc 1 2554 18 is_stmt 0 view .LVU1685
 5985 008e FFF7FEFF 		bl	xTaskResumeAll
 5986              	.LVL449:
2556:FreeRTOS/Source/tasks.c ****     }
 5987              		.loc 1 2556 9 is_stmt 1 view .LVU1686
2557:FreeRTOS/Source/tasks.c **** 
 5988              		.loc 1 2557 5 is_stmt 0 view .LVU1687
 5989 0092 2046     		mov	r0, r4
 5990 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5991              	.LVL450:
 5992              	.L428:
2557:FreeRTOS/Source/tasks.c **** 
 5993              		.loc 1 2557 5 view .LVU1688
 5994 0096 00BF     		.align	2
 5995              	.L427:
 5996 0098 00000000 		.word	uxCurrentNumberOfTasks
 5997 009c 00000000 		.word	pxReadyTasksLists
 5998 00a0 00000000 		.word	pxDelayedTaskList
 5999 00a4 00000000 		.word	pxOverflowDelayedTaskList
 6000 00a8 00000000 		.word	xTasksWaitingTermination
 6001 00ac 00000000 		.word	xSuspendedTaskList
 6002              		.cfi_endproc
 6003              	.LFE27:
 6005              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6006              		.align	1
 6007              		.global	xTaskGetCurrentTaskHandle
 6008              		.syntax unified
 6009              		.thumb
 6010              		.thumb_func
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 232


 6012              	xTaskGetCurrentTaskHandle:
 6013              	.LFB50:
4023:FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
 6014              		.loc 1 4023 5 is_stmt 1 view -0
 6015              		.cfi_startproc
 6016              		@ args = 0, pretend = 0, frame = 0
 6017              		@ frame_needed = 0, uses_anonymous_args = 0
 6018              		@ link register save eliminated.
4024:FreeRTOS/Source/tasks.c **** 
 6019              		.loc 1 4024 9 view .LVU1690
4029:FreeRTOS/Source/tasks.c **** 
 6020              		.loc 1 4029 9 view .LVU1691
4029:FreeRTOS/Source/tasks.c **** 
 6021              		.loc 1 4029 17 is_stmt 0 view .LVU1692
 6022 0000 014B     		ldr	r3, .L430
 6023 0002 1868     		ldr	r0, [r3]
 6024              	.LVL451:
4031:FreeRTOS/Source/tasks.c ****     }
 6025              		.loc 1 4031 9 is_stmt 1 view .LVU1693
4032:FreeRTOS/Source/tasks.c **** 
 6026              		.loc 1 4032 5 is_stmt 0 view .LVU1694
 6027 0004 7047     		bx	lr
 6028              	.L431:
 6029 0006 00BF     		.align	2
 6030              	.L430:
 6031 0008 00000000 		.word	pxCurrentTCB
 6032              		.cfi_endproc
 6033              	.LFE50:
 6035              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6036              		.align	1
 6037              		.global	xTaskGetSchedulerState
 6038              		.syntax unified
 6039              		.thumb
 6040              		.thumb_func
 6042              	xTaskGetSchedulerState:
 6043              	.LFB51:
4040:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 6044              		.loc 1 4040 5 is_stmt 1 view -0
 6045              		.cfi_startproc
 6046              		@ args = 0, pretend = 0, frame = 0
 6047              		@ frame_needed = 0, uses_anonymous_args = 0
 6048              		@ link register save eliminated.
4041:FreeRTOS/Source/tasks.c **** 
 6049              		.loc 1 4041 9 view .LVU1696
4043:FreeRTOS/Source/tasks.c ****         {
 6050              		.loc 1 4043 9 view .LVU1697
4043:FreeRTOS/Source/tasks.c ****         {
 6051              		.loc 1 4043 31 is_stmt 0 view .LVU1698
 6052 0000 054B     		ldr	r3, .L437
 6053 0002 1B68     		ldr	r3, [r3]
4043:FreeRTOS/Source/tasks.c ****         {
 6054              		.loc 1 4043 11 view .LVU1699
 6055 0004 33B1     		cbz	r3, .L434
4049:FreeRTOS/Source/tasks.c ****             {
 6056              		.loc 1 4049 13 is_stmt 1 view .LVU1700
4049:FreeRTOS/Source/tasks.c ****             {
 6057              		.loc 1 4049 38 is_stmt 0 view .LVU1701
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 233


 6058 0006 054B     		ldr	r3, .L437+4
 6059 0008 1B68     		ldr	r3, [r3]
4049:FreeRTOS/Source/tasks.c ****             {
 6060              		.loc 1 4049 15 view .LVU1702
 6061 000a 0BB1     		cbz	r3, .L436
4055:FreeRTOS/Source/tasks.c ****             }
 6062              		.loc 1 4055 25 view .LVU1703
 6063 000c 0020     		movs	r0, #0
 6064              	.LVL452:
4059:FreeRTOS/Source/tasks.c ****     }
 6065              		.loc 1 4059 9 is_stmt 1 view .LVU1704
4060:FreeRTOS/Source/tasks.c **** 
 6066              		.loc 1 4060 5 is_stmt 0 view .LVU1705
 6067 000e 7047     		bx	lr
 6068              	.LVL453:
 6069              	.L436:
4051:FreeRTOS/Source/tasks.c ****             }
 6070              		.loc 1 4051 25 view .LVU1706
 6071 0010 0220     		movs	r0, #2
 6072 0012 7047     		bx	lr
 6073              	.L434:
4045:FreeRTOS/Source/tasks.c ****         }
 6074              		.loc 1 4045 21 view .LVU1707
 6075 0014 0120     		movs	r0, #1
 6076 0016 7047     		bx	lr
 6077              	.L438:
 6078              		.align	2
 6079              	.L437:
 6080 0018 00000000 		.word	xSchedulerRunning
 6081 001c 00000000 		.word	uxSchedulerSuspended
 6082              		.cfi_endproc
 6083              	.LFE51:
 6085              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6086              		.align	1
 6087              		.global	xTaskPriorityInherit
 6088              		.syntax unified
 6089              		.thumb
 6090              		.thumb_func
 6092              	xTaskPriorityInherit:
 6093              	.LVL454:
 6094              	.LFB52:
4068:FreeRTOS/Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6095              		.loc 1 4068 5 is_stmt 1 view -0
 6096              		.cfi_startproc
 6097              		@ args = 0, pretend = 0, frame = 0
 6098              		@ frame_needed = 0, uses_anonymous_args = 0
4069:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6099              		.loc 1 4069 9 view .LVU1709
4070:FreeRTOS/Source/tasks.c **** 
 6100              		.loc 1 4070 9 view .LVU1710
4075:FreeRTOS/Source/tasks.c ****         {
 6101              		.loc 1 4075 9 view .LVU1711
4075:FreeRTOS/Source/tasks.c ****         {
 6102              		.loc 1 4075 11 is_stmt 0 view .LVU1712
 6103 0000 0028     		cmp	r0, #0
 6104 0002 54D0     		beq	.L445
4068:FreeRTOS/Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 234


 6105              		.loc 1 4068 5 view .LVU1713
 6106 0004 70B5     		push	{r4, r5, r6, lr}
 6107              	.LCFI46:
 6108              		.cfi_def_cfa_offset 16
 6109              		.cfi_offset 4, -16
 6110              		.cfi_offset 5, -12
 6111              		.cfi_offset 6, -8
 6112              		.cfi_offset 14, -4
 6113 0006 0446     		mov	r4, r0
4080:FreeRTOS/Source/tasks.c ****             {
 6114              		.loc 1 4080 13 is_stmt 1 view .LVU1714
4080:FreeRTOS/Source/tasks.c ****             {
 6115              		.loc 1 4080 33 is_stmt 0 view .LVU1715
 6116 0008 C36A     		ldr	r3, [r0, #44]
4080:FreeRTOS/Source/tasks.c ****             {
 6117              		.loc 1 4080 60 view .LVU1716
 6118 000a 2B4A     		ldr	r2, .L452
 6119 000c 1268     		ldr	r2, [r2]
 6120 000e D26A     		ldr	r2, [r2, #44]
4080:FreeRTOS/Source/tasks.c ****             {
 6121              		.loc 1 4080 15 view .LVU1717
 6122 0010 9342     		cmp	r3, r2
 6123 0012 44D2     		bcs	.L441
4085:FreeRTOS/Source/tasks.c ****                 {
 6124              		.loc 1 4085 17 is_stmt 1 view .LVU1718
4085:FreeRTOS/Source/tasks.c ****                 {
 6125              		.loc 1 4085 23 is_stmt 0 view .LVU1719
 6126 0014 8269     		ldr	r2, [r0, #24]
4085:FreeRTOS/Source/tasks.c ****                 {
 6127              		.loc 1 4085 19 view .LVU1720
 6128 0016 002A     		cmp	r2, #0
 6129 0018 05DB     		blt	.L442
4087:FreeRTOS/Source/tasks.c ****                 }
 6130              		.loc 1 4087 21 is_stmt 1 view .LVU1721
 6131 001a 274A     		ldr	r2, .L452
 6132 001c 1268     		ldr	r2, [r2]
 6133 001e D26A     		ldr	r2, [r2, #44]
 6134 0020 C2F10502 		rsb	r2, r2, #5
 6135 0024 8261     		str	r2, [r0, #24]
 6136              	.L442:
4091:FreeRTOS/Source/tasks.c ****                 }
 6137              		.loc 1 4091 45 view .LVU1722
4096:FreeRTOS/Source/tasks.c ****                 {
 6138              		.loc 1 4096 17 view .LVU1723
4096:FreeRTOS/Source/tasks.c ****                 {
 6139              		.loc 1 4096 21 is_stmt 0 view .LVU1724
 6140 0026 6169     		ldr	r1, [r4, #20]
 6141 0028 03EB8303 		add	r3, r3, r3, lsl #2
 6142 002c 234A     		ldr	r2, .L452+4
 6143 002e 02EB8303 		add	r3, r2, r3, lsl #2
4096:FreeRTOS/Source/tasks.c ****                 {
 6144              		.loc 1 4096 19 view .LVU1725
 6145 0032 9942     		cmp	r1, r3
 6146 0034 05D0     		beq	.L451
4117:FreeRTOS/Source/tasks.c ****                 }
 6147              		.loc 1 4117 21 is_stmt 1 view .LVU1726
4117:FreeRTOS/Source/tasks.c ****                 }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 235


 6148              		.loc 1 4117 64 is_stmt 0 view .LVU1727
 6149 0036 204B     		ldr	r3, .L452
 6150 0038 1B68     		ldr	r3, [r3]
 6151 003a DB6A     		ldr	r3, [r3, #44]
4117:FreeRTOS/Source/tasks.c ****                 }
 6152              		.loc 1 4117 50 view .LVU1728
 6153 003c E362     		str	r3, [r4, #44]
4123:FreeRTOS/Source/tasks.c ****             }
 6154              		.loc 1 4123 25 view .LVU1729
 6155 003e 0120     		movs	r0, #1
 6156              	.LVL455:
 6157              	.L439:
4150:FreeRTOS/Source/tasks.c **** 
 6158              		.loc 1 4150 5 view .LVU1730
 6159 0040 70BD     		pop	{r4, r5, r6, pc}
 6160              	.LVL456:
 6161              	.L451:
4098:FreeRTOS/Source/tasks.c ****                     {
 6162              		.loc 1 4098 21 is_stmt 1 view .LVU1731
4098:FreeRTOS/Source/tasks.c ****                     {
 6163              		.loc 1 4098 25 is_stmt 0 view .LVU1732
 6164 0042 251D     		adds	r5, r4, #4
 6165 0044 2846     		mov	r0, r5
 6166              	.LVL457:
4098:FreeRTOS/Source/tasks.c ****                     {
 6167              		.loc 1 4098 25 view .LVU1733
 6168 0046 FFF7FEFF 		bl	uxListRemove
 6169              	.LVL458:
4098:FreeRTOS/Source/tasks.c ****                     {
 6170              		.loc 1 4098 23 view .LVU1734
 6171 004a 38B9     		cbnz	r0, .L444
4103:FreeRTOS/Source/tasks.c ****                     }
 6172              		.loc 1 4103 25 is_stmt 1 view .LVU1735
 6173 004c E36A     		ldr	r3, [r4, #44]
 6174 004e 0122     		movs	r2, #1
 6175 0050 9A40     		lsls	r2, r2, r3
 6176 0052 1B49     		ldr	r1, .L452+8
 6177 0054 0B68     		ldr	r3, [r1]
 6178 0056 23EA0203 		bic	r3, r3, r2
 6179 005a 0B60     		str	r3, [r1]
 6180              	.L444:
4107:FreeRTOS/Source/tasks.c ****                     }
 6181              		.loc 1 4107 49 view .LVU1736
4111:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6182              		.loc 1 4111 21 view .LVU1737
4111:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6183              		.loc 1 4111 64 is_stmt 0 view .LVU1738
 6184 005c 164B     		ldr	r3, .L452
 6185 005e 1B68     		ldr	r3, [r3]
 6186 0060 DB6A     		ldr	r3, [r3, #44]
4111:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6187              		.loc 1 4111 50 view .LVU1739
 6188 0062 E362     		str	r3, [r4, #44]
4112:FreeRTOS/Source/tasks.c ****                 }
 6189              		.loc 1 4112 21 is_stmt 1 view .LVU1740
4112:FreeRTOS/Source/tasks.c ****                 }
 6190              		.loc 1 4112 21 view .LVU1741
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 236


 6191 0064 0120     		movs	r0, #1
 6192 0066 00FA03F2 		lsl	r2, r0, r3
 6193 006a 1549     		ldr	r1, .L452+8
 6194 006c 0E68     		ldr	r6, [r1]
 6195 006e 3243     		orrs	r2, r2, r6
 6196 0070 0A60     		str	r2, [r1]
 6197              	.LBB282:
4112:FreeRTOS/Source/tasks.c ****                 }
 6198              		.loc 1 4112 21 view .LVU1742
 6199 0072 124A     		ldr	r2, .L452+4
 6200 0074 03EB8303 		add	r3, r3, r3, lsl #2
 6201 0078 02EB8303 		add	r3, r2, r3, lsl #2
 6202 007c 5B68     		ldr	r3, [r3, #4]
 6203              	.LVL459:
4112:FreeRTOS/Source/tasks.c ****                 }
 6204              		.loc 1 4112 21 view .LVU1743
4112:FreeRTOS/Source/tasks.c ****                 }
 6205              		.loc 1 4112 21 view .LVU1744
4112:FreeRTOS/Source/tasks.c ****                 }
 6206              		.loc 1 4112 21 view .LVU1745
 6207 007e A360     		str	r3, [r4, #8]
4112:FreeRTOS/Source/tasks.c ****                 }
 6208              		.loc 1 4112 21 view .LVU1746
 6209 0080 9968     		ldr	r1, [r3, #8]
 6210 0082 E160     		str	r1, [r4, #12]
4112:FreeRTOS/Source/tasks.c ****                 }
 6211              		.loc 1 4112 21 view .LVU1747
 6212 0084 4D60     		str	r5, [r1, #4]
4112:FreeRTOS/Source/tasks.c ****                 }
 6213              		.loc 1 4112 21 view .LVU1748
 6214 0086 9D60     		str	r5, [r3, #8]
4112:FreeRTOS/Source/tasks.c ****                 }
 6215              		.loc 1 4112 21 view .LVU1749
 6216 0088 E36A     		ldr	r3, [r4, #44]
 6217              	.LVL460:
4112:FreeRTOS/Source/tasks.c ****                 }
 6218              		.loc 1 4112 21 is_stmt 0 view .LVU1750
 6219 008a 03EB8301 		add	r1, r3, r3, lsl #2
 6220 008e 8D00     		lsls	r5, r1, #2
 6221 0090 02EB8101 		add	r1, r2, r1, lsl #2
 6222 0094 6161     		str	r1, [r4, #20]
4112:FreeRTOS/Source/tasks.c ****                 }
 6223              		.loc 1 4112 21 is_stmt 1 view .LVU1751
 6224 0096 5159     		ldr	r1, [r2, r5]
 6225 0098 0144     		add	r1, r1, r0
 6226 009a 5151     		str	r1, [r2, r5]
 6227              	.LBE282:
4112:FreeRTOS/Source/tasks.c ****                 }
 6228              		.loc 1 4112 21 view .LVU1752
4112:FreeRTOS/Source/tasks.c ****                 }
 6229              		.loc 1 4112 62 view .LVU1753
 6230 009c D0E7     		b	.L439
 6231              	.LVL461:
 6232              	.L441:
4127:FreeRTOS/Source/tasks.c ****                 {
 6233              		.loc 1 4127 17 view .LVU1754
4127:FreeRTOS/Source/tasks.c ****                 {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 237


 6234              		.loc 1 4127 37 is_stmt 0 view .LVU1755
 6235 009e 826C     		ldr	r2, [r0, #72]
4127:FreeRTOS/Source/tasks.c ****                 {
 6236              		.loc 1 4127 68 view .LVU1756
 6237 00a0 054B     		ldr	r3, .L452
 6238 00a2 1B68     		ldr	r3, [r3]
 6239 00a4 DB6A     		ldr	r3, [r3, #44]
4127:FreeRTOS/Source/tasks.c ****                 {
 6240              		.loc 1 4127 19 view .LVU1757
 6241 00a6 9A42     		cmp	r2, r3
 6242 00a8 03D3     		bcc	.L446
4070:FreeRTOS/Source/tasks.c **** 
 6243              		.loc 1 4070 20 view .LVU1758
 6244 00aa 0020     		movs	r0, #0
 6245              	.LVL462:
4070:FreeRTOS/Source/tasks.c **** 
 6246              		.loc 1 4070 20 view .LVU1759
 6247 00ac C8E7     		b	.L439
 6248              	.LVL463:
 6249              	.L445:
 6250              	.LCFI47:
 6251              		.cfi_def_cfa_offset 0
 6252              		.cfi_restore 4
 6253              		.cfi_restore 5
 6254              		.cfi_restore 6
 6255              		.cfi_restore 14
4070:FreeRTOS/Source/tasks.c **** 
 6256              		.loc 1 4070 20 view .LVU1760
 6257 00ae 0020     		movs	r0, #0
 6258              	.LVL464:
4150:FreeRTOS/Source/tasks.c **** 
 6259              		.loc 1 4150 5 view .LVU1761
 6260 00b0 7047     		bx	lr
 6261              	.LVL465:
 6262              	.L446:
 6263              	.LCFI48:
 6264              		.cfi_def_cfa_offset 16
 6265              		.cfi_offset 4, -16
 6266              		.cfi_offset 5, -12
 6267              		.cfi_offset 6, -8
 6268              		.cfi_offset 14, -4
4136:FreeRTOS/Source/tasks.c ****                 }
 6269              		.loc 1 4136 29 view .LVU1762
 6270 00b2 0120     		movs	r0, #1
 6271              	.LVL466:
4146:FreeRTOS/Source/tasks.c ****         }
 6272              		.loc 1 4146 37 is_stmt 1 view .LVU1763
4149:FreeRTOS/Source/tasks.c ****     }
 6273              		.loc 1 4149 9 view .LVU1764
4149:FreeRTOS/Source/tasks.c ****     }
 6274              		.loc 1 4149 16 is_stmt 0 view .LVU1765
 6275 00b4 C4E7     		b	.L439
 6276              	.L453:
 6277 00b6 00BF     		.align	2
 6278              	.L452:
 6279 00b8 00000000 		.word	pxCurrentTCB
 6280 00bc 00000000 		.word	pxReadyTasksLists
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 238


 6281 00c0 00000000 		.word	uxTopReadyPriority
 6282              		.cfi_endproc
 6283              	.LFE52:
 6285              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6286              		.align	1
 6287              		.global	xTaskPriorityDisinherit
 6288              		.syntax unified
 6289              		.thumb
 6290              		.thumb_func
 6292              	xTaskPriorityDisinherit:
 6293              	.LVL467:
 6294              	.LFB53:
4158:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6295              		.loc 1 4158 5 is_stmt 1 view -0
 6296              		.cfi_startproc
 6297              		@ args = 0, pretend = 0, frame = 0
 6298              		@ frame_needed = 0, uses_anonymous_args = 0
4159:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6299              		.loc 1 4159 9 view .LVU1767
4160:FreeRTOS/Source/tasks.c **** 
 6300              		.loc 1 4160 9 view .LVU1768
4162:FreeRTOS/Source/tasks.c ****         {
 6301              		.loc 1 4162 9 view .LVU1769
4162:FreeRTOS/Source/tasks.c ****         {
 6302              		.loc 1 4162 11 is_stmt 0 view .LVU1770
 6303 0000 0028     		cmp	r0, #0
 6304 0002 51D0     		beq	.L461
4158:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6305              		.loc 1 4158 5 view .LVU1771
 6306 0004 70B5     		push	{r4, r5, r6, lr}
 6307              	.LCFI49:
 6308              		.cfi_def_cfa_offset 16
 6309              		.cfi_offset 4, -16
 6310              		.cfi_offset 5, -12
 6311              		.cfi_offset 6, -8
 6312              		.cfi_offset 14, -4
 6313 0006 0446     		mov	r4, r0
4168:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6314              		.loc 1 4168 13 is_stmt 1 view .LVU1772
 6315 0008 294B     		ldr	r3, .L469
 6316 000a 1B68     		ldr	r3, [r3]
 6317 000c 8342     		cmp	r3, r0
 6318 000e 08D0     		beq	.L456
4168:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6319              		.loc 1 4168 13 view .LVU1773
 6320              	.LBB283:
 6321              	.LBI283:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6322              		.loc 2 194 34 view .LVU1774
 6323              	.LBB284:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6324              		.loc 2 196 9 view .LVU1775
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6325              		.loc 2 198 9 view .LVU1776
 6326              		.syntax unified
 6327              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6328 0010 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 239


 6329 0014 83F31188 		msr basepri, r3											
 6330 0018 BFF36F8F 		isb														
 6331 001c BFF34F8F 		dsb														
 6332              	
 6333              	@ 0 "" 2
 6334              	.LVL468:
 6335              		.thumb
 6336              		.syntax unified
 6337              	.L457:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6338              		.loc 2 198 9 is_stmt 0 view .LVU1777
 6339              	.LBE284:
 6340              	.LBE283:
4168:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6341              		.loc 1 4168 13 is_stmt 1 discriminator 1 view .LVU1778
4168:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6342              		.loc 1 4168 13 discriminator 1 view .LVU1779
 6343 0020 FEE7     		b	.L457
 6344              	.L456:
4168:FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6345              		.loc 1 4168 50 discriminator 2 view .LVU1780
4169:FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6346              		.loc 1 4169 13 discriminator 2 view .LVU1781
 6347 0022 C36C     		ldr	r3, [r0, #76]
 6348 0024 43B9     		cbnz	r3, .L458
4169:FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6349              		.loc 1 4169 13 view .LVU1782
 6350              	.LBB285:
 6351              	.LBI285:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6352              		.loc 2 194 34 view .LVU1783
 6353              	.LBB286:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6354              		.loc 2 196 9 view .LVU1784
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6355              		.loc 2 198 9 view .LVU1785
 6356              		.syntax unified
 6357              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6358 0026 4FF05003 			mov r3, #80												
 6359 002a 83F31188 		msr basepri, r3											
 6360 002e BFF36F8F 		isb														
 6361 0032 BFF34F8F 		dsb														
 6362              	
 6363              	@ 0 "" 2
 6364              	.LVL469:
 6365              		.thumb
 6366              		.syntax unified
 6367              	.L459:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6368              		.loc 2 198 9 is_stmt 0 view .LVU1786
 6369              	.LBE286:
 6370              	.LBE285:
4169:FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6371              		.loc 1 4169 13 is_stmt 1 discriminator 2 view .LVU1787
4169:FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6372              		.loc 1 4169 13 discriminator 2 view .LVU1788
 6373 0036 FEE7     		b	.L459
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 240


 6374              	.L458:
4169:FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6375              		.loc 1 4169 49 discriminator 2 view .LVU1789
4170:FreeRTOS/Source/tasks.c **** 
 6376              		.loc 1 4170 13 discriminator 2 view .LVU1790
4170:FreeRTOS/Source/tasks.c **** 
 6377              		.loc 1 4170 37 is_stmt 0 discriminator 2 view .LVU1791
 6378 0038 013B     		subs	r3, r3, #1
 6379 003a C364     		str	r3, [r0, #76]
4174:FreeRTOS/Source/tasks.c ****             {
 6380              		.loc 1 4174 13 is_stmt 1 discriminator 2 view .LVU1792
4174:FreeRTOS/Source/tasks.c ****             {
 6381              		.loc 1 4174 22 is_stmt 0 discriminator 2 view .LVU1793
 6382 003c C16A     		ldr	r1, [r0, #44]
4174:FreeRTOS/Source/tasks.c ****             {
 6383              		.loc 1 4174 43 discriminator 2 view .LVU1794
 6384 003e 826C     		ldr	r2, [r0, #72]
4174:FreeRTOS/Source/tasks.c ****             {
 6385              		.loc 1 4174 15 discriminator 2 view .LVU1795
 6386 0040 9142     		cmp	r1, r2
 6387 0042 33D0     		beq	.L462
4177:FreeRTOS/Source/tasks.c ****                 {
 6388              		.loc 1 4177 17 is_stmt 1 view .LVU1796
4177:FreeRTOS/Source/tasks.c ****                 {
 6389              		.loc 1 4177 19 is_stmt 0 view .LVU1797
 6390 0044 0BB1     		cbz	r3, .L468
4160:FreeRTOS/Source/tasks.c **** 
 6391              		.loc 1 4160 20 view .LVU1798
 6392 0046 0020     		movs	r0, #0
 6393              	.LVL470:
4226:FreeRTOS/Source/tasks.c ****         }
 6394              		.loc 1 4226 37 is_stmt 1 view .LVU1799
4229:FreeRTOS/Source/tasks.c ****     }
 6395              		.loc 1 4229 9 view .LVU1800
 6396              	.L454:
4230:FreeRTOS/Source/tasks.c **** 
 6397              		.loc 1 4230 5 is_stmt 0 view .LVU1801
 6398 0048 70BD     		pop	{r4, r5, r6, pc}
 6399              	.LVL471:
 6400              	.L468:
4184:FreeRTOS/Source/tasks.c ****                     {
 6401              		.loc 1 4184 21 is_stmt 1 view .LVU1802
4184:FreeRTOS/Source/tasks.c ****                     {
 6402              		.loc 1 4184 25 is_stmt 0 view .LVU1803
 6403 004a 051D     		adds	r5, r0, #4
 6404 004c 2846     		mov	r0, r5
 6405              	.LVL472:
4184:FreeRTOS/Source/tasks.c ****                     {
 6406              		.loc 1 4184 25 view .LVU1804
 6407 004e FFF7FEFF 		bl	uxListRemove
 6408              	.LVL473:
4184:FreeRTOS/Source/tasks.c ****                     {
 6409              		.loc 1 4184 23 view .LVU1805
 6410 0052 38B9     		cbnz	r0, .L460
4186:FreeRTOS/Source/tasks.c ****                     }
 6411              		.loc 1 4186 25 is_stmt 1 view .LVU1806
 6412 0054 E36A     		ldr	r3, [r4, #44]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 241


 6413 0056 0122     		movs	r2, #1
 6414 0058 9A40     		lsls	r2, r2, r3
 6415 005a 1649     		ldr	r1, .L469+4
 6416 005c 0B68     		ldr	r3, [r1]
 6417 005e 23EA0203 		bic	r3, r3, r2
 6418 0062 0B60     		str	r3, [r1]
 6419              	.L460:
4190:FreeRTOS/Source/tasks.c ****                     }
 6420              		.loc 1 4190 49 view .LVU1807
4195:FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6421              		.loc 1 4195 82 view .LVU1808
4196:FreeRTOS/Source/tasks.c **** 
 6422              		.loc 1 4196 21 view .LVU1809
4196:FreeRTOS/Source/tasks.c **** 
 6423              		.loc 1 4196 46 is_stmt 0 view .LVU1810
 6424 0064 A36C     		ldr	r3, [r4, #72]
4196:FreeRTOS/Source/tasks.c **** 
 6425              		.loc 1 4196 39 view .LVU1811
 6426 0066 E362     		str	r3, [r4, #44]
4201:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6427              		.loc 1 4201 21 is_stmt 1 view .LVU1812
 6428 0068 C3F10502 		rsb	r2, r3, #5
 6429 006c A261     		str	r2, [r4, #24]
4202:FreeRTOS/Source/tasks.c **** 
 6430              		.loc 1 4202 21 view .LVU1813
4202:FreeRTOS/Source/tasks.c **** 
 6431              		.loc 1 4202 21 view .LVU1814
 6432 006e 0120     		movs	r0, #1
 6433 0070 00FA03F2 		lsl	r2, r0, r3
 6434 0074 0F49     		ldr	r1, .L469+4
 6435 0076 0E68     		ldr	r6, [r1]
 6436 0078 3243     		orrs	r2, r2, r6
 6437 007a 0A60     		str	r2, [r1]
 6438              	.LBB287:
4202:FreeRTOS/Source/tasks.c **** 
 6439              		.loc 1 4202 21 view .LVU1815
 6440 007c 0E4A     		ldr	r2, .L469+8
 6441 007e 03EB8303 		add	r3, r3, r3, lsl #2
 6442 0082 02EB8303 		add	r3, r2, r3, lsl #2
 6443 0086 5B68     		ldr	r3, [r3, #4]
 6444              	.LVL474:
4202:FreeRTOS/Source/tasks.c **** 
 6445              		.loc 1 4202 21 view .LVU1816
4202:FreeRTOS/Source/tasks.c **** 
 6446              		.loc 1 4202 21 view .LVU1817
4202:FreeRTOS/Source/tasks.c **** 
 6447              		.loc 1 4202 21 view .LVU1818
 6448 0088 A360     		str	r3, [r4, #8]
4202:FreeRTOS/Source/tasks.c **** 
 6449              		.loc 1 4202 21 view .LVU1819
 6450 008a 9968     		ldr	r1, [r3, #8]
 6451 008c E160     		str	r1, [r4, #12]
4202:FreeRTOS/Source/tasks.c **** 
 6452              		.loc 1 4202 21 view .LVU1820
 6453 008e 4D60     		str	r5, [r1, #4]
4202:FreeRTOS/Source/tasks.c **** 
 6454              		.loc 1 4202 21 view .LVU1821
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 242


 6455 0090 9D60     		str	r5, [r3, #8]
4202:FreeRTOS/Source/tasks.c **** 
 6456              		.loc 1 4202 21 view .LVU1822
 6457 0092 E36A     		ldr	r3, [r4, #44]
 6458              	.LVL475:
4202:FreeRTOS/Source/tasks.c **** 
 6459              		.loc 1 4202 21 is_stmt 0 view .LVU1823
 6460 0094 03EB8301 		add	r1, r3, r3, lsl #2
 6461 0098 8D00     		lsls	r5, r1, #2
 6462 009a 02EB8101 		add	r1, r2, r1, lsl #2
 6463 009e 6161     		str	r1, [r4, #20]
4202:FreeRTOS/Source/tasks.c **** 
 6464              		.loc 1 4202 21 is_stmt 1 view .LVU1824
 6465 00a0 5159     		ldr	r1, [r2, r5]
 6466 00a2 0144     		add	r1, r1, r0
 6467 00a4 5151     		str	r1, [r2, r5]
 6468              	.LBE287:
4202:FreeRTOS/Source/tasks.c **** 
 6469              		.loc 1 4202 21 view .LVU1825
4202:FreeRTOS/Source/tasks.c **** 
 6470              		.loc 1 4202 51 view .LVU1826
4212:FreeRTOS/Source/tasks.c ****                 }
 6471              		.loc 1 4212 21 view .LVU1827
 6472              	.LVL476:
4212:FreeRTOS/Source/tasks.c ****                 }
 6473              		.loc 1 4212 21 is_stmt 0 view .LVU1828
 6474 00a6 CFE7     		b	.L454
 6475              	.LVL477:
 6476              	.L461:
 6477              	.LCFI50:
 6478              		.cfi_def_cfa_offset 0
 6479              		.cfi_restore 4
 6480              		.cfi_restore 5
 6481              		.cfi_restore 6
 6482              		.cfi_restore 14
4160:FreeRTOS/Source/tasks.c **** 
 6483              		.loc 1 4160 20 view .LVU1829
 6484 00a8 0020     		movs	r0, #0
 6485              	.LVL478:
4230:FreeRTOS/Source/tasks.c **** 
 6486              		.loc 1 4230 5 view .LVU1830
 6487 00aa 7047     		bx	lr
 6488              	.LVL479:
 6489              	.L462:
 6490              	.LCFI51:
 6491              		.cfi_def_cfa_offset 16
 6492              		.cfi_offset 4, -16
 6493              		.cfi_offset 5, -12
 6494              		.cfi_offset 6, -8
 6495              		.cfi_offset 14, -4
4160:FreeRTOS/Source/tasks.c **** 
 6496              		.loc 1 4160 20 view .LVU1831
 6497 00ac 0020     		movs	r0, #0
 6498              	.LVL480:
4160:FreeRTOS/Source/tasks.c **** 
 6499              		.loc 1 4160 20 view .LVU1832
 6500 00ae CBE7     		b	.L454
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 243


 6501              	.L470:
 6502              		.align	2
 6503              	.L469:
 6504 00b0 00000000 		.word	pxCurrentTCB
 6505 00b4 00000000 		.word	uxTopReadyPriority
 6506 00b8 00000000 		.word	pxReadyTasksLists
 6507              		.cfi_endproc
 6508              	.LFE53:
 6510              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6511              		.align	1
 6512              		.global	vTaskPriorityDisinheritAfterTimeout
 6513              		.syntax unified
 6514              		.thumb
 6515              		.thumb_func
 6517              	vTaskPriorityDisinheritAfterTimeout:
 6518              	.LVL481:
 6519              	.LFB54:
4239:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6520              		.loc 1 4239 5 is_stmt 1 view -0
 6521              		.cfi_startproc
 6522              		@ args = 0, pretend = 0, frame = 0
 6523              		@ frame_needed = 0, uses_anonymous_args = 0
4240:FreeRTOS/Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 6524              		.loc 1 4240 9 view .LVU1834
4241:FreeRTOS/Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6525              		.loc 1 4241 9 view .LVU1835
4242:FreeRTOS/Source/tasks.c **** 
 6526              		.loc 1 4242 9 view .LVU1836
4244:FreeRTOS/Source/tasks.c ****         {
 6527              		.loc 1 4244 9 view .LVU1837
4244:FreeRTOS/Source/tasks.c ****         {
 6528              		.loc 1 4244 11 is_stmt 0 view .LVU1838
 6529 0000 0028     		cmp	r0, #0
 6530 0002 5CD0     		beq	.L481
4239:FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6531              		.loc 1 4239 5 view .LVU1839
 6532 0004 38B5     		push	{r3, r4, r5, lr}
 6533              	.LCFI52:
 6534              		.cfi_def_cfa_offset 16
 6535              		.cfi_offset 3, -16
 6536              		.cfi_offset 4, -12
 6537              		.cfi_offset 5, -8
 6538              		.cfi_offset 14, -4
 6539 0006 0446     		mov	r4, r0
4248:FreeRTOS/Source/tasks.c **** 
 6540              		.loc 1 4248 13 is_stmt 1 view .LVU1840
 6541 0008 C36C     		ldr	r3, [r0, #76]
 6542 000a 43B9     		cbnz	r3, .L473
4248:FreeRTOS/Source/tasks.c **** 
 6543              		.loc 1 4248 13 view .LVU1841
 6544              	.LBB288:
 6545              	.LBI288:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6546              		.loc 2 194 34 view .LVU1842
 6547              	.LBB289:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6548              		.loc 2 196 9 view .LVU1843
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 244


 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6549              		.loc 2 198 9 view .LVU1844
 6550              		.syntax unified
 6551              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6552 000c 4FF05003 			mov r3, #80												
 6553 0010 83F31188 		msr basepri, r3											
 6554 0014 BFF36F8F 		isb														
 6555 0018 BFF34F8F 		dsb														
 6556              	
 6557              	@ 0 "" 2
 6558              	.LVL482:
 6559              		.thumb
 6560              		.syntax unified
 6561              	.L474:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6562              		.loc 2 198 9 is_stmt 0 view .LVU1845
 6563              	.LBE289:
 6564              	.LBE288:
4248:FreeRTOS/Source/tasks.c **** 
 6565              		.loc 1 4248 13 is_stmt 1 discriminator 1 view .LVU1846
4248:FreeRTOS/Source/tasks.c **** 
 6566              		.loc 1 4248 13 discriminator 1 view .LVU1847
 6567 001c FEE7     		b	.L474
 6568              	.L473:
4248:FreeRTOS/Source/tasks.c **** 
 6569              		.loc 1 4248 49 discriminator 2 view .LVU1848
4254:FreeRTOS/Source/tasks.c ****             {
 6570              		.loc 1 4254 13 discriminator 2 view .LVU1849
4254:FreeRTOS/Source/tasks.c ****             {
 6571              		.loc 1 4254 22 is_stmt 0 discriminator 2 view .LVU1850
 6572 001e 826C     		ldr	r2, [r0, #72]
4254:FreeRTOS/Source/tasks.c ****             {
 6573              		.loc 1 4254 15 discriminator 2 view .LVU1851
 6574 0020 8A42     		cmp	r2, r1
 6575 0022 00D2     		bcs	.L475
4256:FreeRTOS/Source/tasks.c ****             }
 6576              		.loc 1 4256 33 view .LVU1852
 6577 0024 0A46     		mov	r2, r1
 6578              	.L475:
 6579              	.LVL483:
4264:FreeRTOS/Source/tasks.c ****             {
 6580              		.loc 1 4264 13 is_stmt 1 view .LVU1853
4264:FreeRTOS/Source/tasks.c ****             {
 6581              		.loc 1 4264 22 is_stmt 0 view .LVU1854
 6582 0026 E16A     		ldr	r1, [r4, #44]
 6583              	.LVL484:
4264:FreeRTOS/Source/tasks.c ****             {
 6584              		.loc 1 4264 15 view .LVU1855
 6585 0028 9142     		cmp	r1, r2
 6586 002a 01D0     		beq	.L471
4270:FreeRTOS/Source/tasks.c ****                 {
 6587              		.loc 1 4270 17 is_stmt 1 view .LVU1856
4270:FreeRTOS/Source/tasks.c ****                 {
 6588              		.loc 1 4270 19 is_stmt 0 view .LVU1857
 6589 002c 012B     		cmp	r3, #1
 6590 002e 00D0     		beq	.L484
 6591              	.LVL485:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 245


 6592              	.L471:
4336:FreeRTOS/Source/tasks.c **** 
 6593              		.loc 1 4336 5 view .LVU1858
 6594 0030 38BD     		pop	{r3, r4, r5, pc}
 6595              	.LVL486:
 6596              	.L484:
4275:FreeRTOS/Source/tasks.c **** 
 6597              		.loc 1 4275 21 is_stmt 1 view .LVU1859
 6598 0032 234B     		ldr	r3, .L486
 6599 0034 1B68     		ldr	r3, [r3]
 6600 0036 A342     		cmp	r3, r4
 6601 0038 38D0     		beq	.L485
4275:FreeRTOS/Source/tasks.c **** 
 6602              		.loc 1 4275 58 discriminator 2 view .LVU1860
4280:FreeRTOS/Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6603              		.loc 1 4280 76 discriminator 2 view .LVU1861
4281:FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 6604              		.loc 1 4281 21 discriminator 2 view .LVU1862
 6605              	.LVL487:
4282:FreeRTOS/Source/tasks.c **** 
 6606              		.loc 1 4282 21 discriminator 2 view .LVU1863
4282:FreeRTOS/Source/tasks.c **** 
 6607              		.loc 1 4282 39 is_stmt 0 discriminator 2 view .LVU1864
 6608 003a E262     		str	r2, [r4, #44]
4286:FreeRTOS/Source/tasks.c ****                     {
 6609              		.loc 1 4286 21 is_stmt 1 discriminator 2 view .LVU1865
4286:FreeRTOS/Source/tasks.c ****                     {
 6610              		.loc 1 4286 27 is_stmt 0 discriminator 2 view .LVU1866
 6611 003c A369     		ldr	r3, [r4, #24]
4286:FreeRTOS/Source/tasks.c ****                     {
 6612              		.loc 1 4286 23 discriminator 2 view .LVU1867
 6613 003e 002B     		cmp	r3, #0
 6614 0040 02DB     		blt	.L478
4288:FreeRTOS/Source/tasks.c ****                     }
 6615              		.loc 1 4288 25 is_stmt 1 view .LVU1868
 6616 0042 C2F10502 		rsb	r2, r2, #5
 6617              	.LVL488:
4288:FreeRTOS/Source/tasks.c ****                     }
 6618              		.loc 1 4288 25 is_stmt 0 view .LVU1869
 6619 0046 A261     		str	r2, [r4, #24]
 6620              	.L478:
4292:FreeRTOS/Source/tasks.c ****                     }
 6621              		.loc 1 4292 49 is_stmt 1 view .LVU1870
4301:FreeRTOS/Source/tasks.c ****                     {
 6622              		.loc 1 4301 21 view .LVU1871
4301:FreeRTOS/Source/tasks.c ****                     {
 6623              		.loc 1 4301 25 is_stmt 0 view .LVU1872
 6624 0048 6269     		ldr	r2, [r4, #20]
 6625 004a 01EB8101 		add	r1, r1, r1, lsl #2
 6626              	.LVL489:
4301:FreeRTOS/Source/tasks.c ****                     {
 6627              		.loc 1 4301 25 view .LVU1873
 6628 004e 1D4B     		ldr	r3, .L486+4
 6629 0050 03EB8103 		add	r3, r3, r1, lsl #2
4301:FreeRTOS/Source/tasks.c ****                     {
 6630              		.loc 1 4301 23 view .LVU1874
 6631 0054 9A42     		cmp	r2, r3
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 246


 6632 0056 EBD1     		bne	.L471
4303:FreeRTOS/Source/tasks.c ****                         {
 6633              		.loc 1 4303 25 is_stmt 1 view .LVU1875
4303:FreeRTOS/Source/tasks.c ****                         {
 6634              		.loc 1 4303 29 is_stmt 0 view .LVU1876
 6635 0058 251D     		adds	r5, r4, #4
 6636 005a 2846     		mov	r0, r5
 6637              	.LVL490:
4303:FreeRTOS/Source/tasks.c ****                         {
 6638              		.loc 1 4303 29 view .LVU1877
 6639 005c FFF7FEFF 		bl	uxListRemove
 6640              	.LVL491:
4303:FreeRTOS/Source/tasks.c ****                         {
 6641              		.loc 1 4303 27 view .LVU1878
 6642 0060 38B9     		cbnz	r0, .L479
4308:FreeRTOS/Source/tasks.c ****                         }
 6643              		.loc 1 4308 29 is_stmt 1 view .LVU1879
 6644 0062 E36A     		ldr	r3, [r4, #44]
 6645 0064 0122     		movs	r2, #1
 6646 0066 9A40     		lsls	r2, r2, r3
 6647 0068 1749     		ldr	r1, .L486+8
 6648 006a 0B68     		ldr	r3, [r1]
 6649 006c 23EA0203 		bic	r3, r3, r2
 6650 0070 0B60     		str	r3, [r1]
 6651              	.L479:
4312:FreeRTOS/Source/tasks.c ****                         }
 6652              		.loc 1 4312 53 view .LVU1880
4315:FreeRTOS/Source/tasks.c ****                     }
 6653              		.loc 1 4315 25 view .LVU1881
4315:FreeRTOS/Source/tasks.c ****                     }
 6654              		.loc 1 4315 25 view .LVU1882
 6655 0072 E36A     		ldr	r3, [r4, #44]
 6656 0074 0122     		movs	r2, #1
 6657 0076 9A40     		lsls	r2, r2, r3
 6658 0078 1349     		ldr	r1, .L486+8
 6659 007a 0868     		ldr	r0, [r1]
 6660 007c 0243     		orrs	r2, r2, r0
 6661 007e 0A60     		str	r2, [r1]
 6662              	.LBB290:
4315:FreeRTOS/Source/tasks.c ****                     }
 6663              		.loc 1 4315 25 view .LVU1883
 6664 0080 104A     		ldr	r2, .L486+4
 6665 0082 03EB8303 		add	r3, r3, r3, lsl #2
 6666 0086 02EB8303 		add	r3, r2, r3, lsl #2
 6667 008a 5B68     		ldr	r3, [r3, #4]
 6668              	.LVL492:
4315:FreeRTOS/Source/tasks.c ****                     }
 6669              		.loc 1 4315 25 view .LVU1884
4315:FreeRTOS/Source/tasks.c ****                     }
 6670              		.loc 1 4315 25 view .LVU1885
4315:FreeRTOS/Source/tasks.c ****                     }
 6671              		.loc 1 4315 25 view .LVU1886
 6672 008c A360     		str	r3, [r4, #8]
4315:FreeRTOS/Source/tasks.c ****                     }
 6673              		.loc 1 4315 25 view .LVU1887
 6674 008e 9968     		ldr	r1, [r3, #8]
 6675 0090 E160     		str	r1, [r4, #12]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 247


4315:FreeRTOS/Source/tasks.c ****                     }
 6676              		.loc 1 4315 25 view .LVU1888
 6677 0092 4D60     		str	r5, [r1, #4]
4315:FreeRTOS/Source/tasks.c ****                     }
 6678              		.loc 1 4315 25 view .LVU1889
 6679 0094 9D60     		str	r5, [r3, #8]
4315:FreeRTOS/Source/tasks.c ****                     }
 6680              		.loc 1 4315 25 view .LVU1890
 6681 0096 E36A     		ldr	r3, [r4, #44]
 6682              	.LVL493:
4315:FreeRTOS/Source/tasks.c ****                     }
 6683              		.loc 1 4315 25 is_stmt 0 view .LVU1891
 6684 0098 03EB8301 		add	r1, r3, r3, lsl #2
 6685 009c 8800     		lsls	r0, r1, #2
 6686 009e 02EB8101 		add	r1, r2, r1, lsl #2
 6687 00a2 6161     		str	r1, [r4, #20]
4315:FreeRTOS/Source/tasks.c ****                     }
 6688              		.loc 1 4315 25 is_stmt 1 view .LVU1892
 6689 00a4 1158     		ldr	r1, [r2, r0]
 6690 00a6 0131     		adds	r1, r1, #1
 6691 00a8 1150     		str	r1, [r2, r0]
 6692              	.LBE290:
4315:FreeRTOS/Source/tasks.c ****                     }
 6693              		.loc 1 4315 25 view .LVU1893
4315:FreeRTOS/Source/tasks.c ****                     }
 6694              		.loc 1 4315 55 view .LVU1894
4334:FreeRTOS/Source/tasks.c ****         }
 6695              		.loc 1 4334 37 view .LVU1895
4336:FreeRTOS/Source/tasks.c **** 
 6696              		.loc 1 4336 5 is_stmt 0 view .LVU1896
 6697 00aa C1E7     		b	.L471
 6698              	.LVL494:
 6699              	.L485:
4275:FreeRTOS/Source/tasks.c **** 
 6700              		.loc 1 4275 21 is_stmt 1 view .LVU1897
 6701              	.LBB291:
 6702              	.LBI291:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6703              		.loc 2 194 34 view .LVU1898
 6704              	.LBB292:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6705              		.loc 2 196 9 view .LVU1899
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6706              		.loc 2 198 9 view .LVU1900
 6707              		.syntax unified
 6708              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6709 00ac 4FF05003 			mov r3, #80												
 6710 00b0 83F31188 		msr basepri, r3											
 6711 00b4 BFF36F8F 		isb														
 6712 00b8 BFF34F8F 		dsb														
 6713              	
 6714              	@ 0 "" 2
 6715              	.LVL495:
 6716              		.thumb
 6717              		.syntax unified
 6718              	.L477:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 248


 6719              		.loc 2 198 9 is_stmt 0 view .LVU1901
 6720              	.LBE292:
 6721              	.LBE291:
4275:FreeRTOS/Source/tasks.c **** 
 6722              		.loc 1 4275 21 is_stmt 1 discriminator 2 view .LVU1902
4275:FreeRTOS/Source/tasks.c **** 
 6723              		.loc 1 4275 21 discriminator 2 view .LVU1903
 6724 00bc FEE7     		b	.L477
 6725              	.LVL496:
 6726              	.L481:
 6727              	.LCFI53:
 6728              		.cfi_def_cfa_offset 0
 6729              		.cfi_restore 3
 6730              		.cfi_restore 4
 6731              		.cfi_restore 5
 6732              		.cfi_restore 14
4275:FreeRTOS/Source/tasks.c **** 
 6733              		.loc 1 4275 21 is_stmt 0 discriminator 2 view .LVU1904
 6734 00be 7047     		bx	lr
 6735              	.L487:
 6736              		.align	2
 6737              	.L486:
 6738 00c0 00000000 		.word	pxCurrentTCB
 6739 00c4 00000000 		.word	pxReadyTasksLists
 6740 00c8 00000000 		.word	uxTopReadyPriority
 6741              		.cfi_endproc
 6742              	.LFE54:
 6744              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6745              		.align	1
 6746              		.global	uxTaskResetEventItemValue
 6747              		.syntax unified
 6748              		.thumb
 6749              		.thumb_func
 6751              	uxTaskResetEventItemValue:
 6752              	.LFB55:
4659:FreeRTOS/Source/tasks.c ****     TickType_t uxReturn;
 6753              		.loc 1 4659 1 is_stmt 1 view -0
 6754              		.cfi_startproc
 6755              		@ args = 0, pretend = 0, frame = 0
 6756              		@ frame_needed = 0, uses_anonymous_args = 0
 6757              		@ link register save eliminated.
4660:FreeRTOS/Source/tasks.c **** 
 6758              		.loc 1 4660 5 view .LVU1906
4662:FreeRTOS/Source/tasks.c **** 
 6759              		.loc 1 4662 5 view .LVU1907
4662:FreeRTOS/Source/tasks.c **** 
 6760              		.loc 1 4662 16 is_stmt 0 view .LVU1908
 6761 0000 044A     		ldr	r2, .L489
 6762 0002 1368     		ldr	r3, [r2]
4662:FreeRTOS/Source/tasks.c **** 
 6763              		.loc 1 4662 14 view .LVU1909
 6764 0004 9869     		ldr	r0, [r3, #24]
 6765              	.LVL497:
4666:FreeRTOS/Source/tasks.c **** 
 6766              		.loc 1 4666 5 is_stmt 1 view .LVU1910
 6767 0006 1368     		ldr	r3, [r2]
 6768 0008 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 249


 6769 000a 1268     		ldr	r2, [r2]
 6770 000c C3F10503 		rsb	r3, r3, #5
 6771 0010 9361     		str	r3, [r2, #24]
4668:FreeRTOS/Source/tasks.c **** }
 6772              		.loc 1 4668 5 view .LVU1911
4669:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 6773              		.loc 1 4669 1 is_stmt 0 view .LVU1912
 6774 0012 7047     		bx	lr
 6775              	.L490:
 6776              		.align	2
 6777              	.L489:
 6778 0014 00000000 		.word	pxCurrentTCB
 6779              		.cfi_endproc
 6780              	.LFE55:
 6782              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6783              		.align	1
 6784              		.global	pvTaskIncrementMutexHeldCount
 6785              		.syntax unified
 6786              		.thumb
 6787              		.thumb_func
 6789              	pvTaskIncrementMutexHeldCount:
 6790              	.LFB56:
4675:FreeRTOS/Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 6791              		.loc 1 4675 5 is_stmt 1 view -0
 6792              		.cfi_startproc
 6793              		@ args = 0, pretend = 0, frame = 0
 6794              		@ frame_needed = 0, uses_anonymous_args = 0
 6795              		@ link register save eliminated.
4678:FreeRTOS/Source/tasks.c ****         {
 6796              		.loc 1 4678 9 view .LVU1914
4678:FreeRTOS/Source/tasks.c ****         {
 6797              		.loc 1 4678 26 is_stmt 0 view .LVU1915
 6798 0000 054B     		ldr	r3, .L493
 6799 0002 1B68     		ldr	r3, [r3]
4678:FreeRTOS/Source/tasks.c ****         {
 6800              		.loc 1 4678 11 view .LVU1916
 6801 0004 23B1     		cbz	r3, .L492
4680:FreeRTOS/Source/tasks.c ****         }
 6802              		.loc 1 4680 13 is_stmt 1 view .LVU1917
4680:FreeRTOS/Source/tasks.c ****         }
 6803              		.loc 1 4680 27 is_stmt 0 view .LVU1918
 6804 0006 044B     		ldr	r3, .L493
 6805 0008 1A68     		ldr	r2, [r3]
 6806 000a D36C     		ldr	r3, [r2, #76]
4680:FreeRTOS/Source/tasks.c ****         }
 6807              		.loc 1 4680 44 view .LVU1919
 6808 000c 0133     		adds	r3, r3, #1
 6809 000e D364     		str	r3, [r2, #76]
 6810              	.L492:
4683:FreeRTOS/Source/tasks.c ****     }
 6811              		.loc 1 4683 9 is_stmt 1 view .LVU1920
4683:FreeRTOS/Source/tasks.c ****     }
 6812              		.loc 1 4683 16 is_stmt 0 view .LVU1921
 6813 0010 014B     		ldr	r3, .L493
 6814 0012 1868     		ldr	r0, [r3]
4684:FreeRTOS/Source/tasks.c **** 
 6815              		.loc 1 4684 5 view .LVU1922
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 250


 6816 0014 7047     		bx	lr
 6817              	.L494:
 6818 0016 00BF     		.align	2
 6819              	.L493:
 6820 0018 00000000 		.word	pxCurrentTCB
 6821              		.cfi_endproc
 6822              	.LFE56:
 6824              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 6825              		.align	1
 6826              		.global	ulTaskGenericNotifyTake
 6827              		.syntax unified
 6828              		.thumb
 6829              		.thumb_func
 6831              	ulTaskGenericNotifyTake:
 6832              	.LVL498:
 6833              	.LFB57:
4694:FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 6834              		.loc 1 4694 5 is_stmt 1 view -0
 6835              		.cfi_startproc
 6836              		@ args = 0, pretend = 0, frame = 0
 6837              		@ frame_needed = 0, uses_anonymous_args = 0
4695:FreeRTOS/Source/tasks.c **** 
 6838              		.loc 1 4695 9 view .LVU1924
4697:FreeRTOS/Source/tasks.c **** 
 6839              		.loc 1 4697 9 view .LVU1925
 6840 0000 40B1     		cbz	r0, .L496
4697:FreeRTOS/Source/tasks.c **** 
 6841              		.loc 1 4697 9 view .LVU1926
 6842              	.LBB293:
 6843              	.LBI293:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6844              		.loc 2 194 34 view .LVU1927
 6845              	.LBB294:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6846              		.loc 2 196 9 view .LVU1928
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6847              		.loc 2 198 9 view .LVU1929
 6848              		.syntax unified
 6849              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6850 0002 4FF05003 			mov r3, #80												
 6851 0006 83F31188 		msr basepri, r3											
 6852 000a BFF36F8F 		isb														
 6853 000e BFF34F8F 		dsb														
 6854              	
 6855              	@ 0 "" 2
 6856              	.LVL499:
 6857              		.thumb
 6858              		.syntax unified
 6859              	.L497:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6860              		.loc 2 198 9 is_stmt 0 view .LVU1930
 6861              	.LBE294:
 6862              	.LBE293:
4697:FreeRTOS/Source/tasks.c **** 
 6863              		.loc 1 4697 9 is_stmt 1 discriminator 1 view .LVU1931
4697:FreeRTOS/Source/tasks.c **** 
 6864              		.loc 1 4697 9 discriminator 1 view .LVU1932
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 251


 6865 0012 FEE7     		b	.L497
 6866              	.L496:
4694:FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 6867              		.loc 1 4694 5 is_stmt 0 discriminator 2 view .LVU1933
 6868 0014 70B5     		push	{r4, r5, r6, lr}
 6869              	.LCFI54:
 6870              		.cfi_def_cfa_offset 16
 6871              		.cfi_offset 4, -16
 6872              		.cfi_offset 5, -12
 6873              		.cfi_offset 6, -8
 6874              		.cfi_offset 14, -4
 6875 0016 0D46     		mov	r5, r1
 6876 0018 1446     		mov	r4, r2
 6877 001a 0646     		mov	r6, r0
4697:FreeRTOS/Source/tasks.c **** 
 6878              		.loc 1 4697 78 is_stmt 1 discriminator 2 view .LVU1934
4699:FreeRTOS/Source/tasks.c ****         {
 6879              		.loc 1 4699 9 discriminator 2 view .LVU1935
 6880 001c FFF7FEFF 		bl	vPortEnterCritical
 6881              	.LVL500:
4702:FreeRTOS/Source/tasks.c ****             {
 6882              		.loc 1 4702 13 discriminator 2 view .LVU1936
4702:FreeRTOS/Source/tasks.c ****             {
 6883              		.loc 1 4702 29 is_stmt 0 discriminator 2 view .LVU1937
 6884 0020 204B     		ldr	r3, .L504
 6885 0022 1B68     		ldr	r3, [r3]
4702:FreeRTOS/Source/tasks.c ****             {
 6886              		.loc 1 4702 46 discriminator 2 view .LVU1938
 6887 0024 06F11402 		add	r2, r6, #20
 6888 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
4702:FreeRTOS/Source/tasks.c ****             {
 6889              		.loc 1 4702 15 discriminator 2 view .LVU1939
 6890 002c 33B9     		cbnz	r3, .L498
4705:FreeRTOS/Source/tasks.c **** 
 6891              		.loc 1 4705 17 is_stmt 1 view .LVU1940
4705:FreeRTOS/Source/tasks.c **** 
 6892              		.loc 1 4705 29 is_stmt 0 view .LVU1941
 6893 002e 1D4B     		ldr	r3, .L504
 6894 0030 1B68     		ldr	r3, [r3]
4705:FreeRTOS/Source/tasks.c **** 
 6895              		.loc 1 4705 62 view .LVU1942
 6896 0032 3344     		add	r3, r3, r6
 6897 0034 0122     		movs	r2, #1
 6898 0036 83F85420 		strb	r2, [r3, #84]
4707:FreeRTOS/Source/tasks.c ****                 {
 6899              		.loc 1 4707 17 is_stmt 1 view .LVU1943
4707:FreeRTOS/Source/tasks.c ****                 {
 6900              		.loc 1 4707 19 is_stmt 0 view .LVU1944
 6901 003a E4B9     		cbnz	r4, .L503
 6902              	.L498:
4725:FreeRTOS/Source/tasks.c ****             }
 6903              		.loc 1 4725 41 is_stmt 1 view .LVU1945
4728:FreeRTOS/Source/tasks.c **** 
 6904              		.loc 1 4728 9 view .LVU1946
 6905 003c FFF7FEFF 		bl	vPortExitCritical
 6906              	.LVL501:
4730:FreeRTOS/Source/tasks.c ****         {
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 252


 6907              		.loc 1 4730 9 view .LVU1947
 6908 0040 FFF7FEFF 		bl	vPortEnterCritical
 6909              	.LVL502:
4732:FreeRTOS/Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 6910              		.loc 1 4732 51 view .LVU1948
4733:FreeRTOS/Source/tasks.c **** 
 6911              		.loc 1 4733 13 view .LVU1949
4733:FreeRTOS/Source/tasks.c **** 
 6912              		.loc 1 4733 36 is_stmt 0 view .LVU1950
 6913 0044 174B     		ldr	r3, .L504
 6914 0046 1B68     		ldr	r3, [r3]
4733:FreeRTOS/Source/tasks.c **** 
 6915              		.loc 1 4733 22 view .LVU1951
 6916 0048 06F11402 		add	r2, r6, #20
 6917 004c 53F82240 		ldr	r4, [r3, r2, lsl #2]
 6918              	.LVL503:
4735:FreeRTOS/Source/tasks.c ****             {
 6919              		.loc 1 4735 13 is_stmt 1 view .LVU1952
4735:FreeRTOS/Source/tasks.c ****             {
 6920              		.loc 1 4735 15 is_stmt 0 view .LVU1953
 6921 0050 3CB1     		cbz	r4, .L499
4737:FreeRTOS/Source/tasks.c ****                 {
 6922              		.loc 1 4737 17 is_stmt 1 view .LVU1954
4737:FreeRTOS/Source/tasks.c ****                 {
 6923              		.loc 1 4737 19 is_stmt 0 view .LVU1955
 6924 0052 FDB1     		cbz	r5, .L500
4739:FreeRTOS/Source/tasks.c ****                 }
 6925              		.loc 1 4739 21 is_stmt 1 view .LVU1956
4739:FreeRTOS/Source/tasks.c ****                 }
 6926              		.loc 1 4739 33 is_stmt 0 view .LVU1957
 6927 0054 134B     		ldr	r3, .L504
 6928 0056 1A68     		ldr	r2, [r3]
4739:FreeRTOS/Source/tasks.c ****                 }
 6929              		.loc 1 4739 68 view .LVU1958
 6930 0058 06F11403 		add	r3, r6, #20
 6931 005c 0021     		movs	r1, #0
 6932 005e 42F82310 		str	r1, [r2, r3, lsl #2]
 6933              	.L499:
4748:FreeRTOS/Source/tasks.c ****             }
 6934              		.loc 1 4748 41 is_stmt 1 view .LVU1959
4751:FreeRTOS/Source/tasks.c ****         }
 6935              		.loc 1 4751 13 view .LVU1960
4751:FreeRTOS/Source/tasks.c ****         }
 6936              		.loc 1 4751 25 is_stmt 0 view .LVU1961
 6937 0062 104B     		ldr	r3, .L504
 6938 0064 1B68     		ldr	r3, [r3]
4751:FreeRTOS/Source/tasks.c ****         }
 6939              		.loc 1 4751 58 view .LVU1962
 6940 0066 3344     		add	r3, r3, r6
 6941 0068 0022     		movs	r2, #0
 6942 006a 83F85420 		strb	r2, [r3, #84]
4753:FreeRTOS/Source/tasks.c **** 
 6943              		.loc 1 4753 9 is_stmt 1 view .LVU1963
 6944 006e FFF7FEFF 		bl	vPortExitCritical
 6945              	.LVL504:
4755:FreeRTOS/Source/tasks.c ****     }
 6946              		.loc 1 4755 9 view .LVU1964
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 253


4756:FreeRTOS/Source/tasks.c **** 
 6947              		.loc 1 4756 5 is_stmt 0 view .LVU1965
 6948 0072 2046     		mov	r0, r4
 6949 0074 70BD     		pop	{r4, r5, r6, pc}
 6950              	.LVL505:
 6951              	.L503:
4709:FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 6952              		.loc 1 4709 21 is_stmt 1 view .LVU1966
 6953 0076 1146     		mov	r1, r2
 6954 0078 2046     		mov	r0, r4
 6955 007a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6956              	.LVL506:
4710:FreeRTOS/Source/tasks.c **** 
 6957              		.loc 1 4710 65 view .LVU1967
4716:FreeRTOS/Source/tasks.c ****                 }
 6958              		.loc 1 4716 21 view .LVU1968
 6959 007e 4FF0E023 		mov	r3, #-536813568
 6960 0082 4FF08052 		mov	r2, #268435456
 6961 0086 C3F8042D 		str	r2, [r3, #3332]
4716:FreeRTOS/Source/tasks.c ****                 }
 6962              		.loc 1 4716 21 view .LVU1969
 6963              		.syntax unified
 6964              	@ 4716 "FreeRTOS/Source/tasks.c" 1
 6965 008a BFF34F8F 		dsb
 6966              	@ 0 "" 2
4716:FreeRTOS/Source/tasks.c ****                 }
 6967              		.loc 1 4716 21 view .LVU1970
 6968              	@ 4716 "FreeRTOS/Source/tasks.c" 1
 6969 008e BFF36F8F 		isb
 6970              	@ 0 "" 2
4716:FreeRTOS/Source/tasks.c ****                 }
 6971              		.loc 1 4716 43 view .LVU1971
 6972              		.thumb
 6973              		.syntax unified
 6974 0092 D3E7     		b	.L498
 6975              	.LVL507:
 6976              	.L500:
4743:FreeRTOS/Source/tasks.c ****                 }
 6977              		.loc 1 4743 21 view .LVU1972
4743:FreeRTOS/Source/tasks.c ****                 }
 6978              		.loc 1 4743 33 is_stmt 0 view .LVU1973
 6979 0094 034B     		ldr	r3, .L504
 6980 0096 1A68     		ldr	r2, [r3]
4743:FreeRTOS/Source/tasks.c ****                 }
 6981              		.loc 1 4743 79 view .LVU1974
 6982 0098 631E     		subs	r3, r4, #1
4743:FreeRTOS/Source/tasks.c ****                 }
 6983              		.loc 1 4743 68 view .LVU1975
 6984 009a 06F11401 		add	r1, r6, #20
 6985 009e 42F82130 		str	r3, [r2, r1, lsl #2]
 6986 00a2 DEE7     		b	.L499
 6987              	.L505:
 6988              		.align	2
 6989              	.L504:
 6990 00a4 00000000 		.word	pxCurrentTCB
 6991              		.cfi_endproc
 6992              	.LFE57:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 254


 6994              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 6995              		.align	1
 6996              		.global	xTaskGenericNotifyWait
 6997              		.syntax unified
 6998              		.thumb
 6999              		.thumb_func
 7001              	xTaskGenericNotifyWait:
 7002              	.LVL508:
 7003              	.LFB58:
4768:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 7004              		.loc 1 4768 5 is_stmt 1 view -0
 7005              		.cfi_startproc
 7006              		@ args = 4, pretend = 0, frame = 0
 7007              		@ frame_needed = 0, uses_anonymous_args = 0
4768:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 7008              		.loc 1 4768 5 is_stmt 0 view .LVU1977
 7009 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7010              	.LCFI55:
 7011              		.cfi_def_cfa_offset 24
 7012              		.cfi_offset 3, -24
 7013              		.cfi_offset 4, -20
 7014              		.cfi_offset 5, -16
 7015              		.cfi_offset 6, -12
 7016              		.cfi_offset 7, -8
 7017              		.cfi_offset 14, -4
4769:FreeRTOS/Source/tasks.c **** 
 7018              		.loc 1 4769 9 is_stmt 1 view .LVU1978
4771:FreeRTOS/Source/tasks.c **** 
 7019              		.loc 1 4771 9 view .LVU1979
 7020 0002 40B1     		cbz	r0, .L507
4771:FreeRTOS/Source/tasks.c **** 
 7021              		.loc 1 4771 9 view .LVU1980
 7022              	.LBB295:
 7023              	.LBI295:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7024              		.loc 2 194 34 view .LVU1981
 7025              	.LBB296:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7026              		.loc 2 196 9 view .LVU1982
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7027              		.loc 2 198 9 view .LVU1983
 7028              		.syntax unified
 7029              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7030 0004 4FF05003 			mov r3, #80												
 7031 0008 83F31188 		msr basepri, r3											
 7032 000c BFF36F8F 		isb														
 7033 0010 BFF34F8F 		dsb														
 7034              	
 7035              	@ 0 "" 2
 7036              	.LVL509:
 7037              		.thumb
 7038              		.syntax unified
 7039              	.L508:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7040              		.loc 2 198 9 is_stmt 0 view .LVU1984
 7041              	.LBE296:
 7042              	.LBE295:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 255


4771:FreeRTOS/Source/tasks.c **** 
 7043              		.loc 1 4771 9 is_stmt 1 discriminator 1 view .LVU1985
4771:FreeRTOS/Source/tasks.c **** 
 7044              		.loc 1 4771 9 discriminator 1 view .LVU1986
 7045 0014 FEE7     		b	.L508
 7046              	.LVL510:
 7047              	.L507:
4771:FreeRTOS/Source/tasks.c **** 
 7048              		.loc 1 4771 9 is_stmt 0 discriminator 1 view .LVU1987
 7049 0016 0D46     		mov	r5, r1
 7050 0018 1646     		mov	r6, r2
 7051 001a 1C46     		mov	r4, r3
 7052 001c 0746     		mov	r7, r0
4771:FreeRTOS/Source/tasks.c **** 
 7053              		.loc 1 4771 78 is_stmt 1 discriminator 2 view .LVU1988
4773:FreeRTOS/Source/tasks.c ****         {
 7054              		.loc 1 4773 9 discriminator 2 view .LVU1989
 7055 001e FFF7FEFF 		bl	vPortEnterCritical
 7056              	.LVL511:
4776:FreeRTOS/Source/tasks.c ****             {
 7057              		.loc 1 4776 13 discriminator 2 view .LVU1990
4776:FreeRTOS/Source/tasks.c ****             {
 7058              		.loc 1 4776 29 is_stmt 0 discriminator 2 view .LVU1991
 7059 0022 294B     		ldr	r3, .L516
 7060 0024 1B68     		ldr	r3, [r3]
4776:FreeRTOS/Source/tasks.c ****             {
 7061              		.loc 1 4776 44 discriminator 2 view .LVU1992
 7062 0026 3B44     		add	r3, r3, r7
 7063 0028 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 7064 002c DBB2     		uxtb	r3, r3
4776:FreeRTOS/Source/tasks.c ****             {
 7065              		.loc 1 4776 15 discriminator 2 view .LVU1993
 7066 002e 022B     		cmp	r3, #2
 7067 0030 10D0     		beq	.L509
4781:FreeRTOS/Source/tasks.c **** 
 7068              		.loc 1 4781 17 is_stmt 1 view .LVU1994
4781:FreeRTOS/Source/tasks.c **** 
 7069              		.loc 1 4781 29 is_stmt 0 view .LVU1995
 7070 0032 254A     		ldr	r2, .L516
 7071 0034 1168     		ldr	r1, [r2]
4781:FreeRTOS/Source/tasks.c **** 
 7072              		.loc 1 4781 46 view .LVU1996
 7073 0036 07F11400 		add	r0, r7, #20
 7074 003a 51F82030 		ldr	r3, [r1, r0, lsl #2]
4781:FreeRTOS/Source/tasks.c **** 
 7075              		.loc 1 4781 64 view .LVU1997
 7076 003e 23EA0503 		bic	r3, r3, r5
 7077 0042 41F82030 		str	r3, [r1, r0, lsl #2]
4784:FreeRTOS/Source/tasks.c **** 
 7078              		.loc 1 4784 17 is_stmt 1 view .LVU1998
4784:FreeRTOS/Source/tasks.c **** 
 7079              		.loc 1 4784 29 is_stmt 0 view .LVU1999
 7080 0046 1368     		ldr	r3, [r2]
4784:FreeRTOS/Source/tasks.c **** 
 7081              		.loc 1 4784 62 view .LVU2000
 7082 0048 3B44     		add	r3, r3, r7
 7083 004a 0122     		movs	r2, #1
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 256


 7084 004c 83F85420 		strb	r2, [r3, #84]
4786:FreeRTOS/Source/tasks.c ****                 {
 7085              		.loc 1 4786 17 is_stmt 1 view .LVU2001
4786:FreeRTOS/Source/tasks.c ****                 {
 7086              		.loc 1 4786 19 is_stmt 0 view .LVU2002
 7087 0050 069B     		ldr	r3, [sp, #24]
 7088 0052 F3B9     		cbnz	r3, .L514
 7089              	.LVL512:
 7090              	.L509:
4804:FreeRTOS/Source/tasks.c ****             }
 7091              		.loc 1 4804 41 is_stmt 1 view .LVU2003
4807:FreeRTOS/Source/tasks.c **** 
 7092              		.loc 1 4807 9 view .LVU2004
 7093 0054 FFF7FEFF 		bl	vPortExitCritical
 7094              	.LVL513:
4809:FreeRTOS/Source/tasks.c ****         {
 7095              		.loc 1 4809 9 view .LVU2005
 7096 0058 FFF7FEFF 		bl	vPortEnterCritical
 7097              	.LVL514:
4811:FreeRTOS/Source/tasks.c **** 
 7098              		.loc 1 4811 51 view .LVU2006
4813:FreeRTOS/Source/tasks.c ****             {
 7099              		.loc 1 4813 13 view .LVU2007
4813:FreeRTOS/Source/tasks.c ****             {
 7100              		.loc 1 4813 15 is_stmt 0 view .LVU2008
 7101 005c 34B1     		cbz	r4, .L510
4817:FreeRTOS/Source/tasks.c ****             }
 7102              		.loc 1 4817 17 is_stmt 1 view .LVU2009
4817:FreeRTOS/Source/tasks.c ****             }
 7103              		.loc 1 4817 53 is_stmt 0 view .LVU2010
 7104 005e 1A4B     		ldr	r3, .L516
 7105 0060 1B68     		ldr	r3, [r3]
4817:FreeRTOS/Source/tasks.c ****             }
 7106              		.loc 1 4817 70 view .LVU2011
 7107 0062 07F11402 		add	r2, r7, #20
 7108 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
4817:FreeRTOS/Source/tasks.c ****             }
 7109              		.loc 1 4817 39 view .LVU2012
 7110 006a 2360     		str	r3, [r4]
 7111              	.L510:
4824:FreeRTOS/Source/tasks.c ****             {
 7112              		.loc 1 4824 13 is_stmt 1 view .LVU2013
4824:FreeRTOS/Source/tasks.c ****             {
 7113              		.loc 1 4824 29 is_stmt 0 view .LVU2014
 7114 006c 164B     		ldr	r3, .L516
 7115 006e 1B68     		ldr	r3, [r3]
4824:FreeRTOS/Source/tasks.c ****             {
 7116              		.loc 1 4824 44 view .LVU2015
 7117 0070 3B44     		add	r3, r3, r7
 7118 0072 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 7119 0076 DBB2     		uxtb	r3, r3
4824:FreeRTOS/Source/tasks.c ****             {
 7120              		.loc 1 4824 15 view .LVU2016
 7121 0078 022B     		cmp	r3, #2
 7122 007a 19D0     		beq	.L515
4827:FreeRTOS/Source/tasks.c ****             }
 7123              		.loc 1 4827 25 view .LVU2017
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 257


 7124 007c 0024     		movs	r4, #0
 7125              	.LVL515:
 7126              	.L511:
4837:FreeRTOS/Source/tasks.c ****         }
 7127              		.loc 1 4837 13 is_stmt 1 view .LVU2018
4837:FreeRTOS/Source/tasks.c ****         }
 7128              		.loc 1 4837 25 is_stmt 0 view .LVU2019
 7129 007e 124B     		ldr	r3, .L516
 7130 0080 1B68     		ldr	r3, [r3]
4837:FreeRTOS/Source/tasks.c ****         }
 7131              		.loc 1 4837 58 view .LVU2020
 7132 0082 3B44     		add	r3, r3, r7
 7133 0084 0022     		movs	r2, #0
 7134 0086 83F85420 		strb	r2, [r3, #84]
4839:FreeRTOS/Source/tasks.c **** 
 7135              		.loc 1 4839 9 is_stmt 1 view .LVU2021
 7136 008a FFF7FEFF 		bl	vPortExitCritical
 7137              	.LVL516:
4841:FreeRTOS/Source/tasks.c ****     }
 7138              		.loc 1 4841 9 view .LVU2022
4842:FreeRTOS/Source/tasks.c **** 
 7139              		.loc 1 4842 5 is_stmt 0 view .LVU2023
 7140 008e 2046     		mov	r0, r4
 7141 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7142              	.LVL517:
 7143              	.L514:
4788:FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 7144              		.loc 1 4788 21 is_stmt 1 view .LVU2024
 7145 0092 1146     		mov	r1, r2
 7146 0094 1846     		mov	r0, r3
 7147 0096 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 7148              	.LVL518:
4789:FreeRTOS/Source/tasks.c **** 
 7149              		.loc 1 4789 65 view .LVU2025
4795:FreeRTOS/Source/tasks.c ****                 }
 7150              		.loc 1 4795 21 view .LVU2026
 7151 009a 4FF0E023 		mov	r3, #-536813568
 7152 009e 4FF08052 		mov	r2, #268435456
 7153 00a2 C3F8042D 		str	r2, [r3, #3332]
 7154              	.LVL519:
4795:FreeRTOS/Source/tasks.c ****                 }
 7155              		.loc 1 4795 21 view .LVU2027
 7156              		.syntax unified
 7157              	@ 4795 "FreeRTOS/Source/tasks.c" 1
 7158 00a6 BFF34F8F 		dsb
 7159              	@ 0 "" 2
4795:FreeRTOS/Source/tasks.c ****                 }
 7160              		.loc 1 4795 21 view .LVU2028
 7161              	@ 4795 "FreeRTOS/Source/tasks.c" 1
 7162 00aa BFF36F8F 		isb
 7163              	@ 0 "" 2
4795:FreeRTOS/Source/tasks.c ****                 }
 7164              		.loc 1 4795 43 view .LVU2029
 7165              		.thumb
 7166              		.syntax unified
 7167 00ae D1E7     		b	.L509
 7168              	.L515:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 258


4833:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 7169              		.loc 1 4833 17 view .LVU2030
4833:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 7170              		.loc 1 4833 29 is_stmt 0 view .LVU2031
 7171 00b0 054B     		ldr	r3, .L516
 7172 00b2 1A68     		ldr	r2, [r3]
4833:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 7173              		.loc 1 4833 46 view .LVU2032
 7174 00b4 07F11401 		add	r1, r7, #20
 7175 00b8 52F82130 		ldr	r3, [r2, r1, lsl #2]
4833:FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 7176              		.loc 1 4833 64 view .LVU2033
 7177 00bc 23EA0603 		bic	r3, r3, r6
 7178 00c0 42F82130 		str	r3, [r2, r1, lsl #2]
4834:FreeRTOS/Source/tasks.c ****             }
 7179              		.loc 1 4834 17 is_stmt 1 view .LVU2034
 7180              	.LVL520:
4834:FreeRTOS/Source/tasks.c ****             }
 7181              		.loc 1 4834 25 is_stmt 0 view .LVU2035
 7182 00c4 0124     		movs	r4, #1
 7183              	.LVL521:
4834:FreeRTOS/Source/tasks.c ****             }
 7184              		.loc 1 4834 25 view .LVU2036
 7185 00c6 DAE7     		b	.L511
 7186              	.L517:
 7187              		.align	2
 7188              	.L516:
 7189 00c8 00000000 		.word	pxCurrentTCB
 7190              		.cfi_endproc
 7191              	.LFE58:
 7193              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7194              		.align	1
 7195              		.global	xTaskGenericNotify
 7196              		.syntax unified
 7197              		.thumb
 7198              		.thumb_func
 7200              	xTaskGenericNotify:
 7201              	.LVL522:
 7202              	.LFB59:
4854:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7203              		.loc 1 4854 5 is_stmt 1 view -0
 7204              		.cfi_startproc
 7205              		@ args = 4, pretend = 0, frame = 0
 7206              		@ frame_needed = 0, uses_anonymous_args = 0
4854:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7207              		.loc 1 4854 5 is_stmt 0 view .LVU2038
 7208 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7209              	.LCFI56:
 7210              		.cfi_def_cfa_offset 24
 7211              		.cfi_offset 3, -24
 7212              		.cfi_offset 4, -20
 7213              		.cfi_offset 5, -16
 7214              		.cfi_offset 6, -12
 7215              		.cfi_offset 7, -8
 7216              		.cfi_offset 14, -4
4855:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
 7217              		.loc 1 4855 9 is_stmt 1 view .LVU2039
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 259


4856:FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 7218              		.loc 1 4856 9 view .LVU2040
 7219              	.LVL523:
4857:FreeRTOS/Source/tasks.c **** 
 7220              		.loc 1 4857 9 view .LVU2041
4859:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 7221              		.loc 1 4859 9 view .LVU2042
 7222 0002 41B1     		cbz	r1, .L519
4859:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 7223              		.loc 1 4859 9 view .LVU2043
 7224              	.LBB297:
 7225              	.LBI297:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7226              		.loc 2 194 34 view .LVU2044
 7227              	.LBB298:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7228              		.loc 2 196 9 view .LVU2045
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7229              		.loc 2 198 9 view .LVU2046
 7230              		.syntax unified
 7231              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7232 0004 4FF05003 			mov r3, #80												
 7233 0008 83F31188 		msr basepri, r3											
 7234 000c BFF36F8F 		isb														
 7235 0010 BFF34F8F 		dsb														
 7236              	
 7237              	@ 0 "" 2
 7238              	.LVL524:
 7239              		.thumb
 7240              		.syntax unified
 7241              	.L520:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7242              		.loc 2 198 9 is_stmt 0 view .LVU2047
 7243              	.LBE298:
 7244              	.LBE297:
4859:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 7245              		.loc 1 4859 9 is_stmt 1 discriminator 1 view .LVU2048
4859:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 7246              		.loc 1 4859 9 discriminator 1 view .LVU2049
 7247 0014 FEE7     		b	.L520
 7248              	.LVL525:
 7249              	.L519:
4859:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 7250              		.loc 1 4859 9 is_stmt 0 discriminator 1 view .LVU2050
 7251 0016 0446     		mov	r4, r0
 7252 0018 1746     		mov	r7, r2
 7253 001a 1E46     		mov	r6, r3
 7254 001c 0D46     		mov	r5, r1
4859:FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 7255              		.loc 1 4859 80 is_stmt 1 discriminator 2 view .LVU2051
4860:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 7256              		.loc 1 4860 9 discriminator 2 view .LVU2052
 7257 001e B8B1     		cbz	r0, .L541
4860:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 7258              		.loc 1 4860 38 discriminator 2 view .LVU2053
4861:FreeRTOS/Source/tasks.c **** 
 7259              		.loc 1 4861 9 discriminator 2 view .LVU2054
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 260


 7260              	.LVL526:
4863:FreeRTOS/Source/tasks.c ****         {
 7261              		.loc 1 4863 9 discriminator 2 view .LVU2055
 7262 0020 FFF7FEFF 		bl	vPortEnterCritical
 7263              	.LVL527:
4865:FreeRTOS/Source/tasks.c ****             {
 7264              		.loc 1 4865 13 discriminator 2 view .LVU2056
4865:FreeRTOS/Source/tasks.c ****             {
 7265              		.loc 1 4865 15 is_stmt 0 discriminator 2 view .LVU2057
 7266 0024 069B     		ldr	r3, [sp, #24]
 7267 0026 2BB1     		cbz	r3, .L523
4867:FreeRTOS/Source/tasks.c ****             }
 7268              		.loc 1 4867 17 is_stmt 1 view .LVU2058
4867:FreeRTOS/Source/tasks.c ****             }
 7269              		.loc 1 4867 71 is_stmt 0 view .LVU2059
 7270 0028 05F11403 		add	r3, r5, #20
 7271 002c 54F82330 		ldr	r3, [r4, r3, lsl #2]
4867:FreeRTOS/Source/tasks.c ****             }
 7272              		.loc 1 4867 47 view .LVU2060
 7273 0030 069A     		ldr	r2, [sp, #24]
 7274 0032 1360     		str	r3, [r2]
 7275              	.L523:
4870:FreeRTOS/Source/tasks.c **** 
 7276              		.loc 1 4870 13 is_stmt 1 view .LVU2061
4870:FreeRTOS/Source/tasks.c **** 
 7277              		.loc 1 4870 35 is_stmt 0 view .LVU2062
 7278 0034 6219     		adds	r2, r4, r5
 7279 0036 92F85430 		ldrb	r3, [r2, #84]	@ zero_extendqisi2
 7280 003a DBB2     		uxtb	r3, r3
 7281              	.LVL528:
4872:FreeRTOS/Source/tasks.c **** 
 7282              		.loc 1 4872 13 is_stmt 1 view .LVU2063
4872:FreeRTOS/Source/tasks.c **** 
 7283              		.loc 1 4872 53 is_stmt 0 view .LVU2064
 7284 003c 0221     		movs	r1, #2
 7285 003e 82F85410 		strb	r1, [r2, #84]
4874:FreeRTOS/Source/tasks.c ****             {
 7286              		.loc 1 4874 13 is_stmt 1 view .LVU2065
 7287 0042 042E     		cmp	r6, #4
 7288 0044 2BD8     		bhi	.L524
 7289 0046 DFE806F0 		tbb	[pc, r6]
 7290              	.L526:
 7291 004a 12       		.byte	(.L530-.L526)/2
 7292 004b 0C       		.byte	(.L529-.L526)/2
 7293 004c 19       		.byte	(.L528-.L526)/2
 7294 004d 20       		.byte	(.L527-.L526)/2
 7295 004e 24       		.byte	(.L525-.L526)/2
 7296              	.LVL529:
 7297 004f 00       		.p2align 1
 7298              	.L541:
4860:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 7299              		.loc 1 4860 9 view .LVU2066
 7300              	.LBB299:
 7301              	.LBI299:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7302              		.loc 2 194 34 view .LVU2067
 7303              	.LBB300:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 261


 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7304              		.loc 2 196 9 view .LVU2068
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7305              		.loc 2 198 9 view .LVU2069
 7306              		.syntax unified
 7307              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7308 0050 4FF05003 			mov r3, #80												
 7309 0054 83F31188 		msr basepri, r3											
 7310 0058 BFF36F8F 		isb														
 7311 005c BFF34F8F 		dsb														
 7312              	
 7313              	@ 0 "" 2
 7314              	.LVL530:
 7315              		.thumb
 7316              		.syntax unified
 7317              	.L522:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7318              		.loc 2 198 9 is_stmt 0 view .LVU2070
 7319              	.LBE300:
 7320              	.LBE299:
4860:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 7321              		.loc 1 4860 9 is_stmt 1 discriminator 2 view .LVU2071
4860:FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 7322              		.loc 1 4860 9 discriminator 2 view .LVU2072
 7323 0060 FEE7     		b	.L522
 7324              	.LVL531:
 7325              	.L529:
4877:FreeRTOS/Source/tasks.c ****                     break;
 7326              		.loc 1 4877 21 view .LVU2073
4877:FreeRTOS/Source/tasks.c ****                     break;
 7327              		.loc 1 4877 43 is_stmt 0 view .LVU2074
 7328 0062 1435     		adds	r5, r5, #20
 7329              	.LVL532:
4877:FreeRTOS/Source/tasks.c ****                     break;
 7330              		.loc 1 4877 43 view .LVU2075
 7331 0064 54F82520 		ldr	r2, [r4, r5, lsl #2]
4877:FreeRTOS/Source/tasks.c ****                     break;
 7332              		.loc 1 4877 63 view .LVU2076
 7333 0068 3A43     		orrs	r2, r2, r7
 7334 006a 44F82520 		str	r2, [r4, r5, lsl #2]
4878:FreeRTOS/Source/tasks.c **** 
 7335              		.loc 1 4878 21 is_stmt 1 view .LVU2077
 7336              	.LVL533:
 7337              	.L530:
4918:FreeRTOS/Source/tasks.c **** 
 7338              		.loc 1 4918 48 view .LVU2078
4922:FreeRTOS/Source/tasks.c ****             {
 7339              		.loc 1 4922 13 view .LVU2079
4922:FreeRTOS/Source/tasks.c ****             {
 7340              		.loc 1 4922 15 is_stmt 0 view .LVU2080
 7341 006e 012B     		cmp	r3, #1
 7342 0070 22D0     		beq	.L542
 7343 0072 0124     		movs	r4, #1
 7344              	.LVL534:
 7345              	.L531:
4959:FreeRTOS/Source/tasks.c ****             }
 7346              		.loc 1 4959 41 is_stmt 1 view .LVU2081
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 262


4962:FreeRTOS/Source/tasks.c **** 
 7347              		.loc 1 4962 9 view .LVU2082
 7348 0074 FFF7FEFF 		bl	vPortExitCritical
 7349              	.LVL535:
4964:FreeRTOS/Source/tasks.c ****     }
 7350              		.loc 1 4964 9 view .LVU2083
4965:FreeRTOS/Source/tasks.c **** 
 7351              		.loc 1 4965 5 is_stmt 0 view .LVU2084
 7352 0078 2046     		mov	r0, r4
 7353 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7354              	.LVL536:
 7355              	.L528:
4881:FreeRTOS/Source/tasks.c ****                     break;
 7356              		.loc 1 4881 21 is_stmt 1 view .LVU2085
4881:FreeRTOS/Source/tasks.c ****                     break;
 7357              		.loc 1 4881 45 is_stmt 0 view .LVU2086
 7358 007c 1435     		adds	r5, r5, #20
 7359              	.LVL537:
4881:FreeRTOS/Source/tasks.c ****                     break;
 7360              		.loc 1 4881 45 view .LVU2087
 7361 007e 54F82520 		ldr	r2, [r4, r5, lsl #2]
4881:FreeRTOS/Source/tasks.c ****                     break;
 7362              		.loc 1 4881 66 view .LVU2088
 7363 0082 0132     		adds	r2, r2, #1
 7364 0084 44F82520 		str	r2, [r4, r5, lsl #2]
4882:FreeRTOS/Source/tasks.c **** 
 7365              		.loc 1 4882 21 is_stmt 1 view .LVU2089
 7366 0088 F1E7     		b	.L530
 7367              	.LVL538:
 7368              	.L527:
4885:FreeRTOS/Source/tasks.c ****                     break;
 7369              		.loc 1 4885 21 view .LVU2090
4885:FreeRTOS/Source/tasks.c ****                     break;
 7370              		.loc 1 4885 63 is_stmt 0 view .LVU2091
 7371 008a 1435     		adds	r5, r5, #20
 7372              	.LVL539:
4885:FreeRTOS/Source/tasks.c ****                     break;
 7373              		.loc 1 4885 63 view .LVU2092
 7374 008c 44F82570 		str	r7, [r4, r5, lsl #2]
4886:FreeRTOS/Source/tasks.c **** 
 7375              		.loc 1 4886 21 is_stmt 1 view .LVU2093
 7376 0090 EDE7     		b	.L530
 7377              	.LVL540:
 7378              	.L525:
4890:FreeRTOS/Source/tasks.c ****                     {
 7379              		.loc 1 4890 21 view .LVU2094
4890:FreeRTOS/Source/tasks.c ****                     {
 7380              		.loc 1 4890 23 is_stmt 0 view .LVU2095
 7381 0092 022B     		cmp	r3, #2
 7382 0094 5BD0     		beq	.L536
4892:FreeRTOS/Source/tasks.c ****                     }
 7383              		.loc 1 4892 25 is_stmt 1 view .LVU2096
4892:FreeRTOS/Source/tasks.c ****                     }
 7384              		.loc 1 4892 67 is_stmt 0 view .LVU2097
 7385 0096 1435     		adds	r5, r5, #20
 7386              	.LVL541:
4892:FreeRTOS/Source/tasks.c ****                     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 263


 7387              		.loc 1 4892 67 view .LVU2098
 7388 0098 44F82570 		str	r7, [r4, r5, lsl #2]
 7389 009c E7E7     		b	.L530
 7390              	.LVL542:
 7391              	.L524:
4913:FreeRTOS/Source/tasks.c **** 
 7392              		.loc 1 4913 21 is_stmt 1 view .LVU2099
 7393 009e 2E4A     		ldr	r2, .L544
 7394 00a0 1268     		ldr	r2, [r2]
 7395 00a2 002A     		cmp	r2, #0
 7396 00a4 E3D0     		beq	.L530
4913:FreeRTOS/Source/tasks.c **** 
 7397              		.loc 1 4913 21 view .LVU2100
 7398              	.LBB301:
 7399              	.LBI301:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7400              		.loc 2 194 34 view .LVU2101
 7401              	.LBB302:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7402              		.loc 2 196 9 view .LVU2102
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7403              		.loc 2 198 9 view .LVU2103
 7404              		.syntax unified
 7405              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7406 00a6 4FF05003 			mov r3, #80												
 7407 00aa 83F31188 		msr basepri, r3											
 7408 00ae BFF36F8F 		isb														
 7409 00b2 BFF34F8F 		dsb														
 7410              	
 7411              	@ 0 "" 2
 7412              	.LVL543:
 7413              		.thumb
 7414              		.syntax unified
 7415              	.L532:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7416              		.loc 2 198 9 is_stmt 0 view .LVU2104
 7417              	.LBE302:
 7418              	.LBE301:
4913:FreeRTOS/Source/tasks.c **** 
 7419              		.loc 1 4913 21 is_stmt 1 discriminator 3 view .LVU2105
4913:FreeRTOS/Source/tasks.c **** 
 7420              		.loc 1 4913 21 discriminator 3 view .LVU2106
 7421 00b6 FEE7     		b	.L532
 7422              	.LVL544:
 7423              	.L542:
 7424              	.LBB303:
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7425              		.loc 1 4924 17 view .LVU2107
 7426 00b8 6369     		ldr	r3, [r4, #20]
 7427              	.LVL545:
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7428              		.loc 1 4924 17 view .LVU2108
 7429 00ba A168     		ldr	r1, [r4, #8]
 7430 00bc E268     		ldr	r2, [r4, #12]
 7431 00be 8A60     		str	r2, [r1, #8]
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7432              		.loc 1 4924 17 view .LVU2109
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 264


 7433 00c0 A168     		ldr	r1, [r4, #8]
 7434 00c2 5160     		str	r1, [r2, #4]
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7435              		.loc 1 4924 17 view .LVU2110
 7436 00c4 5A68     		ldr	r2, [r3, #4]
 7437 00c6 211D     		adds	r1, r4, #4
 7438 00c8 8A42     		cmp	r2, r1
 7439 00ca 2BD0     		beq	.L543
 7440              	.L533:
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7441              		.loc 1 4924 17 discriminator 3 view .LVU2111
 7442 00cc 0022     		movs	r2, #0
 7443 00ce 6261     		str	r2, [r4, #20]
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7444              		.loc 1 4924 17 discriminator 3 view .LVU2112
 7445 00d0 1A68     		ldr	r2, [r3]
 7446 00d2 013A     		subs	r2, r2, #1
 7447 00d4 1A60     		str	r2, [r3]
 7448              	.LBE303:
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7449              		.loc 1 4924 62 discriminator 3 view .LVU2113
4925:FreeRTOS/Source/tasks.c **** 
 7450              		.loc 1 4925 17 discriminator 3 view .LVU2114
4925:FreeRTOS/Source/tasks.c **** 
 7451              		.loc 1 4925 17 discriminator 3 view .LVU2115
 7452 00d6 E36A     		ldr	r3, [r4, #44]
 7453              	.LVL546:
4925:FreeRTOS/Source/tasks.c **** 
 7454              		.loc 1 4925 17 is_stmt 0 discriminator 3 view .LVU2116
 7455 00d8 0122     		movs	r2, #1
 7456 00da 9A40     		lsls	r2, r2, r3
 7457 00dc 1F48     		ldr	r0, .L544+4
 7458 00de 0568     		ldr	r5, [r0]
 7459 00e0 2A43     		orrs	r2, r2, r5
 7460 00e2 0260     		str	r2, [r0]
 7461              	.LBB304:
4925:FreeRTOS/Source/tasks.c **** 
 7462              		.loc 1 4925 17 is_stmt 1 discriminator 3 view .LVU2117
 7463 00e4 1E4A     		ldr	r2, .L544+8
 7464 00e6 03EB8303 		add	r3, r3, r3, lsl #2
 7465 00ea 02EB8303 		add	r3, r2, r3, lsl #2
 7466 00ee 5B68     		ldr	r3, [r3, #4]
 7467              	.LVL547:
4925:FreeRTOS/Source/tasks.c **** 
 7468              		.loc 1 4925 17 discriminator 3 view .LVU2118
4925:FreeRTOS/Source/tasks.c **** 
 7469              		.loc 1 4925 17 discriminator 3 view .LVU2119
4925:FreeRTOS/Source/tasks.c **** 
 7470              		.loc 1 4925 17 discriminator 3 view .LVU2120
 7471 00f0 A360     		str	r3, [r4, #8]
4925:FreeRTOS/Source/tasks.c **** 
 7472              		.loc 1 4925 17 discriminator 3 view .LVU2121
 7473 00f2 9868     		ldr	r0, [r3, #8]
 7474 00f4 E060     		str	r0, [r4, #12]
4925:FreeRTOS/Source/tasks.c **** 
 7475              		.loc 1 4925 17 discriminator 3 view .LVU2122
 7476 00f6 4160     		str	r1, [r0, #4]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 265


4925:FreeRTOS/Source/tasks.c **** 
 7477              		.loc 1 4925 17 discriminator 3 view .LVU2123
 7478 00f8 9960     		str	r1, [r3, #8]
4925:FreeRTOS/Source/tasks.c **** 
 7479              		.loc 1 4925 17 discriminator 3 view .LVU2124
 7480 00fa E36A     		ldr	r3, [r4, #44]
 7481              	.LVL548:
4925:FreeRTOS/Source/tasks.c **** 
 7482              		.loc 1 4925 17 is_stmt 0 discriminator 3 view .LVU2125
 7483 00fc 03EB8301 		add	r1, r3, r3, lsl #2
 7484 0100 8800     		lsls	r0, r1, #2
 7485 0102 02EB8101 		add	r1, r2, r1, lsl #2
 7486 0106 6161     		str	r1, [r4, #20]
4925:FreeRTOS/Source/tasks.c **** 
 7487              		.loc 1 4925 17 is_stmt 1 discriminator 3 view .LVU2126
 7488 0108 1158     		ldr	r1, [r2, r0]
 7489 010a 0131     		adds	r1, r1, #1
 7490 010c 1150     		str	r1, [r2, r0]
 7491              	.LBE304:
4925:FreeRTOS/Source/tasks.c **** 
 7492              		.loc 1 4925 17 discriminator 3 view .LVU2127
4925:FreeRTOS/Source/tasks.c **** 
 7493              		.loc 1 4925 47 discriminator 3 view .LVU2128
4928:FreeRTOS/Source/tasks.c **** 
 7494              		.loc 1 4928 17 discriminator 3 view .LVU2129
 7495 010e A36A     		ldr	r3, [r4, #40]
 7496 0110 5BB1     		cbz	r3, .L534
4928:FreeRTOS/Source/tasks.c **** 
 7497              		.loc 1 4928 17 view .LVU2130
 7498              	.LBB305:
 7499              	.LBI305:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7500              		.loc 2 194 34 view .LVU2131
 7501              	.LBB306:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7502              		.loc 2 196 9 view .LVU2132
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7503              		.loc 2 198 9 view .LVU2133
 7504              		.syntax unified
 7505              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7506 0112 4FF05003 			mov r3, #80												
 7507 0116 83F31188 		msr basepri, r3											
 7508 011a BFF36F8F 		isb														
 7509 011e BFF34F8F 		dsb														
 7510              	
 7511              	@ 0 "" 2
 7512              	.LVL549:
 7513              		.thumb
 7514              		.syntax unified
 7515              	.L535:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7516              		.loc 2 198 9 is_stmt 0 view .LVU2134
 7517              	.LBE306:
 7518              	.LBE305:
4928:FreeRTOS/Source/tasks.c **** 
 7519              		.loc 1 4928 17 is_stmt 1 discriminator 4 view .LVU2135
4928:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 266


 7520              		.loc 1 4928 17 discriminator 4 view .LVU2136
 7521 0122 FEE7     		b	.L535
 7522              	.LVL550:
 7523              	.L543:
 7524              	.LBB307:
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7525              		.loc 1 4924 17 discriminator 1 view .LVU2137
 7526 0124 E268     		ldr	r2, [r4, #12]
 7527 0126 5A60     		str	r2, [r3, #4]
 7528 0128 D0E7     		b	.L533
 7529              	.LVL551:
 7530              	.L534:
4924:FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7531              		.loc 1 4924 17 is_stmt 0 discriminator 1 view .LVU2138
 7532              	.LBE307:
4928:FreeRTOS/Source/tasks.c **** 
 7533              		.loc 1 4928 94 is_stmt 1 discriminator 2 view .LVU2139
4946:FreeRTOS/Source/tasks.c ****                 {
 7534              		.loc 1 4946 17 discriminator 2 view .LVU2140
4946:FreeRTOS/Source/tasks.c ****                 {
 7535              		.loc 1 4946 26 is_stmt 0 discriminator 2 view .LVU2141
 7536 012a E26A     		ldr	r2, [r4, #44]
4946:FreeRTOS/Source/tasks.c ****                 {
 7537              		.loc 1 4946 53 discriminator 2 view .LVU2142
 7538 012c 0D4B     		ldr	r3, .L544+12
 7539 012e 1B68     		ldr	r3, [r3]
 7540 0130 DB6A     		ldr	r3, [r3, #44]
4946:FreeRTOS/Source/tasks.c ****                 {
 7541              		.loc 1 4946 19 discriminator 2 view .LVU2143
 7542 0132 9A42     		cmp	r2, r3
 7543 0134 0DD9     		bls	.L538
4950:FreeRTOS/Source/tasks.c ****                 }
 7544              		.loc 1 4950 21 is_stmt 1 view .LVU2144
 7545 0136 4FF0E023 		mov	r3, #-536813568
 7546 013a 4FF08052 		mov	r2, #268435456
 7547 013e C3F8042D 		str	r2, [r3, #3332]
 7548              	.LVL552:
4950:FreeRTOS/Source/tasks.c ****                 }
 7549              		.loc 1 4950 21 view .LVU2145
 7550              		.syntax unified
 7551              	@ 4950 "FreeRTOS/Source/tasks.c" 1
 7552 0142 BFF34F8F 		dsb
 7553              	@ 0 "" 2
4950:FreeRTOS/Source/tasks.c ****                 }
 7554              		.loc 1 4950 21 view .LVU2146
 7555              	@ 4950 "FreeRTOS/Source/tasks.c" 1
 7556 0146 BFF36F8F 		isb
 7557              	@ 0 "" 2
4950:FreeRTOS/Source/tasks.c ****                 }
 7558              		.loc 1 4950 52 view .LVU2147
 7559              		.thumb
 7560              		.syntax unified
 7561 014a 0124     		movs	r4, #1
 7562              	.LVL553:
4950:FreeRTOS/Source/tasks.c ****                 }
 7563              		.loc 1 4950 52 is_stmt 0 view .LVU2148
 7564 014c 92E7     		b	.L531
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 267


 7565              	.LVL554:
 7566              	.L536:
4897:FreeRTOS/Source/tasks.c ****                     }
 7567              		.loc 1 4897 33 view .LVU2149
 7568 014e 0024     		movs	r4, #0
 7569              	.LVL555:
4897:FreeRTOS/Source/tasks.c ****                     }
 7570              		.loc 1 4897 33 view .LVU2150
 7571 0150 90E7     		b	.L531
 7572              	.LVL556:
 7573              	.L538:
4897:FreeRTOS/Source/tasks.c ****                     }
 7574              		.loc 1 4897 33 view .LVU2151
 7575 0152 0124     		movs	r4, #1
 7576              	.LVL557:
4897:FreeRTOS/Source/tasks.c ****                     }
 7577              		.loc 1 4897 33 view .LVU2152
 7578 0154 8EE7     		b	.L531
 7579              	.L545:
 7580 0156 00BF     		.align	2
 7581              	.L544:
 7582 0158 00000000 		.word	xTickCount
 7583 015c 00000000 		.word	uxTopReadyPriority
 7584 0160 00000000 		.word	pxReadyTasksLists
 7585 0164 00000000 		.word	pxCurrentTCB
 7586              		.cfi_endproc
 7587              	.LFE59:
 7589              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7590              		.align	1
 7591              		.global	xTaskGenericNotifyFromISR
 7592              		.syntax unified
 7593              		.thumb
 7594              		.thumb_func
 7596              	xTaskGenericNotifyFromISR:
 7597              	.LVL558:
 7598              	.LFB60:
4978:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7599              		.loc 1 4978 5 is_stmt 1 view -0
 7600              		.cfi_startproc
 7601              		@ args = 8, pretend = 0, frame = 0
 7602              		@ frame_needed = 0, uses_anonymous_args = 0
4978:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7603              		.loc 1 4978 5 is_stmt 0 view .LVU2154
 7604 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7605              	.LCFI57:
 7606              		.cfi_def_cfa_offset 24
 7607              		.cfi_offset 3, -24
 7608              		.cfi_offset 4, -20
 7609              		.cfi_offset 5, -16
 7610              		.cfi_offset 6, -12
 7611              		.cfi_offset 7, -8
 7612              		.cfi_offset 14, -4
4979:FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 7613              		.loc 1 4979 9 is_stmt 1 view .LVU2155
4980:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
 7614              		.loc 1 4980 9 view .LVU2156
4981:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 268


 7615              		.loc 1 4981 9 view .LVU2157
 7616              	.LVL559:
4982:FreeRTOS/Source/tasks.c **** 
 7617              		.loc 1 4982 9 view .LVU2158
4984:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7618              		.loc 1 4984 9 view .LVU2159
 7619 0002 68B1     		cbz	r0, .L572
 7620 0004 0C46     		mov	r4, r1
 7621 0006 1746     		mov	r7, r2
 7622 0008 1D46     		mov	r5, r3
 7623 000a 0646     		mov	r6, r0
4984:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7624              		.loc 1 4984 38 discriminator 2 view .LVU2160
4985:FreeRTOS/Source/tasks.c **** 
 7625              		.loc 1 4985 9 discriminator 2 view .LVU2161
 7626 000c 89B1     		cbz	r1, .L549
4985:FreeRTOS/Source/tasks.c **** 
 7627              		.loc 1 4985 9 view .LVU2162
 7628              	.LBB308:
 7629              	.LBI308:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7630              		.loc 2 194 34 view .LVU2163
 7631              	.LBB309:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7632              		.loc 2 196 9 view .LVU2164
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7633              		.loc 2 198 9 view .LVU2165
 7634              		.syntax unified
 7635              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7636 000e 4FF05003 			mov r3, #80												
 7637 0012 83F31188 		msr basepri, r3											
 7638 0016 BFF36F8F 		isb														
 7639 001a BFF34F8F 		dsb														
 7640              	
 7641              	@ 0 "" 2
 7642              	.LVL560:
 7643              		.thumb
 7644              		.syntax unified
 7645              	.L550:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7646              		.loc 2 198 9 is_stmt 0 view .LVU2166
 7647              	.LBE309:
 7648              	.LBE308:
4985:FreeRTOS/Source/tasks.c **** 
 7649              		.loc 1 4985 9 is_stmt 1 discriminator 2 view .LVU2167
4985:FreeRTOS/Source/tasks.c **** 
 7650              		.loc 1 4985 9 discriminator 2 view .LVU2168
 7651 001e FEE7     		b	.L550
 7652              	.LVL561:
 7653              	.L572:
4984:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7654              		.loc 1 4984 9 view .LVU2169
 7655              	.LBB310:
 7656              	.LBI310:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7657              		.loc 2 194 34 view .LVU2170
 7658              	.LBB311:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 269


 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7659              		.loc 2 196 9 view .LVU2171
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7660              		.loc 2 198 9 view .LVU2172
 7661              		.syntax unified
 7662              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7663 0020 4FF05003 			mov r3, #80												
 7664 0024 83F31188 		msr basepri, r3											
 7665 0028 BFF36F8F 		isb														
 7666 002c BFF34F8F 		dsb														
 7667              	
 7668              	@ 0 "" 2
 7669              	.LVL562:
 7670              		.thumb
 7671              		.syntax unified
 7672              	.L548:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7673              		.loc 2 198 9 is_stmt 0 view .LVU2173
 7674              	.LBE311:
 7675              	.LBE310:
4984:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7676              		.loc 1 4984 9 is_stmt 1 discriminator 1 view .LVU2174
4984:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7677              		.loc 1 4984 9 discriminator 1 view .LVU2175
 7678 0030 FEE7     		b	.L548
 7679              	.LVL563:
 7680              	.L549:
4985:FreeRTOS/Source/tasks.c **** 
 7681              		.loc 1 4985 80 discriminator 2 view .LVU2176
5003:FreeRTOS/Source/tasks.c **** 
 7682              		.loc 1 5003 9 discriminator 2 view .LVU2177
 7683 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7684              	.LVL564:
5005:FreeRTOS/Source/tasks.c **** 
 7685              		.loc 1 5005 9 discriminator 2 view .LVU2178
5007:FreeRTOS/Source/tasks.c ****         {
 7686              		.loc 1 5007 9 discriminator 2 view .LVU2179
 7687              	.LBB312:
 7688              	.LBI312:
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7689              		.loc 2 210 38 discriminator 2 view .LVU2180
 7690              	.LBB313:
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7691              		.loc 2 212 9 discriminator 2 view .LVU2181
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7692              		.loc 2 214 9 discriminator 2 view .LVU2182
 7693              		.syntax unified
 7694              	@ 214 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7695 0036 EFF31182 			mrs r2, basepri											
 7696 003a 4FF05003 		mov r3, #80												
 7697 003e 83F31188 		msr basepri, r3											
 7698 0042 BFF36F8F 		isb														
 7699 0046 BFF34F8F 		dsb														
 7700              	
 7701              	@ 0 "" 2
 7702              	.LVL565:
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 270


 7703              		.loc 2 226 9 discriminator 2 view .LVU2183
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 7704              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU2184
 7705              		.thumb
 7706              		.syntax unified
 7707              	.LBE313:
 7708              	.LBE312:
5009:FreeRTOS/Source/tasks.c ****             {
 7709              		.loc 1 5009 13 is_stmt 1 discriminator 2 view .LVU2185
5009:FreeRTOS/Source/tasks.c ****             {
 7710              		.loc 1 5009 15 is_stmt 0 discriminator 2 view .LVU2186
 7711 004a 069B     		ldr	r3, [sp, #24]
 7712 004c 2BB1     		cbz	r3, .L551
5011:FreeRTOS/Source/tasks.c ****             }
 7713              		.loc 1 5011 17 is_stmt 1 view .LVU2187
5011:FreeRTOS/Source/tasks.c ****             }
 7714              		.loc 1 5011 71 is_stmt 0 view .LVU2188
 7715 004e 04F11403 		add	r3, r4, #20
 7716 0052 56F82330 		ldr	r3, [r6, r3, lsl #2]
5011:FreeRTOS/Source/tasks.c ****             }
 7717              		.loc 1 5011 47 view .LVU2189
 7718 0056 0699     		ldr	r1, [sp, #24]
 7719 0058 0B60     		str	r3, [r1]
 7720              	.L551:
5014:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7721              		.loc 1 5014 13 is_stmt 1 view .LVU2190
5014:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7722              		.loc 1 5014 35 is_stmt 0 view .LVU2191
 7723 005a 3119     		adds	r1, r6, r4
 7724 005c 91F85430 		ldrb	r3, [r1, #84]	@ zero_extendqisi2
 7725 0060 DBB2     		uxtb	r3, r3
 7726              	.LVL566:
5015:FreeRTOS/Source/tasks.c **** 
 7727              		.loc 1 5015 13 is_stmt 1 view .LVU2192
5015:FreeRTOS/Source/tasks.c **** 
 7728              		.loc 1 5015 53 is_stmt 0 view .LVU2193
 7729 0062 0220     		movs	r0, #2
 7730 0064 81F85400 		strb	r0, [r1, #84]
5017:FreeRTOS/Source/tasks.c ****             {
 7731              		.loc 1 5017 13 is_stmt 1 view .LVU2194
 7732 0068 042D     		cmp	r5, #4
 7733 006a 21D8     		bhi	.L552
 7734 006c DFE805F0 		tbb	[pc, r5]
 7735              	.L554:
 7736 0070 09       		.byte	(.L558-.L554)/2
 7737 0071 03       		.byte	(.L557-.L554)/2
 7738 0072 0F       		.byte	(.L556-.L554)/2
 7739 0073 16       		.byte	(.L555-.L554)/2
 7740 0074 1A       		.byte	(.L553-.L554)/2
 7741 0075 00       		.p2align 1
 7742              	.L557:
5020:FreeRTOS/Source/tasks.c ****                     break;
 7743              		.loc 1 5020 21 view .LVU2195
5020:FreeRTOS/Source/tasks.c ****                     break;
 7744              		.loc 1 5020 43 is_stmt 0 view .LVU2196
 7745 0076 1434     		adds	r4, r4, #20
 7746              	.LVL567:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 271


5020:FreeRTOS/Source/tasks.c ****                     break;
 7747              		.loc 1 5020 43 view .LVU2197
 7748 0078 56F82410 		ldr	r1, [r6, r4, lsl #2]
5020:FreeRTOS/Source/tasks.c ****                     break;
 7749              		.loc 1 5020 63 view .LVU2198
 7750 007c 3943     		orrs	r1, r1, r7
 7751 007e 46F82410 		str	r1, [r6, r4, lsl #2]
5021:FreeRTOS/Source/tasks.c **** 
 7752              		.loc 1 5021 21 is_stmt 1 view .LVU2199
 7753              	.LVL568:
 7754              	.L558:
5060:FreeRTOS/Source/tasks.c **** 
 7755              		.loc 1 5060 57 view .LVU2200
5064:FreeRTOS/Source/tasks.c ****             {
 7756              		.loc 1 5064 13 view .LVU2201
5064:FreeRTOS/Source/tasks.c ****             {
 7757              		.loc 1 5064 15 is_stmt 0 view .LVU2202
 7758 0082 012B     		cmp	r3, #1
 7759 0084 21D0     		beq	.L573
 7760 0086 0120     		movs	r0, #1
 7761              	.LVL569:
 7762              	.L559:
5097:FreeRTOS/Source/tasks.c ****                 }
 7763              		.loc 1 5097 45 is_stmt 1 view .LVU2203
5101:FreeRTOS/Source/tasks.c **** 
 7764              		.loc 1 5101 9 view .LVU2204
 7765              	.LBB314:
 7766              	.LBI314:
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7767              		.loc 2 230 34 view .LVU2205
 7768              	.LBB315:
 7769              		.loc 2 232 9 view .LVU2206
 7770              		.syntax unified
 7771              	@ 232 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7772 0088 82F31188 			msr basepri, r2	
 7773              	@ 0 "" 2
 7774              		.thumb
 7775              		.syntax unified
 7776              	.LBE315:
 7777              	.LBE314:
5103:FreeRTOS/Source/tasks.c ****     }
 7778              		.loc 1 5103 9 view .LVU2207
5104:FreeRTOS/Source/tasks.c **** 
 7779              		.loc 1 5104 5 is_stmt 0 view .LVU2208
 7780 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7781              	.LVL570:
 7782              	.L556:
5024:FreeRTOS/Source/tasks.c ****                     break;
 7783              		.loc 1 5024 21 is_stmt 1 view .LVU2209
5024:FreeRTOS/Source/tasks.c ****                     break;
 7784              		.loc 1 5024 45 is_stmt 0 view .LVU2210
 7785 008e 1434     		adds	r4, r4, #20
 7786              	.LVL571:
5024:FreeRTOS/Source/tasks.c ****                     break;
 7787              		.loc 1 5024 45 view .LVU2211
 7788 0090 56F82410 		ldr	r1, [r6, r4, lsl #2]
5024:FreeRTOS/Source/tasks.c ****                     break;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 272


 7789              		.loc 1 5024 66 view .LVU2212
 7790 0094 0131     		adds	r1, r1, #1
 7791 0096 46F82410 		str	r1, [r6, r4, lsl #2]
5025:FreeRTOS/Source/tasks.c **** 
 7792              		.loc 1 5025 21 is_stmt 1 view .LVU2213
 7793 009a F2E7     		b	.L558
 7794              	.LVL572:
 7795              	.L555:
5028:FreeRTOS/Source/tasks.c ****                     break;
 7796              		.loc 1 5028 21 view .LVU2214
5028:FreeRTOS/Source/tasks.c ****                     break;
 7797              		.loc 1 5028 63 is_stmt 0 view .LVU2215
 7798 009c 1434     		adds	r4, r4, #20
 7799              	.LVL573:
5028:FreeRTOS/Source/tasks.c ****                     break;
 7800              		.loc 1 5028 63 view .LVU2216
 7801 009e 46F82470 		str	r7, [r6, r4, lsl #2]
5029:FreeRTOS/Source/tasks.c **** 
 7802              		.loc 1 5029 21 is_stmt 1 view .LVU2217
 7803 00a2 EEE7     		b	.L558
 7804              	.LVL574:
 7805              	.L553:
5033:FreeRTOS/Source/tasks.c ****                     {
 7806              		.loc 1 5033 21 view .LVU2218
5033:FreeRTOS/Source/tasks.c ****                     {
 7807              		.loc 1 5033 23 is_stmt 0 view .LVU2219
 7808 00a4 022B     		cmp	r3, #2
 7809 00a6 6AD0     		beq	.L567
5035:FreeRTOS/Source/tasks.c ****                     }
 7810              		.loc 1 5035 25 is_stmt 1 view .LVU2220
5035:FreeRTOS/Source/tasks.c ****                     }
 7811              		.loc 1 5035 67 is_stmt 0 view .LVU2221
 7812 00a8 1434     		adds	r4, r4, #20
 7813              	.LVL575:
5035:FreeRTOS/Source/tasks.c ****                     }
 7814              		.loc 1 5035 67 view .LVU2222
 7815 00aa 46F82470 		str	r7, [r6, r4, lsl #2]
 7816 00ae E8E7     		b	.L558
 7817              	.LVL576:
 7818              	.L552:
5056:FreeRTOS/Source/tasks.c ****                     break;
 7819              		.loc 1 5056 21 is_stmt 1 view .LVU2223
 7820 00b0 3549     		ldr	r1, .L575
 7821 00b2 0968     		ldr	r1, [r1]
 7822 00b4 0029     		cmp	r1, #0
 7823 00b6 E4D0     		beq	.L558
5056:FreeRTOS/Source/tasks.c ****                     break;
 7824              		.loc 1 5056 21 view .LVU2224
 7825              	.LBB316:
 7826              	.LBI316:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7827              		.loc 2 194 34 view .LVU2225
 7828              	.LBB317:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7829              		.loc 2 196 9 view .LVU2226
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7830              		.loc 2 198 9 view .LVU2227
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 273


 7831              		.syntax unified
 7832              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7833 00b8 4FF05003 			mov r3, #80												
 7834 00bc 83F31188 		msr basepri, r3											
 7835 00c0 BFF36F8F 		isb														
 7836 00c4 BFF34F8F 		dsb														
 7837              	
 7838              	@ 0 "" 2
 7839              	.LVL577:
 7840              		.thumb
 7841              		.syntax unified
 7842              	.L560:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7843              		.loc 2 198 9 is_stmt 0 view .LVU2228
 7844              	.LBE317:
 7845              	.LBE316:
5056:FreeRTOS/Source/tasks.c ****                     break;
 7846              		.loc 1 5056 21 is_stmt 1 discriminator 3 view .LVU2229
5056:FreeRTOS/Source/tasks.c ****                     break;
 7847              		.loc 1 5056 21 discriminator 3 view .LVU2230
 7848 00c8 FEE7     		b	.L560
 7849              	.LVL578:
 7850              	.L573:
5067:FreeRTOS/Source/tasks.c **** 
 7851              		.loc 1 5067 17 view .LVU2231
 7852 00ca B36A     		ldr	r3, [r6, #40]
 7853              	.LVL579:
5067:FreeRTOS/Source/tasks.c **** 
 7854              		.loc 1 5067 17 is_stmt 0 view .LVU2232
 7855 00cc 43B1     		cbz	r3, .L561
5067:FreeRTOS/Source/tasks.c **** 
 7856              		.loc 1 5067 17 is_stmt 1 view .LVU2233
 7857              	.LBB318:
 7858              	.LBI318:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 7859              		.loc 2 194 34 view .LVU2234
 7860              	.LBB319:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7861              		.loc 2 196 9 view .LVU2235
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7862              		.loc 2 198 9 view .LVU2236
 7863              		.syntax unified
 7864              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7865 00ce 4FF05003 			mov r3, #80												
 7866 00d2 83F31188 		msr basepri, r3											
 7867 00d6 BFF36F8F 		isb														
 7868 00da BFF34F8F 		dsb														
 7869              	
 7870              	@ 0 "" 2
 7871              	.LVL580:
 7872              		.thumb
 7873              		.syntax unified
 7874              	.L562:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7875              		.loc 2 198 9 is_stmt 0 view .LVU2237
 7876              	.LBE319:
 7877              	.LBE318:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 274


5067:FreeRTOS/Source/tasks.c **** 
 7878              		.loc 1 5067 17 is_stmt 1 discriminator 4 view .LVU2238
5067:FreeRTOS/Source/tasks.c **** 
 7879              		.loc 1 5067 17 discriminator 4 view .LVU2239
 7880 00de FEE7     		b	.L562
 7881              	.L561:
5067:FreeRTOS/Source/tasks.c **** 
 7882              		.loc 1 5067 94 discriminator 2 view .LVU2240
5069:FreeRTOS/Source/tasks.c ****                 {
 7883              		.loc 1 5069 17 discriminator 2 view .LVU2241
5069:FreeRTOS/Source/tasks.c ****                 {
 7884              		.loc 1 5069 42 is_stmt 0 discriminator 2 view .LVU2242
 7885 00e0 2A4B     		ldr	r3, .L575+4
 7886 00e2 1B68     		ldr	r3, [r3]
5069:FreeRTOS/Source/tasks.c ****                 {
 7887              		.loc 1 5069 19 discriminator 2 view .LVU2243
 7888 00e4 002B     		cmp	r3, #0
 7889 00e6 3CD1     		bne	.L563
 7890              	.LBB320:
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7891              		.loc 1 5071 21 is_stmt 1 view .LVU2244
 7892 00e8 7369     		ldr	r3, [r6, #20]
 7893              	.LVL581:
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7894              		.loc 1 5071 21 view .LVU2245
 7895 00ea B068     		ldr	r0, [r6, #8]
 7896 00ec F168     		ldr	r1, [r6, #12]
 7897 00ee 8160     		str	r1, [r0, #8]
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7898              		.loc 1 5071 21 view .LVU2246
 7899 00f0 B068     		ldr	r0, [r6, #8]
 7900 00f2 4860     		str	r0, [r1, #4]
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7901              		.loc 1 5071 21 view .LVU2247
 7902 00f4 5968     		ldr	r1, [r3, #4]
 7903 00f6 301D     		adds	r0, r6, #4
 7904 00f8 8142     		cmp	r1, r0
 7905 00fa 2FD0     		beq	.L574
 7906              	.L564:
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7907              		.loc 1 5071 21 discriminator 3 view .LVU2248
 7908 00fc 0021     		movs	r1, #0
 7909 00fe 7161     		str	r1, [r6, #20]
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7910              		.loc 1 5071 21 discriminator 3 view .LVU2249
 7911 0100 1968     		ldr	r1, [r3]
 7912 0102 0139     		subs	r1, r1, #1
 7913 0104 1960     		str	r1, [r3]
 7914              	.LBE320:
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7915              		.loc 1 5071 66 discriminator 3 view .LVU2250
5072:FreeRTOS/Source/tasks.c ****                 }
 7916              		.loc 1 5072 21 discriminator 3 view .LVU2251
5072:FreeRTOS/Source/tasks.c ****                 }
 7917              		.loc 1 5072 21 discriminator 3 view .LVU2252
 7918 0106 F36A     		ldr	r3, [r6, #44]
 7919              	.LVL582:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 275


5072:FreeRTOS/Source/tasks.c ****                 }
 7920              		.loc 1 5072 21 is_stmt 0 discriminator 3 view .LVU2253
 7921 0108 0121     		movs	r1, #1
 7922 010a 9940     		lsls	r1, r1, r3
 7923 010c 204C     		ldr	r4, .L575+8
 7924 010e 2568     		ldr	r5, [r4]
 7925 0110 2943     		orrs	r1, r1, r5
 7926 0112 2160     		str	r1, [r4]
 7927              	.LBB321:
5072:FreeRTOS/Source/tasks.c ****                 }
 7928              		.loc 1 5072 21 is_stmt 1 discriminator 3 view .LVU2254
 7929 0114 1F49     		ldr	r1, .L575+12
 7930 0116 03EB8303 		add	r3, r3, r3, lsl #2
 7931 011a 01EB8303 		add	r3, r1, r3, lsl #2
 7932 011e 5B68     		ldr	r3, [r3, #4]
 7933              	.LVL583:
5072:FreeRTOS/Source/tasks.c ****                 }
 7934              		.loc 1 5072 21 discriminator 3 view .LVU2255
5072:FreeRTOS/Source/tasks.c ****                 }
 7935              		.loc 1 5072 21 discriminator 3 view .LVU2256
5072:FreeRTOS/Source/tasks.c ****                 }
 7936              		.loc 1 5072 21 discriminator 3 view .LVU2257
 7937 0120 B360     		str	r3, [r6, #8]
5072:FreeRTOS/Source/tasks.c ****                 }
 7938              		.loc 1 5072 21 discriminator 3 view .LVU2258
 7939 0122 9C68     		ldr	r4, [r3, #8]
 7940 0124 F460     		str	r4, [r6, #12]
5072:FreeRTOS/Source/tasks.c ****                 }
 7941              		.loc 1 5072 21 discriminator 3 view .LVU2259
 7942 0126 6060     		str	r0, [r4, #4]
5072:FreeRTOS/Source/tasks.c ****                 }
 7943              		.loc 1 5072 21 discriminator 3 view .LVU2260
 7944 0128 9860     		str	r0, [r3, #8]
5072:FreeRTOS/Source/tasks.c ****                 }
 7945              		.loc 1 5072 21 discriminator 3 view .LVU2261
 7946 012a F36A     		ldr	r3, [r6, #44]
 7947              	.LVL584:
5072:FreeRTOS/Source/tasks.c ****                 }
 7948              		.loc 1 5072 21 is_stmt 0 discriminator 3 view .LVU2262
 7949 012c 03EB8300 		add	r0, r3, r3, lsl #2
 7950 0130 8400     		lsls	r4, r0, #2
 7951 0132 01EB8000 		add	r0, r1, r0, lsl #2
 7952 0136 7061     		str	r0, [r6, #20]
5072:FreeRTOS/Source/tasks.c ****                 }
 7953              		.loc 1 5072 21 is_stmt 1 discriminator 3 view .LVU2263
 7954 0138 0859     		ldr	r0, [r1, r4]
 7955 013a 0130     		adds	r0, r0, #1
 7956 013c 0851     		str	r0, [r1, r4]
 7957              	.LBE321:
5072:FreeRTOS/Source/tasks.c ****                 }
 7958              		.loc 1 5072 21 discriminator 3 view .LVU2264
5072:FreeRTOS/Source/tasks.c ****                 }
 7959              		.loc 1 5072 51 discriminator 3 view .LVU2265
 7960              	.LVL585:
 7961              	.L565:
5078:FreeRTOS/Source/tasks.c ****                 }
 7962              		.loc 1 5078 89 discriminator 1 view .LVU2266
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 276


5081:FreeRTOS/Source/tasks.c ****                 {
 7963              		.loc 1 5081 17 discriminator 1 view .LVU2267
5081:FreeRTOS/Source/tasks.c ****                 {
 7964              		.loc 1 5081 26 is_stmt 0 discriminator 1 view .LVU2268
 7965 013e F16A     		ldr	r1, [r6, #44]
5081:FreeRTOS/Source/tasks.c ****                 {
 7966              		.loc 1 5081 53 discriminator 1 view .LVU2269
 7967 0140 154B     		ldr	r3, .L575+16
 7968 0142 1B68     		ldr	r3, [r3]
 7969 0144 DB6A     		ldr	r3, [r3, #44]
5081:FreeRTOS/Source/tasks.c ****                 {
 7970              		.loc 1 5081 19 discriminator 1 view .LVU2270
 7971 0146 9942     		cmp	r1, r3
 7972 0148 1BD9     		bls	.L569
5085:FreeRTOS/Source/tasks.c ****                     {
 7973              		.loc 1 5085 21 is_stmt 1 view .LVU2271
5085:FreeRTOS/Source/tasks.c ****                     {
 7974              		.loc 1 5085 23 is_stmt 0 view .LVU2272
 7975 014a 079B     		ldr	r3, [sp, #28]
 7976 014c 13B1     		cbz	r3, .L566
5087:FreeRTOS/Source/tasks.c ****                     }
 7977              		.loc 1 5087 25 is_stmt 1 view .LVU2273
5087:FreeRTOS/Source/tasks.c ****                     }
 7978              		.loc 1 5087 52 is_stmt 0 view .LVU2274
 7979 014e 0123     		movs	r3, #1
 7980 0150 0799     		ldr	r1, [sp, #28]
 7981 0152 0B60     		str	r3, [r1]
 7982              	.L566:
5093:FreeRTOS/Source/tasks.c ****                 }
 7983              		.loc 1 5093 21 is_stmt 1 view .LVU2275
5093:FreeRTOS/Source/tasks.c ****                 }
 7984              		.loc 1 5093 35 is_stmt 0 view .LVU2276
 7985 0154 0120     		movs	r0, #1
 7986 0156 114B     		ldr	r3, .L575+20
 7987 0158 1860     		str	r0, [r3]
 7988 015a 95E7     		b	.L559
 7989              	.LVL586:
 7990              	.L574:
 7991              	.LBB322:
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7992              		.loc 1 5071 21 is_stmt 1 discriminator 1 view .LVU2277
 7993 015c F168     		ldr	r1, [r6, #12]
 7994 015e 5960     		str	r1, [r3, #4]
 7995 0160 CCE7     		b	.L564
 7996              	.LVL587:
 7997              	.L563:
5071:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7998              		.loc 1 5071 21 is_stmt 0 discriminator 1 view .LVU2278
 7999              	.LBE322:
 8000              	.LBB323:
5078:FreeRTOS/Source/tasks.c ****                 }
 8001              		.loc 1 5078 21 is_stmt 1 view .LVU2279
 8002 0162 0F4B     		ldr	r3, .L575+24
 8003 0164 5968     		ldr	r1, [r3, #4]
 8004              	.LVL588:
5078:FreeRTOS/Source/tasks.c ****                 }
 8005              		.loc 1 5078 21 view .LVU2280
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 277


5078:FreeRTOS/Source/tasks.c ****                 }
 8006              		.loc 1 5078 21 view .LVU2281
5078:FreeRTOS/Source/tasks.c ****                 }
 8007              		.loc 1 5078 21 view .LVU2282
 8008 0166 F161     		str	r1, [r6, #28]
5078:FreeRTOS/Source/tasks.c ****                 }
 8009              		.loc 1 5078 21 view .LVU2283
 8010 0168 8C68     		ldr	r4, [r1, #8]
 8011 016a 3462     		str	r4, [r6, #32]
5078:FreeRTOS/Source/tasks.c ****                 }
 8012              		.loc 1 5078 21 view .LVU2284
 8013 016c 06F11800 		add	r0, r6, #24
 8014 0170 6060     		str	r0, [r4, #4]
5078:FreeRTOS/Source/tasks.c ****                 }
 8015              		.loc 1 5078 21 view .LVU2285
 8016 0172 8860     		str	r0, [r1, #8]
5078:FreeRTOS/Source/tasks.c ****                 }
 8017              		.loc 1 5078 21 view .LVU2286
 8018 0174 B362     		str	r3, [r6, #40]
5078:FreeRTOS/Source/tasks.c ****                 }
 8019              		.loc 1 5078 21 view .LVU2287
 8020 0176 1968     		ldr	r1, [r3]
 8021              	.LVL589:
5078:FreeRTOS/Source/tasks.c ****                 }
 8022              		.loc 1 5078 21 is_stmt 0 view .LVU2288
 8023 0178 0131     		adds	r1, r1, #1
 8024 017a 1960     		str	r1, [r3]
 8025 017c DFE7     		b	.L565
 8026              	.LVL590:
 8027              	.L567:
5078:FreeRTOS/Source/tasks.c ****                 }
 8028              		.loc 1 5078 21 view .LVU2289
 8029              	.LBE323:
5040:FreeRTOS/Source/tasks.c ****                     }
 8030              		.loc 1 5040 33 view .LVU2290
 8031 017e 0020     		movs	r0, #0
 8032 0180 82E7     		b	.L559
 8033              	.LVL591:
 8034              	.L569:
5040:FreeRTOS/Source/tasks.c ****                     }
 8035              		.loc 1 5040 33 view .LVU2291
 8036 0182 0120     		movs	r0, #1
 8037 0184 80E7     		b	.L559
 8038              	.L576:
 8039 0186 00BF     		.align	2
 8040              	.L575:
 8041 0188 00000000 		.word	xTickCount
 8042 018c 00000000 		.word	uxSchedulerSuspended
 8043 0190 00000000 		.word	uxTopReadyPriority
 8044 0194 00000000 		.word	pxReadyTasksLists
 8045 0198 00000000 		.word	pxCurrentTCB
 8046 019c 00000000 		.word	xYieldPending
 8047 01a0 00000000 		.word	xPendingReadyList
 8048              		.cfi_endproc
 8049              	.LFE60:
 8051              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 8052              		.align	1
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 278


 8053              		.global	vTaskGenericNotifyGiveFromISR
 8054              		.syntax unified
 8055              		.thumb
 8056              		.thumb_func
 8058              	vTaskGenericNotifyGiveFromISR:
 8059              	.LVL592:
 8060              	.LFB61:
5114:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 8061              		.loc 1 5114 5 is_stmt 1 view -0
 8062              		.cfi_startproc
 8063              		@ args = 0, pretend = 0, frame = 0
 8064              		@ frame_needed = 0, uses_anonymous_args = 0
5114:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 8065              		.loc 1 5114 5 is_stmt 0 view .LVU2293
 8066 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 8067              	.LCFI58:
 8068              		.cfi_def_cfa_offset 24
 8069              		.cfi_offset 3, -24
 8070              		.cfi_offset 4, -20
 8071              		.cfi_offset 5, -16
 8072              		.cfi_offset 6, -12
 8073              		.cfi_offset 7, -8
 8074              		.cfi_offset 14, -4
5115:FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 8075              		.loc 1 5115 9 is_stmt 1 view .LVU2294
5116:FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 8076              		.loc 1 5116 9 view .LVU2295
5117:FreeRTOS/Source/tasks.c **** 
 8077              		.loc 1 5117 9 view .LVU2296
5119:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8078              		.loc 1 5119 9 view .LVU2297
 8079 0002 60B1     		cbz	r0, .L590
 8080 0004 0C46     		mov	r4, r1
 8081 0006 1546     		mov	r5, r2
 8082 0008 0646     		mov	r6, r0
5119:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8083              		.loc 1 5119 38 discriminator 2 view .LVU2298
5120:FreeRTOS/Source/tasks.c **** 
 8084              		.loc 1 5120 9 discriminator 2 view .LVU2299
 8085 000a 89B1     		cbz	r1, .L580
5120:FreeRTOS/Source/tasks.c **** 
 8086              		.loc 1 5120 9 view .LVU2300
 8087              	.LBB324:
 8088              	.LBI324:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 8089              		.loc 2 194 34 view .LVU2301
 8090              	.LBB325:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8091              		.loc 2 196 9 view .LVU2302
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8092              		.loc 2 198 9 view .LVU2303
 8093              		.syntax unified
 8094              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8095 000c 4FF05003 			mov r3, #80												
 8096 0010 83F31188 		msr basepri, r3											
 8097 0014 BFF36F8F 		isb														
 8098 0018 BFF34F8F 		dsb														
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 279


 8099              	
 8100              	@ 0 "" 2
 8101              	.LVL593:
 8102              		.thumb
 8103              		.syntax unified
 8104              	.L581:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8105              		.loc 2 198 9 is_stmt 0 view .LVU2304
 8106              	.LBE325:
 8107              	.LBE324:
5120:FreeRTOS/Source/tasks.c **** 
 8108              		.loc 1 5120 9 is_stmt 1 discriminator 2 view .LVU2305
5120:FreeRTOS/Source/tasks.c **** 
 8109              		.loc 1 5120 9 discriminator 2 view .LVU2306
 8110 001c FEE7     		b	.L581
 8111              	.L590:
5119:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8112              		.loc 1 5119 9 view .LVU2307
 8113              	.LBB326:
 8114              	.LBI326:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 8115              		.loc 2 194 34 view .LVU2308
 8116              	.LBB327:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8117              		.loc 2 196 9 view .LVU2309
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8118              		.loc 2 198 9 view .LVU2310
 8119              		.syntax unified
 8120              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8121 001e 4FF05003 			mov r3, #80												
 8122 0022 83F31188 		msr basepri, r3											
 8123 0026 BFF36F8F 		isb														
 8124 002a BFF34F8F 		dsb														
 8125              	
 8126              	@ 0 "" 2
 8127              	.LVL594:
 8128              		.thumb
 8129              		.syntax unified
 8130              	.L579:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8131              		.loc 2 198 9 is_stmt 0 view .LVU2311
 8132              	.LBE327:
 8133              	.LBE326:
5119:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8134              		.loc 1 5119 9 is_stmt 1 discriminator 1 view .LVU2312
5119:FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8135              		.loc 1 5119 9 discriminator 1 view .LVU2313
 8136 002e FEE7     		b	.L579
 8137              	.L580:
5120:FreeRTOS/Source/tasks.c **** 
 8138              		.loc 1 5120 80 discriminator 2 view .LVU2314
5138:FreeRTOS/Source/tasks.c **** 
 8139              		.loc 1 5138 9 discriminator 2 view .LVU2315
 8140 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
 8141              	.LVL595:
5140:FreeRTOS/Source/tasks.c **** 
 8142              		.loc 1 5140 9 discriminator 2 view .LVU2316
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 280


5142:FreeRTOS/Source/tasks.c ****         {
 8143              		.loc 1 5142 9 discriminator 2 view .LVU2317
 8144              	.LBB328:
 8145              	.LBI328:
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 8146              		.loc 2 210 38 discriminator 2 view .LVU2318
 8147              	.LBB329:
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8148              		.loc 2 212 9 discriminator 2 view .LVU2319
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8149              		.loc 2 214 9 discriminator 2 view .LVU2320
 8150              		.syntax unified
 8151              	@ 214 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8152 0034 EFF31181 			mrs r1, basepri											
 8153 0038 4FF05003 		mov r3, #80												
 8154 003c 83F31188 		msr basepri, r3											
 8155 0040 BFF36F8F 		isb														
 8156 0044 BFF34F8F 		dsb														
 8157              	
 8158              	@ 0 "" 2
 8159              	.LVL596:
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 8160              		.loc 2 226 9 discriminator 2 view .LVU2321
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     }
 8161              		.loc 2 226 9 is_stmt 0 discriminator 2 view .LVU2322
 8162              		.thumb
 8163              		.syntax unified
 8164              	.LBE329:
 8165              	.LBE328:
5144:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8166              		.loc 1 5144 13 is_stmt 1 discriminator 2 view .LVU2323
5144:FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8167              		.loc 1 5144 35 is_stmt 0 discriminator 2 view .LVU2324
 8168 0048 3219     		adds	r2, r6, r4
 8169 004a 92F85430 		ldrb	r3, [r2, #84]	@ zero_extendqisi2
 8170 004e DBB2     		uxtb	r3, r3
 8171              	.LVL597:
5145:FreeRTOS/Source/tasks.c **** 
 8172              		.loc 1 5145 13 is_stmt 1 discriminator 2 view .LVU2325
5145:FreeRTOS/Source/tasks.c **** 
 8173              		.loc 1 5145 53 is_stmt 0 discriminator 2 view .LVU2326
 8174 0050 0220     		movs	r0, #2
 8175 0052 82F85400 		strb	r0, [r2, #84]
5149:FreeRTOS/Source/tasks.c **** 
 8176              		.loc 1 5149 13 is_stmt 1 discriminator 2 view .LVU2327
5149:FreeRTOS/Source/tasks.c **** 
 8177              		.loc 1 5149 37 is_stmt 0 discriminator 2 view .LVU2328
 8178 0056 1434     		adds	r4, r4, #20
 8179              	.LVL598:
5149:FreeRTOS/Source/tasks.c **** 
 8180              		.loc 1 5149 37 discriminator 2 view .LVU2329
 8181 0058 56F82420 		ldr	r2, [r6, r4, lsl #2]
5149:FreeRTOS/Source/tasks.c **** 
 8182              		.loc 1 5149 58 discriminator 2 view .LVU2330
 8183 005c 0132     		adds	r2, r2, #1
 8184 005e 46F82420 		str	r2, [r6, r4, lsl #2]
5151:FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 281


 8185              		.loc 1 5151 62 is_stmt 1 discriminator 2 view .LVU2331
5155:FreeRTOS/Source/tasks.c ****             {
 8186              		.loc 1 5155 13 discriminator 2 view .LVU2332
5155:FreeRTOS/Source/tasks.c ****             {
 8187              		.loc 1 5155 15 is_stmt 0 discriminator 2 view .LVU2333
 8188 0062 012B     		cmp	r3, #1
 8189 0064 02D0     		beq	.L591
 8190              	.LVL599:
 8191              	.L582:
5188:FreeRTOS/Source/tasks.c ****                 }
 8192              		.loc 1 5188 45 is_stmt 1 view .LVU2334
5192:FreeRTOS/Source/tasks.c ****     }
 8193              		.loc 1 5192 9 view .LVU2335
 8194              	.LBB330:
 8195              	.LBI330:
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 8196              		.loc 2 230 34 view .LVU2336
 8197              	.LBB331:
 8198              		.loc 2 232 9 view .LVU2337
 8199              		.syntax unified
 8200              	@ 232 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8201 0066 81F31188 			msr basepri, r1	
 8202              	@ 0 "" 2
 8203              		.thumb
 8204              		.syntax unified
 8205              	.LBE331:
 8206              	.LBE330:
5193:FreeRTOS/Source/tasks.c **** 
 8207              		.loc 1 5193 5 is_stmt 0 view .LVU2338
 8208 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 8209              	.LVL600:
 8210              	.L591:
5158:FreeRTOS/Source/tasks.c **** 
 8211              		.loc 1 5158 17 is_stmt 1 view .LVU2339
 8212 006c B36A     		ldr	r3, [r6, #40]
 8213              	.LVL601:
5158:FreeRTOS/Source/tasks.c **** 
 8214              		.loc 1 5158 17 is_stmt 0 view .LVU2340
 8215 006e 43B1     		cbz	r3, .L583
5158:FreeRTOS/Source/tasks.c **** 
 8216              		.loc 1 5158 17 is_stmt 1 view .LVU2341
 8217              	.LBB332:
 8218              	.LBI332:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 8219              		.loc 2 194 34 view .LVU2342
 8220              	.LBB333:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8221              		.loc 2 196 9 view .LVU2343
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8222              		.loc 2 198 9 view .LVU2344
 8223              		.syntax unified
 8224              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8225 0070 4FF05003 			mov r3, #80												
 8226 0074 83F31188 		msr basepri, r3											
 8227 0078 BFF36F8F 		isb														
 8228 007c BFF34F8F 		dsb														
 8229              	
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 282


 8230              	@ 0 "" 2
 8231              	.LVL602:
 8232              		.thumb
 8233              		.syntax unified
 8234              	.L584:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8235              		.loc 2 198 9 is_stmt 0 view .LVU2345
 8236              	.LBE333:
 8237              	.LBE332:
5158:FreeRTOS/Source/tasks.c **** 
 8238              		.loc 1 5158 17 is_stmt 1 discriminator 3 view .LVU2346
5158:FreeRTOS/Source/tasks.c **** 
 8239              		.loc 1 5158 17 discriminator 3 view .LVU2347
 8240 0080 FEE7     		b	.L584
 8241              	.L583:
5158:FreeRTOS/Source/tasks.c **** 
 8242              		.loc 1 5158 94 discriminator 2 view .LVU2348
5160:FreeRTOS/Source/tasks.c ****                 {
 8243              		.loc 1 5160 17 discriminator 2 view .LVU2349
5160:FreeRTOS/Source/tasks.c ****                 {
 8244              		.loc 1 5160 42 is_stmt 0 discriminator 2 view .LVU2350
 8245 0082 264B     		ldr	r3, .L593
 8246 0084 1B68     		ldr	r3, [r3]
5160:FreeRTOS/Source/tasks.c ****                 {
 8247              		.loc 1 5160 19 discriminator 2 view .LVU2351
 8248 0086 002B     		cmp	r3, #0
 8249 0088 3AD1     		bne	.L585
 8250              	.LBB334:
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8251              		.loc 1 5162 21 is_stmt 1 view .LVU2352
 8252 008a 7369     		ldr	r3, [r6, #20]
 8253              	.LVL603:
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8254              		.loc 1 5162 21 view .LVU2353
 8255 008c B068     		ldr	r0, [r6, #8]
 8256 008e F268     		ldr	r2, [r6, #12]
 8257 0090 8260     		str	r2, [r0, #8]
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8258              		.loc 1 5162 21 view .LVU2354
 8259 0092 B068     		ldr	r0, [r6, #8]
 8260 0094 5060     		str	r0, [r2, #4]
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8261              		.loc 1 5162 21 view .LVU2355
 8262 0096 5A68     		ldr	r2, [r3, #4]
 8263 0098 301D     		adds	r0, r6, #4
 8264 009a 8242     		cmp	r2, r0
 8265 009c 2DD0     		beq	.L592
 8266              	.L586:
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8267              		.loc 1 5162 21 discriminator 3 view .LVU2356
 8268 009e 0022     		movs	r2, #0
 8269 00a0 7261     		str	r2, [r6, #20]
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8270              		.loc 1 5162 21 discriminator 3 view .LVU2357
 8271 00a2 1A68     		ldr	r2, [r3]
 8272 00a4 013A     		subs	r2, r2, #1
 8273 00a6 1A60     		str	r2, [r3]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 283


 8274              	.LBE334:
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8275              		.loc 1 5162 66 discriminator 3 view .LVU2358
5163:FreeRTOS/Source/tasks.c ****                 }
 8276              		.loc 1 5163 21 discriminator 3 view .LVU2359
5163:FreeRTOS/Source/tasks.c ****                 }
 8277              		.loc 1 5163 21 discriminator 3 view .LVU2360
 8278 00a8 F36A     		ldr	r3, [r6, #44]
 8279              	.LVL604:
5163:FreeRTOS/Source/tasks.c ****                 }
 8280              		.loc 1 5163 21 is_stmt 0 discriminator 3 view .LVU2361
 8281 00aa 0122     		movs	r2, #1
 8282 00ac 9A40     		lsls	r2, r2, r3
 8283 00ae 1C4C     		ldr	r4, .L593+4
 8284 00b0 2768     		ldr	r7, [r4]
 8285 00b2 3A43     		orrs	r2, r2, r7
 8286 00b4 2260     		str	r2, [r4]
 8287              	.LBB335:
5163:FreeRTOS/Source/tasks.c ****                 }
 8288              		.loc 1 5163 21 is_stmt 1 discriminator 3 view .LVU2362
 8289 00b6 1B4A     		ldr	r2, .L593+8
 8290 00b8 03EB8303 		add	r3, r3, r3, lsl #2
 8291 00bc 02EB8303 		add	r3, r2, r3, lsl #2
 8292 00c0 5B68     		ldr	r3, [r3, #4]
 8293              	.LVL605:
5163:FreeRTOS/Source/tasks.c ****                 }
 8294              		.loc 1 5163 21 discriminator 3 view .LVU2363
5163:FreeRTOS/Source/tasks.c ****                 }
 8295              		.loc 1 5163 21 discriminator 3 view .LVU2364
5163:FreeRTOS/Source/tasks.c ****                 }
 8296              		.loc 1 5163 21 discriminator 3 view .LVU2365
 8297 00c2 B360     		str	r3, [r6, #8]
5163:FreeRTOS/Source/tasks.c ****                 }
 8298              		.loc 1 5163 21 discriminator 3 view .LVU2366
 8299 00c4 9C68     		ldr	r4, [r3, #8]
 8300 00c6 F460     		str	r4, [r6, #12]
5163:FreeRTOS/Source/tasks.c ****                 }
 8301              		.loc 1 5163 21 discriminator 3 view .LVU2367
 8302 00c8 6060     		str	r0, [r4, #4]
5163:FreeRTOS/Source/tasks.c ****                 }
 8303              		.loc 1 5163 21 discriminator 3 view .LVU2368
 8304 00ca 9860     		str	r0, [r3, #8]
5163:FreeRTOS/Source/tasks.c ****                 }
 8305              		.loc 1 5163 21 discriminator 3 view .LVU2369
 8306 00cc F36A     		ldr	r3, [r6, #44]
 8307              	.LVL606:
5163:FreeRTOS/Source/tasks.c ****                 }
 8308              		.loc 1 5163 21 is_stmt 0 discriminator 3 view .LVU2370
 8309 00ce 03EB8300 		add	r0, r3, r3, lsl #2
 8310 00d2 8400     		lsls	r4, r0, #2
 8311 00d4 02EB8000 		add	r0, r2, r0, lsl #2
 8312 00d8 7061     		str	r0, [r6, #20]
5163:FreeRTOS/Source/tasks.c ****                 }
 8313              		.loc 1 5163 21 is_stmt 1 discriminator 3 view .LVU2371
 8314 00da 1059     		ldr	r0, [r2, r4]
 8315 00dc 0130     		adds	r0, r0, #1
 8316 00de 1051     		str	r0, [r2, r4]
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 284


 8317              	.LBE335:
5163:FreeRTOS/Source/tasks.c ****                 }
 8318              		.loc 1 5163 21 discriminator 3 view .LVU2372
5163:FreeRTOS/Source/tasks.c ****                 }
 8319              		.loc 1 5163 51 discriminator 3 view .LVU2373
 8320              	.LVL607:
 8321              	.L587:
5169:FreeRTOS/Source/tasks.c ****                 }
 8322              		.loc 1 5169 89 discriminator 1 view .LVU2374
5172:FreeRTOS/Source/tasks.c ****                 {
 8323              		.loc 1 5172 17 discriminator 1 view .LVU2375
5172:FreeRTOS/Source/tasks.c ****                 {
 8324              		.loc 1 5172 26 is_stmt 0 discriminator 1 view .LVU2376
 8325 00e0 F26A     		ldr	r2, [r6, #44]
5172:FreeRTOS/Source/tasks.c ****                 {
 8326              		.loc 1 5172 53 discriminator 1 view .LVU2377
 8327 00e2 114B     		ldr	r3, .L593+12
 8328 00e4 1B68     		ldr	r3, [r3]
 8329 00e6 DB6A     		ldr	r3, [r3, #44]
5172:FreeRTOS/Source/tasks.c ****                 {
 8330              		.loc 1 5172 19 discriminator 1 view .LVU2378
 8331 00e8 9A42     		cmp	r2, r3
 8332 00ea BCD9     		bls	.L582
5176:FreeRTOS/Source/tasks.c ****                     {
 8333              		.loc 1 5176 21 is_stmt 1 view .LVU2379
5176:FreeRTOS/Source/tasks.c ****                     {
 8334              		.loc 1 5176 23 is_stmt 0 view .LVU2380
 8335 00ec 0DB1     		cbz	r5, .L588
5178:FreeRTOS/Source/tasks.c ****                     }
 8336              		.loc 1 5178 25 is_stmt 1 view .LVU2381
5178:FreeRTOS/Source/tasks.c ****                     }
 8337              		.loc 1 5178 52 is_stmt 0 view .LVU2382
 8338 00ee 0123     		movs	r3, #1
 8339 00f0 2B60     		str	r3, [r5]
 8340              	.L588:
5184:FreeRTOS/Source/tasks.c ****                 }
 8341              		.loc 1 5184 21 is_stmt 1 view .LVU2383
5184:FreeRTOS/Source/tasks.c ****                 }
 8342              		.loc 1 5184 35 is_stmt 0 view .LVU2384
 8343 00f2 0E4B     		ldr	r3, .L593+16
 8344 00f4 0122     		movs	r2, #1
 8345 00f6 1A60     		str	r2, [r3]
 8346 00f8 B5E7     		b	.L582
 8347              	.LVL608:
 8348              	.L592:
 8349              	.LBB336:
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8350              		.loc 1 5162 21 is_stmt 1 discriminator 1 view .LVU2385
 8351 00fa F268     		ldr	r2, [r6, #12]
 8352 00fc 5A60     		str	r2, [r3, #4]
 8353 00fe CEE7     		b	.L586
 8354              	.LVL609:
 8355              	.L585:
5162:FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8356              		.loc 1 5162 21 is_stmt 0 discriminator 1 view .LVU2386
 8357              	.LBE336:
 8358              	.LBB337:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 285


5169:FreeRTOS/Source/tasks.c ****                 }
 8359              		.loc 1 5169 21 is_stmt 1 view .LVU2387
 8360 0100 0B4B     		ldr	r3, .L593+20
 8361 0102 5A68     		ldr	r2, [r3, #4]
 8362              	.LVL610:
5169:FreeRTOS/Source/tasks.c ****                 }
 8363              		.loc 1 5169 21 view .LVU2388
5169:FreeRTOS/Source/tasks.c ****                 }
 8364              		.loc 1 5169 21 view .LVU2389
5169:FreeRTOS/Source/tasks.c ****                 }
 8365              		.loc 1 5169 21 view .LVU2390
 8366 0104 F261     		str	r2, [r6, #28]
5169:FreeRTOS/Source/tasks.c ****                 }
 8367              		.loc 1 5169 21 view .LVU2391
 8368 0106 9468     		ldr	r4, [r2, #8]
 8369 0108 3462     		str	r4, [r6, #32]
5169:FreeRTOS/Source/tasks.c ****                 }
 8370              		.loc 1 5169 21 view .LVU2392
 8371 010a 06F11800 		add	r0, r6, #24
 8372 010e 6060     		str	r0, [r4, #4]
5169:FreeRTOS/Source/tasks.c ****                 }
 8373              		.loc 1 5169 21 view .LVU2393
 8374 0110 9060     		str	r0, [r2, #8]
5169:FreeRTOS/Source/tasks.c ****                 }
 8375              		.loc 1 5169 21 view .LVU2394
 8376 0112 B362     		str	r3, [r6, #40]
5169:FreeRTOS/Source/tasks.c ****                 }
 8377              		.loc 1 5169 21 view .LVU2395
 8378 0114 1A68     		ldr	r2, [r3]
 8379              	.LVL611:
5169:FreeRTOS/Source/tasks.c ****                 }
 8380              		.loc 1 5169 21 is_stmt 0 view .LVU2396
 8381 0116 0132     		adds	r2, r2, #1
 8382 0118 1A60     		str	r2, [r3]
 8383 011a E1E7     		b	.L587
 8384              	.L594:
 8385              		.align	2
 8386              	.L593:
 8387 011c 00000000 		.word	uxSchedulerSuspended
 8388 0120 00000000 		.word	uxTopReadyPriority
 8389 0124 00000000 		.word	pxReadyTasksLists
 8390 0128 00000000 		.word	pxCurrentTCB
 8391 012c 00000000 		.word	xYieldPending
 8392 0130 00000000 		.word	xPendingReadyList
 8393              	.LBE337:
 8394              		.cfi_endproc
 8395              	.LFE61:
 8397              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 8398              		.align	1
 8399              		.global	xTaskGenericNotifyStateClear
 8400              		.syntax unified
 8401              		.thumb
 8402              		.thumb_func
 8404              	xTaskGenericNotifyStateClear:
 8405              	.LVL612:
 8406              	.LFB62:
5202:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 286


 8407              		.loc 1 5202 5 is_stmt 1 view -0
 8408              		.cfi_startproc
 8409              		@ args = 0, pretend = 0, frame = 0
 8410              		@ frame_needed = 0, uses_anonymous_args = 0
5202:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 8411              		.loc 1 5202 5 is_stmt 0 view .LVU2398
 8412 0000 38B5     		push	{r3, r4, r5, lr}
 8413              	.LCFI59:
 8414              		.cfi_def_cfa_offset 16
 8415              		.cfi_offset 3, -16
 8416              		.cfi_offset 4, -12
 8417              		.cfi_offset 5, -8
 8418              		.cfi_offset 14, -4
5203:FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 8419              		.loc 1 5203 9 is_stmt 1 view .LVU2399
5204:FreeRTOS/Source/tasks.c **** 
 8420              		.loc 1 5204 9 view .LVU2400
5206:FreeRTOS/Source/tasks.c **** 
 8421              		.loc 1 5206 9 view .LVU2401
 8422 0002 41B1     		cbz	r1, .L596
5206:FreeRTOS/Source/tasks.c **** 
 8423              		.loc 1 5206 9 view .LVU2402
 8424              	.LBB338:
 8425              	.LBI338:
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     {
 8426              		.loc 2 194 34 view .LVU2403
 8427              	.LBB339:
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8428              		.loc 2 196 9 view .LVU2404
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8429              		.loc 2 198 9 view .LVU2405
 8430              		.syntax unified
 8431              	@ 198 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8432 0004 4FF05003 			mov r3, #80												
 8433 0008 83F31188 		msr basepri, r3											
 8434 000c BFF36F8F 		isb														
 8435 0010 BFF34F8F 		dsb														
 8436              	
 8437              	@ 0 "" 2
 8438              	.LVL613:
 8439              		.thumb
 8440              		.syntax unified
 8441              	.L597:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8442              		.loc 2 198 9 is_stmt 0 view .LVU2406
 8443              	.LBE339:
 8444              	.LBE338:
5206:FreeRTOS/Source/tasks.c **** 
 8445              		.loc 1 5206 9 is_stmt 1 discriminator 1 view .LVU2407
5206:FreeRTOS/Source/tasks.c **** 
 8446              		.loc 1 5206 9 discriminator 1 view .LVU2408
 8447 0014 FEE7     		b	.L597
 8448              	.L596:
 8449 0016 0446     		mov	r4, r0
 8450 0018 0D46     		mov	r5, r1
5206:FreeRTOS/Source/tasks.c **** 
 8451              		.loc 1 5206 79 discriminator 2 view .LVU2409
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 287


5210:FreeRTOS/Source/tasks.c **** 
 8452              		.loc 1 5210 9 discriminator 2 view .LVU2410
5210:FreeRTOS/Source/tasks.c **** 
 8453              		.loc 1 5210 17 is_stmt 0 discriminator 2 view .LVU2411
 8454 001a 60B1     		cbz	r0, .L602
 8455              	.LVL614:
 8456              	.L598:
5212:FreeRTOS/Source/tasks.c ****         {
 8457              		.loc 1 5212 9 is_stmt 1 discriminator 4 view .LVU2412
 8458 001c FFF7FEFF 		bl	vPortEnterCritical
 8459              	.LVL615:
5214:FreeRTOS/Source/tasks.c ****             {
 8460              		.loc 1 5214 13 discriminator 4 view .LVU2413
5214:FreeRTOS/Source/tasks.c ****             {
 8461              		.loc 1 5214 37 is_stmt 0 discriminator 4 view .LVU2414
 8462 0020 6319     		adds	r3, r4, r5
 8463 0022 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 8464 0026 DBB2     		uxtb	r3, r3
5214:FreeRTOS/Source/tasks.c ****             {
 8465              		.loc 1 5214 15 discriminator 4 view .LVU2415
 8466 0028 022B     		cmp	r3, #2
 8467 002a 07D0     		beq	.L603
5221:FreeRTOS/Source/tasks.c ****             }
 8468              		.loc 1 5221 25 view .LVU2416
 8469 002c 0024     		movs	r4, #0
 8470              	.LVL616:
 8471              	.L599:
5224:FreeRTOS/Source/tasks.c **** 
 8472              		.loc 1 5224 9 is_stmt 1 view .LVU2417
 8473 002e FFF7FEFF 		bl	vPortExitCritical
 8474              	.LVL617:
5226:FreeRTOS/Source/tasks.c ****     }
 8475              		.loc 1 5226 9 view .LVU2418
5227:FreeRTOS/Source/tasks.c **** 
 8476              		.loc 1 5227 5 is_stmt 0 view .LVU2419
 8477 0032 2046     		mov	r0, r4
 8478 0034 38BD     		pop	{r3, r4, r5, pc}
 8479              	.LVL618:
 8480              	.L602:
5210:FreeRTOS/Source/tasks.c **** 
 8481              		.loc 1 5210 17 discriminator 1 view .LVU2420
 8482 0036 044B     		ldr	r3, .L604
 8483 0038 1C68     		ldr	r4, [r3]
 8484              	.LVL619:
5210:FreeRTOS/Source/tasks.c **** 
 8485              		.loc 1 5210 17 discriminator 1 view .LVU2421
 8486 003a EFE7     		b	.L598
 8487              	.LVL620:
 8488              	.L603:
5216:FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 8489              		.loc 1 5216 17 is_stmt 1 view .LVU2422
5216:FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 8490              		.loc 1 5216 56 is_stmt 0 view .LVU2423
 8491 003c 2C44     		add	r4, r4, r5
 8492              	.LVL621:
5216:FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 8493              		.loc 1 5216 56 view .LVU2424
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 288


 8494 003e 0023     		movs	r3, #0
 8495 0040 84F85430 		strb	r3, [r4, #84]
5217:FreeRTOS/Source/tasks.c ****             }
 8496              		.loc 1 5217 17 is_stmt 1 view .LVU2425
 8497              	.LVL622:
5217:FreeRTOS/Source/tasks.c ****             }
 8498              		.loc 1 5217 25 is_stmt 0 view .LVU2426
 8499 0044 0124     		movs	r4, #1
 8500 0046 F2E7     		b	.L599
 8501              	.L605:
 8502              		.align	2
 8503              	.L604:
 8504 0048 00000000 		.word	pxCurrentTCB
 8505              		.cfi_endproc
 8506              	.LFE62:
 8508              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 8509              		.align	1
 8510              		.global	ulTaskGenericNotifyValueClear
 8511              		.syntax unified
 8512              		.thumb
 8513              		.thumb_func
 8515              	ulTaskGenericNotifyValueClear:
 8516              	.LVL623:
 8517              	.LFB63:
5237:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 8518              		.loc 1 5237 5 is_stmt 1 view -0
 8519              		.cfi_startproc
 8520              		@ args = 0, pretend = 0, frame = 0
 8521              		@ frame_needed = 0, uses_anonymous_args = 0
5237:FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 8522              		.loc 1 5237 5 is_stmt 0 view .LVU2428
 8523 0000 70B5     		push	{r4, r5, r6, lr}
 8524              	.LCFI60:
 8525              		.cfi_def_cfa_offset 16
 8526              		.cfi_offset 4, -16
 8527              		.cfi_offset 5, -12
 8528              		.cfi_offset 6, -8
 8529              		.cfi_offset 14, -4
 8530 0002 0C46     		mov	r4, r1
 8531 0004 1646     		mov	r6, r2
5238:FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 8532              		.loc 1 5238 9 is_stmt 1 view .LVU2429
5239:FreeRTOS/Source/tasks.c **** 
 8533              		.loc 1 5239 9 view .LVU2430
5243:FreeRTOS/Source/tasks.c **** 
 8534              		.loc 1 5243 9 view .LVU2431
5243:FreeRTOS/Source/tasks.c **** 
 8535              		.loc 1 5243 17 is_stmt 0 view .LVU2432
 8536 0006 0546     		mov	r5, r0
 8537 0008 78B1     		cbz	r0, .L609
 8538              	.LVL624:
 8539              	.L607:
5245:FreeRTOS/Source/tasks.c ****         {
 8540              		.loc 1 5245 9 is_stmt 1 discriminator 4 view .LVU2433
 8541 000a FFF7FEFF 		bl	vPortEnterCritical
 8542              	.LVL625:
5249:FreeRTOS/Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 289


 8543              		.loc 1 5249 13 discriminator 4 view .LVU2434
5249:FreeRTOS/Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8544              		.loc 1 5249 22 is_stmt 0 discriminator 4 view .LVU2435
 8545 000e 04F11401 		add	r1, r4, #20
 8546 0012 55F82140 		ldr	r4, [r5, r1, lsl #2]
 8547              	.LVL626:
5250:FreeRTOS/Source/tasks.c ****         }
 8548              		.loc 1 5250 13 is_stmt 1 discriminator 4 view .LVU2436
5250:FreeRTOS/Source/tasks.c ****         }
 8549              		.loc 1 5250 35 is_stmt 0 discriminator 4 view .LVU2437
 8550 0016 55F82130 		ldr	r3, [r5, r1, lsl #2]
5250:FreeRTOS/Source/tasks.c ****         }
 8551              		.loc 1 5250 54 discriminator 4 view .LVU2438
 8552 001a 23EA0603 		bic	r3, r3, r6
 8553 001e 45F82130 		str	r3, [r5, r1, lsl #2]
5252:FreeRTOS/Source/tasks.c **** 
 8554              		.loc 1 5252 9 is_stmt 1 discriminator 4 view .LVU2439
 8555 0022 FFF7FEFF 		bl	vPortExitCritical
 8556              	.LVL627:
5254:FreeRTOS/Source/tasks.c ****     }
 8557              		.loc 1 5254 9 discriminator 4 view .LVU2440
5255:FreeRTOS/Source/tasks.c **** 
 8558              		.loc 1 5255 5 is_stmt 0 discriminator 4 view .LVU2441
 8559 0026 2046     		mov	r0, r4
 8560 0028 70BD     		pop	{r4, r5, r6, pc}
 8561              	.LVL628:
 8562              	.L609:
5243:FreeRTOS/Source/tasks.c **** 
 8563              		.loc 1 5243 17 discriminator 1 view .LVU2442
 8564 002a 014B     		ldr	r3, .L610
 8565 002c 1D68     		ldr	r5, [r3]
 8566              	.LVL629:
5243:FreeRTOS/Source/tasks.c **** 
 8567              		.loc 1 5243 17 discriminator 1 view .LVU2443
 8568 002e ECE7     		b	.L607
 8569              	.L611:
 8570              		.align	2
 8571              	.L610:
 8572 0030 00000000 		.word	pxCurrentTCB
 8573              		.cfi_endproc
 8574              	.LFE63:
 8576              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 8577              		.align	2
 8580              	uxSchedulerSuspended:
 8581 0000 00000000 		.space	4
 8582              		.global	uxTopUsedPriority
 8583              		.section	.data.uxTopUsedPriority,"aw"
 8584              		.align	2
 8587              	uxTopUsedPriority:
 8588 0000 04000000 		.word	4
 8589              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 8590              		.align	2
 8593              	xIdleTaskHandle:
 8594 0000 00000000 		.space	4
 8595              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 8596              		.align	2
 8599              	xNextTaskUnblockTime:
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 290


 8600 0000 00000000 		.space	4
 8601              		.section	.bss.uxTaskNumber,"aw",%nobits
 8602              		.align	2
 8605              	uxTaskNumber:
 8606 0000 00000000 		.space	4
 8607              		.section	.bss.xNumOfOverflows,"aw",%nobits
 8608              		.align	2
 8611              	xNumOfOverflows:
 8612 0000 00000000 		.space	4
 8613              		.section	.bss.xYieldPending,"aw",%nobits
 8614              		.align	2
 8617              	xYieldPending:
 8618 0000 00000000 		.space	4
 8619              		.section	.bss.xPendedTicks,"aw",%nobits
 8620              		.align	2
 8623              	xPendedTicks:
 8624 0000 00000000 		.space	4
 8625              		.section	.bss.xSchedulerRunning,"aw",%nobits
 8626              		.align	2
 8629              	xSchedulerRunning:
 8630 0000 00000000 		.space	4
 8631              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 8632              		.align	2
 8635              	uxTopReadyPriority:
 8636 0000 00000000 		.space	4
 8637              		.section	.bss.xTickCount,"aw",%nobits
 8638              		.align	2
 8641              	xTickCount:
 8642 0000 00000000 		.space	4
 8643              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 8644              		.align	2
 8647              	uxCurrentNumberOfTasks:
 8648 0000 00000000 		.space	4
 8649              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 8650              		.align	2
 8653              	xSuspendedTaskList:
 8654 0000 00000000 		.space	20
 8654      00000000 
 8654      00000000 
 8654      00000000 
 8654      00000000 
 8655              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 8656              		.align	2
 8659              	uxDeletedTasksWaitingCleanUp:
 8660 0000 00000000 		.space	4
 8661              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 8662              		.align	2
 8665              	xTasksWaitingTermination:
 8666 0000 00000000 		.space	20
 8666      00000000 
 8666      00000000 
 8666      00000000 
 8666      00000000 
 8667              		.section	.bss.xPendingReadyList,"aw",%nobits
 8668              		.align	2
 8671              	xPendingReadyList:
 8672 0000 00000000 		.space	20
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 291


 8672      00000000 
 8672      00000000 
 8672      00000000 
 8672      00000000 
 8673              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 8674              		.align	2
 8677              	pxOverflowDelayedTaskList:
 8678 0000 00000000 		.space	4
 8679              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 8680              		.align	2
 8683              	pxDelayedTaskList:
 8684 0000 00000000 		.space	4
 8685              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 8686              		.align	2
 8689              	xDelayedTaskList2:
 8690 0000 00000000 		.space	20
 8690      00000000 
 8690      00000000 
 8690      00000000 
 8690      00000000 
 8691              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 8692              		.align	2
 8695              	xDelayedTaskList1:
 8696 0000 00000000 		.space	20
 8696      00000000 
 8696      00000000 
 8696      00000000 
 8696      00000000 
 8697              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 8698              		.align	2
 8701              	pxReadyTasksLists:
 8702 0000 00000000 		.space	100
 8702      00000000 
 8702      00000000 
 8702      00000000 
 8702      00000000 
 8703              		.global	pxCurrentTCB
 8704              		.section	.bss.pxCurrentTCB,"aw",%nobits
 8705              		.align	2
 8708              	pxCurrentTCB:
 8709 0000 00000000 		.space	4
 8710              		.text
 8711              	.Letext0:
 8712              		.file 3 "c:\\dev\\tools\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\12.2.1\\include\\stddef.h"
 8713              		.file 4 "c:\\dev\\tools\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 8714              		.file 5 "c:\\dev\\tools\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 8715              		.file 6 "FreeRTOS/Source/include/projdefs.h"
 8716              		.file 7 "FreeRTOS/Source/include/list.h"
 8717              		.file 8 "FreeRTOS/Source/include/task.h"
 8718              		.file 9 "FreeRTOS/Source/include/portable.h"
 8719              		.file 10 "FreeRTOS/Source/include/timers.h"
 8720              		.file 11 "c:\\dev\\tools\\arm-gnu-toolchain\\arm-none-eabi\\include\\string.h"
 8721              		.file 12 "<built-in>"
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 292


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:21     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:26     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:114    .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8653   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8671   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:120    .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:125    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:168    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:173    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:208    .text.prvResetNextTaskUnblockTime:00000020 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8683   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8599   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:214    .text.prvDeleteTCB:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:219    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:251    .text.prvInitialiseNewTask:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:256    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:426    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:431    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:504    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8701   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8695   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8689   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8665   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8677   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:516    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:521    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:686    .text.prvAddNewTaskToReadyList:000000b0 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8647   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8708   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8629   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8605   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8635   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:696    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:701    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:774    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8659   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:781    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:786    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:932    .text.prvAddCurrentTaskToDelayedList:00000094 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8641   .bss.xTickCount:00000000 xTickCount
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:943    .text.prvIdleTask:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:948    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1008   .text.prvIdleTask:0000002c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1013   .text.xTaskCreate:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1019   .text.xTaskCreate:00000000 xTaskCreate
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1136   .text.vTaskDelete:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1142   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1335   .text.vTaskDelete:000000c4 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8580   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1348   .text.eTaskGetState:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1354   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1535   .text.eTaskGetState:00000088 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1544   .text.uxTaskPriorityGet:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1550   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1596   .text.uxTaskPriorityGet:0000001c $d
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 293


C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1601   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1607   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1686   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1691   .text.vTaskPrioritySet:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1697   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1964   .text.vTaskPrioritySet:000000f4 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1971   .text.vTaskResume:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:1977   .text.vTaskResume:00000000 vTaskResume
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2132   .text.vTaskResume:00000094 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2139   .text.xTaskResumeFromISR:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2145   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2347   .text.xTaskResumeFromISR:000000b4 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8617   .bss.xYieldPending:00000000 xYieldPending
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2357   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2361   .text.vTaskStartScheduler:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2367   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2498   .text.vTaskStartScheduler:00000070 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8593   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8587   .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2509   .text.vTaskEndScheduler:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2515   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2558   .text.vTaskEndScheduler:00000020 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2563   .text.vTaskSuspendAll:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2569   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2588   .text.vTaskSuspendAll:0000000c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2593   .text.xTaskGetTickCount:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2599   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2620   .text.xTaskGetTickCount:00000008 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2625   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2631   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2660   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2665   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2671   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2687   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2692   .text.pcTaskGetName:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2698   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2755   .text.pcTaskGetName:00000024 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2760   .text.xTaskIncrementTick:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:2766   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3116   .text.xTaskIncrementTick:0000014c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8611   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8623   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3131   .text.xTaskResumeAll:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3137   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3463   .text.xTaskResumeAll:0000012c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3475   .text.xTaskDelayUntil:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3481   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3725   .text.xTaskDelayUntil:000000a8 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3731   .text.vTaskDelay:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3737   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3829   .text.vTaskDelay:00000048 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3834   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3840   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3913   .text.xTaskCatchUpTicks:00000038 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3919   .text.vTaskSwitchContext:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:3925   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4066   .text.vTaskSwitchContext:00000084 $d
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 294


C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4077   .text.vTaskSuspend:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4083   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4310   .text.vTaskSuspend:000000dc $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4321   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4327   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4394   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4399   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4405   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4534   .text.vTaskPlaceOnUnorderedEventList:00000068 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4540   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4546   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4646   .text.vTaskPlaceOnEventListRestricted:00000050 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4651   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4657   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4910   .text.xTaskRemoveFromEventList:000000d8 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4920   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:4926   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5156   .text.vTaskRemoveFromUnorderedEventList:000000cc $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5166   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5172   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5241   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5247   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5253   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5276   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5282   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5288   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5469   .text.xTaskCheckForTimeOut:00000080 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5475   .text.vTaskMissedYield:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5481   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5498   .text.vTaskMissedYield:00000008 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5503   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5509   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5542   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5548   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5573   .text.vTaskGetInfo:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5579   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5726   .text.vTaskGetInfo:00000074 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5731   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5736   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5852   .text.uxTaskGetSystemState:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5858   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:5996   .text.uxTaskGetSystemState:00000098 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6006   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6012   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6031   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6036   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6042   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6080   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6086   .text.xTaskPriorityInherit:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6092   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6279   .text.xTaskPriorityInherit:000000b8 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6286   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6292   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6504   .text.xTaskPriorityDisinherit:000000b0 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6511   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6517   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6738   .text.vTaskPriorityDisinheritAfterTimeout:000000c0 $d
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 295


C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6745   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6751   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6778   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6783   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6789   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6820   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6825   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6831   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6990   .text.ulTaskGenericNotifyTake:000000a4 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:6995   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7001   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7189   .text.xTaskGenericNotifyWait:000000c8 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7194   .text.xTaskGenericNotify:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7200   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7291   .text.xTaskGenericNotify:0000004a $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7582   .text.xTaskGenericNotify:00000158 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7590   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7596   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7736   .text.xTaskGenericNotifyFromISR:00000070 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8041   .text.xTaskGenericNotifyFromISR:00000188 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8052   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8058   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8387   .text.vTaskGenericNotifyGiveFromISR:0000011c $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8398   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8404   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8504   .text.xTaskGenericNotifyStateClear:00000048 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8509   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8515   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8572   .text.ulTaskGenericNotifyValueClear:00000030 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8577   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8584   .data.uxTopUsedPriority:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8590   .bss.xIdleTaskHandle:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8596   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8602   .bss.uxTaskNumber:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8608   .bss.xNumOfOverflows:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8614   .bss.xYieldPending:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8620   .bss.xPendedTicks:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8626   .bss.xSchedulerRunning:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8632   .bss.uxTopReadyPriority:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8638   .bss.xTickCount:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8644   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8650   .bss.xSuspendedTaskList:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8656   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8662   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8668   .bss.xPendingReadyList:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8674   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8680   .bss.pxDelayedTaskList:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8686   .bss.xDelayedTaskList2:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8692   .bss.xDelayedTaskList1:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8698   .bss.pxReadyTasksLists:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:8705   .bss.pxCurrentTCB:00000000 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7297   .text.xTaskGenericNotify:0000004f $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7297   .text.xTaskGenericNotify:00000050 $t
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7741   .text.xTaskGenericNotifyFromISR:00000075 $d
C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s:7741   .text.xTaskGenericNotifyFromISR:00000076 $t

UNDEFINED SYMBOLS
ARM GAS  C:\Users\arge12\AppData\Local\Temp\ccG73BDf.s 			page 296


vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsert
vApplicationIdleHook
pvPortMalloc
vListInsertEnd
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
